2003-09-08  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Snapshotted redland_0_9_14 for 0.9.14 release

	* NEWS.html: Updated for 0.9.14

	* librdf/redland.spec.in: Require raptor 1.0.0

	* RELEASE.html:
	Reformatted some very wide <pre> blocks to make the HTML flow better.

	* librdf/rdf_hash_bdb.c (librdf_hash_bdb_open):
	Restore previous call to db_create.
	Add an extra clause to do nothing inside big #ifdef chain
	if HAVE_DB_CREATE is present.

	* docs/python.html:
	warning that 'make check' may fail if librdf is not installed

	* RELEASE.html, INSTALL.html: Updated for 0.9.14

	* configure.ac: Min raptor version is now 1.0.0

	* raptor/configure.ac: Bumped version to 1.1.0

	* Snapshotted raptor_1_0_0 for 1.0.0 release

	* raptor/libraptor.3: new date

	* raptor/NEWS.html: Note functions were removed, soname was increased

	* raptor/ntriples.h,raptor/Makefile.am: Removed old header ntriples.h

	* raptor/raptor_general.c, raptor/raptor.h, raptor/ntriples_parse.c:
	Removed deprecated functions as promised. Changes are described in
	the libraptor.3 man page.

	* raptor/configure.ac: Updated for Raptor 1.0.0
	Shared library soname major now 1

	* raptor/NEWS.html, raptor/libraptor.3: Updated for Raptor 1.0.0

	* configure.ac:
	With only --with-bdb=PREFIX given, set the lib & include from that
	value.
	Use 'unknown' rather than none when some BDB bits given and no
	guessing.

	* raptor/win32_config.h: Added R_OK define for access()

	* raptor/tests/Makefile.am: test wording for failures

	* librdf/rdf_hash_bdb.c (librdf_hash_bdb_open):
	Probably restore early DB3.0 to working with db_create.

2003-09-05  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/Makefile.am: Added bad-05.nt

	* raptor/tests/bad-05.nt: Bad Unicode character #x110000

	* raptor/tests/test.out, raptor/tests/test.nt: fixes

	* raptor/tests/test.nt:
	Removed resource18-20 - illegal Unicode chars.  Added \U0010FFFF

	* raptor/ntriples_parse.c (raptor_ntriples_term):
	Forbid Unicode characters outside #x0-#x10FFFF

2003-09-04  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* java/org/librdf/redland/World.java: Use librdf_version/copyright*

	* Redland.i: Use librdf_version* and both librdf_copyright strings

	* tcl/Makefile.am: clean more

	* raptor/libraptor.3: Updated for 1.0.0
	Added raptor_parse_file_stream.
	Added new feature normalize_language.
	Added list of all static variables exported.

	* configure.ac: Remove a bunch of unused LIBRDF_VERSION_ AC_SUBST.
	Remove LIBRDF_VERSION_INFO - not used
	Define LIBRDF_VERSION_DECIMAL here and make it an AC_SUBST.

	* librdf/rdf_init.c: Use LIBRDF_VERSION_DECIMAL define.

	* raptor/configure.ac:
	Define RAPTOR_VERSION_DECIMAL here and make it an AC_SUBST.

	* raptor/raptor_general.c: Use RAPTOR_VERSION_DECIMAL define.

	* redland-config.in: Added --version-decimal.

	* redland-config.1, raptor/raptor-config.1:
	Document --version-decimal and --libtool-libs

	* raptor/raptor-config.in: Added --version-decimal.

	* raptor/rdfdump.c: Allow filename "-" to be used as standard input. 
	When a filename is given, use raptor_parse_file.
	Adjust the error messages to mention file names when using
	raptor_parse_file

	* raptor/raptor.h: Added raptor_parse_file_stream

	* raptor/raptor_general.c (raptor_parse_file_stream):
	Added, allowing passing in of an existing
	FILE* stream (with optional filename) and parsing rather than
	raptor doing the fopen/fclose.
	(raptor_parse_file): A NULL uri argument now means stdin.

	* raptor/raptor_internal.h, raptor/raptor_parse.c:
	Remove rdf_parser->fh

	* utils/rdfproc.1:
	Update parse, serailize commands to note optional syntax names, list
	valid names and mention the default RDF/XML.

	* utils/rdfproc.c:
	Make syntax name option to parser commands, defauting to (default
	parser) rdf/xml
	Hide 'query' command further.
	Print short copyright in usage, help.
	Tidy help messages.
	Delete rotten parser features

	* librdf/rdf_parser_raptor.c (librdf_parser_raptor_constructor):
	Register "rdfxml" name and mime
	type, URL http://www.w3.org/TR/rdf-syntax-grammar.
	Keep raptor name around

	* raptor/rdfdump.c:
	Use raptor_short_copyright_string in usage/help messages

	* raptor/raptor_general.c, raptor/raptor.h:
	Added raptor_short_copyright_string

	* utils/rdfproc.c: Free options hash

	* librdf/redland.spec.in: Add rdfproc.
	Require raptor 0.9.12 min

	* utils/rdfproc.1: tweak

	* utils/Makefile.am: Added rdfproc.1

	* utils/rdfproc.1: rdfproc manual page

	* utils/rdfproc.c: help

	* utils/rdfproc.c:
	Tidy usage message - use triples & graphs, explain source, target, arc.
	Add short copyright

	* librdf/rdf_init.c, librdf/librdf.h:
	Added librdf_short_copyright_string.
	Made long one have line breaks and more URIs

	* utils/rdfproc.c: statements now find
	Added optional CONTEXT to add/add-typed/remove, warning if not enabled.

	* utils/rdfproc.c: Use rdfproc_getopt.h

	* configure.ac:
	Enable public domain getopt in getopt.c & rdfproc_getopt.h for
	rdfproc if there is no getopt or getopt_long

	* utils/Makefile.am:
	Enable public domain getopt in getopt.c & rdfproc_getopt.h

	* utils/getopt.c, utils/rdfproc_getopt.h:
	public domain getopt for rdfproc

	* configure.ac: Look for getopt.h

	* librdf/rdf_hash.h: Added librdf_hash_put_strings

	* librdf/rdf_hash.c (librdf_hash_put_strings):
	Added helper to add strings to hash easier.

	* librdf/rdf_storage.c (librdf_new_storage_with_options):
	Added, taking a librdf_hash
	argument.  Similar to librdf_new_model_with_options.

	* librdf/rdf_storage.h: Added librdf_new_storage_with_options

	* librdf/rdf_init.c:
	Renamed public statics to librdf_version* and librdf_copyright_string.
	Added librdf_version_decimal.

	* librdf/librdf.h: Added REDLAND_API
	Added REDLAND_DEPRECATED
	Added public statics librdf_version* and librdf_copyright_string.

	* utils/Makefile.am: Added rdfproc

	* utils/rdfproc.c:
	Redland RDF processor - converted from examples/example4.c

2003-09-03  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Makefile.PL: Updated for 0.9.13
	Uses configure.ac
	Pick the perl prefix to pass to configure.
	make clean needs a little help else it just returns 'exit 2'.
	install: Installs just the shared libraries for raptor and
	redland, then perl.
	Have a hand-crafted MANIFEST and MANIFEST.SKIP now.

	* raptor/raptor_general.c (raptor_set_feature):
	Add new feature normalize_language
	(raptor_set_parser_strict): Set default for feature
	normalize_language to true.

	* raptor/raptor.h, raptor/raptor_internal.h:
	Add new feature normalize_language

	* raptor/raptor_parse.c (raptor_xml_start_element_handler):
	Normalize language to lowercase.
	After http://www.w3.org/TR/rdf-concepts/#dfn-language-identifier
	Controlled by a new parser feature 'normalize_language'.

	* raptor/ntriples_parse.c (raptor_ntriples_parse_line):
	Normalize language to lowercase.
	After http://www.w3.org/TR/rdf-concepts/#dfn-language-identifier

2003-09-01  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/Makefile.am:
	In AM_LDFLAGS, use @LIBRDF_LIBS@ for -L/-l libraries and
	@LIBRDF_INTERNAL_LIBS@ for libtool things.
	Remove not-needed $(LIBS) from test binaries link lines.

	* examples/Makefile.am:
	In AM_LDFLAGS, use @LIBRDF_LIBS@ for -L/-l libraries and
	@LIBRDF_INTERNAL_LIBS@ for libtool things.

	* Makefile.am: raptor subdirectory is now not always built

	* configure.ac: TIdy some configure --with/--enable messages
	Added RAPTOR_CONFIG program (default raptor-config)
	Added --with-raptor=system or internal.  By default will pick the best.
	Checks for minmum versions and warns if too old, but proceeds.
	raptor subdirectory is now not always built.

	* raptor/raptor-config.in: Oops, -lraptor with --libs

	* redland-config.in:
	Added --libtool-libs for compiling with librdf using libtool.

	* configure.ac:
	Added LIBRDF_LIBTOOLLIBS for compiling with librdf using libtool.

	* raptor/configure.ac:
	Added RAPTOR_LIBTOOL_LIBS for compiling with raptor using libtool.

	* raptor/raptor-config.in:
	Added exec_prefix to make --libs generate the right -L
	Added --libtool-libs for compiling with raptor using libtool.

2003-08-31  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.ac, raptor/configure.ac:
	dmalloc enabled only if dmalloc.h is present

	* raptor/tests/Makefile.am: Removed warn-01 re-added accidently.

	* raptor/tests/warn-00.out, raptor/tests/warn-00.rdf:
	Added rdf:bagID warning check

	* raptor/tests/Makefile.am:
	Added scanning tests and ex-52.svg/out for inside SVG

	* raptor/tests/ex-52.out, raptor/tests/ex-52.svg:
	Check scanning for rdf/xml in SVG

	* raptor/raptor_general.c (raptor_set_parser_strict):
	Scanning and assuming are never default
	on, must be enabled

	* raptor/TODO.html:
	The scanning for rdf:RDF works (--scan argument to rapper)

	* raptor/raptor_parse.c (raptor_xml_start_element_handler):
	Fix scanning for rdf:RDF.  Do
	parent->child processing if the grammar has a state set up,
	in this case it is expecting a list of node elements.

	* raptor/rdfdump.c: Set strict before setting other features

	* raptor/rdfdump.c: Use strict_mode

	* raptor/tests/warn-00.out, raptor/tests/warn-00.rdf,
	raptor/tests/warn-01.out, raptor/tests/warn-01.rdf,
	raptor/tests/warn-03.rdf: These are now errors not wrarnings

	* raptor/raptor_parse.c (raptor_xml_start_element_handler):
	 Non-namespaced elements are now
	an error.
	(raptor_process_property_attributes): Tidy non-namespaced element name.
	(raptor_start_element_grammar): Give errors if an attempt is made
	to proceed dealing with elements with no namespace for property or
	node elements - attributes are caught above.

	* raptor/tests/Makefile.am:
	Add bad-18.rdf, bad-19.rdf for non-namespaced elements

	* raptor/tests/bad-18.rdf, raptor/tests/bad-19.rdf:
	Test node/property elements without namespaces fail

	* raptor/raptor_internal.h:
	Add raptor_parser field 'magic' for libxml2 error/warning callback
	validation.  and declare RAPTOR_LIBXML_MAGIC to set use there

	* raptor/raptor_general.c (raptor_new_parser):
	Set RAPTOR_LIBXML_MAGIC field in structure for
	libxml2 error/warning callback validation.

	* raptor/ntriples_parse.c (raptor_ntriples_term):
	Check that the string/URI term was terminated
	before the end of the string.

	* raptor/tests/Makefile.am: Added bad-04.nt

	* raptor/tests/bad-04.nt: Test for non-terminated URI

	* raptor/raptor_libxml.c (raptor_libxml_warning,raptor_libxml_error):
	Validate the ctx pointer
	returned since sometimes it is a ctx, sometimes ctx->userData.  The
	latter is what is expected.

	* raptor/tests/Makefile.am:
	Oops, run bad ntriples tests in N-Triples mode

	* raptor/rapper.1: Added --version/-v

	* raptor/rdfdump.c: Tidied up option error handling, messages.
	Added --version/-v

	* librdf/rdf_storage.c:
	(librdf_storage_add_statement, librdf_storage_add_statements,
	librdf_storage_remove_statement,
	librdf_storage_context_add_statement,
	librdf_storage_context_remove_statement)
	For these optional methods that can change the store, return failure
	if the factory does not implement them.
	(librdf_storage_context_add_statements): Added either using the
	factory method or librdf_storage_context_add_statement if that
	is missing.
	(librdf_storage_context_remove_statements): Added either using the
	factory method or librdf_storage_context_remove_statement if that
	is missing.
	(librdf_storage_context_as_stream): Added, deprecating
	librdf_storage_context_serialise.

	* librdf/rdf_storage.h:
	Added new context_add_statements and context_remove_statements
	factory methods.  Note that those are optional and so are
	all other context methods or methods that change the store (could be
	read only)
	Added prototypes for librdf_storage_context_add_statements,
	librdf_storage_context_remove_statements.
	Added prototype for librdf_storage_context_as_stream, deprecating
	librdf_storage_context_serialise.

	* librdf/rdf_model_storage.c:
	(librdf_model_storage_context_add_statements) Added, calling
	librdf_storage_context_add_statements
	(librdf_model_context_remove_statements) Added, calling
	librdf_storage_context_remove_statements

	* librdf/rdf_model.c:
	(librdf_model_context_add_statements) Use factory method if
	present otherwise use existing code and
	librdf_model_context_add_statement method.
	(librdf_model_context_remove_statements) Use factory method if
	present otherwise use existing code and
	librdf_model_context_remove_statement method.

	* librdf/rdf_model.h: model_factory - note sync is optional.
	Add context_add_statements and context_remove_statements, both
	optional that librdf_model will implement using the singular forms if
	they are missing.

	* librdf/rdf_node.c (librdf_node_equal): Remove unused var

2003-08-30  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_stream.c (librdf_stream_update_current_element):
	Do not do excessive work -
	only do a lower level check is_updated is false.
	(librdf_stream_next): Reset is_updated after an
	stream->next_method is performed.
	(librdf_stream_get_object): Do less work, just return
	librdf_stream_update_current_element, always the current element or
	NULL at the end.

	* librdf/rdf_iterator.c (librdf_iterator_update_current_element):
	Do not do excessive work -
	only do a lower level check is_updated is false.
	(librdf_iterator_next): Reset is_updated after an
	iterator->next_method is performed.
	(librdf_iterator_get_object): Do less work, just return
	librdf_iterator_update_current_element, always the current element or
	NULL at the end.

	* librdf/rdf_stream.h, librdf/rdf_iterator.h: Add is_updated flag

	* librdf/rdf_node.c (librdf_node_equals): Actually use interned nodes.

	* librdf/rdf_uri.c (librdf_uri_equals): Actually use interned URIs.

	* librdf/rdf_model.c (Main):
	In test code, use librdf_parser_parse_string_as_stream rather
	than write files, delete them.

	* librdf/rdf_node.c:
	Updates to share all librdf_node objects like for librdf_uri - usage
	counts and shared pointers.
	(librdf_init_node): Initialise the three hashes for resource,
	literal, blank nodes.
	(librdf_finish_node): Clean up the three hashes.
	(librdf_new_node_from_uri_string_or_uri): Internal helper
	function to do all resource node creation.  Does the
	minimum of uri_string to/from uris objects conversion.
	If the resource node isn't in the resource hash (H_RESOURCE), add it
	otherwise just bump the usage count.
	(librdf_new_node_from_uri_string, librdf_new_node_from_uri,
	librdf_new_node_from_uri_local_name,
	librdf_new_node_from_normalised_uri_string): Use
	librdf_new_node_from_uri_string_or_uri.
	(librdf_new_node_from_typed_literal): If the librdf_node_encode-ed
	buffer of the literal node isn't in the literal hash (H_LITERAL),
	add it, otherwise just bump the usage count.
	(librdf_new_node_from_blank_identifier): If the identifier string
	isn't in the blank hash (H_BLANK), add it, otherwise just bump the
	usage count.
	(librdf_new_node_from_node): Now 1 line.
	(librdf_free_node): Decrement usage and then free and remove from the
	appropriate hashes if the usage was 0.
	(librdf_node_get_li_ordinal): Get the ordinal from the URI string
	since it isn't/wasn't ever stored.

	* librdf/rdf_node.h:
	librdf_node - add usage count. Remove ordinal union part, never used.
	Add key & size to literal part.

	* librdf/rdf_statement.c, librdf/rdf_query.c,
	librdf/rdf_concepts.c (main): Call librdf_init_node and
	librdf_finish_node in the test code.

	* librdf/rdf_init.h:
	Added node mutext (when threading) and node hashes to world structure.

	* librdf/rdf_init.c (librdf_world_open): Call librdf_init_uri.
	(librdf_world_set_uris_hash): Deleted
	(librdf_init_world): Don't use arg2.

	* librdf/rdf_uri.c (librdf_new_uri): Fail if uri_string is NULL.
	Tidy up cleanup and thread un-/locking.
	(librdf_new_uri_from_uri): Actually use the interning of URIs.
	(librdf_new_uri_from_uri_local_name): Fail if URI is NULL.
	Tidy up cleanup and thread un-/locking.
	(librdf_new_uri_normalised_to_base, librdf_new_uri_relative_to_base):
	Fail if URI is NULL.

	* raptor/configure.ac, configure.ac:
	Added --with-dmalloc option default auto for maintainer, no otherwise.

2003-08-29  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/Redland/Parser.pm:
	Use raptor in the example. Add a mime type example.

	* demos/demo.pl: s/statement/triple/ in html

	* demos/demo.pl: Update parser labels.
	Add owl namespace.
	Trim rdf content whitespace.
	Become read only if db is not writable to this user.

	* docs/Makefile.am: Added .pod.html rule

2003-08-28  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/fix-python-xhtml:
	Remove remaining broken fragments, example urls

	* docs/fix-python-xhtml: Exclude __builtin__ class from links

	* Released RPMs version 0.9.13-3 (patch redland-0.9.13-perl2.patch)

	* librdf/redland.spec.in:
	(0.9.13-2, 0.9.13-3) patches added to fix broken perl UNIVERSAL::isa

	* perl/lib/RDF/Redland/URI.pm, perl/lib/RDF/Redland/Node.pm:
	Use URI::URL in the isa

	* Released RPMs version 0.9.13-2 (patch redland-0.9.13-perl1.patch)

	* perl/lib/RDF/Redland/URI.pm, perl/lib/RDF/Redland/Node.pm:
	Fix totally broken use of UNIVERSAL::isa

	* perl/lib/RDF/Redland/URI.pm (new):
	Fix arg promotion from URI objects.

	* perl/lib/RDF/Redland/URI.pm (new): Fix cloning.

	* configure.ac: Bumped version to 0.9.14

	* NEWS.html: typo

	* Snapshotted redland_0_9_13 for 0.9.13 release

	* NEWS.html: Remove comments for 0.9.13. release notes

	* RELEASE.html: 0.9.13 updates - threads ack, Python unit
	tests,blank nodes, configuration, model *_as_stream.

	* docs/redland.pod: Note out of dateness

	* docs/redland.pod, librdf/rdf_serializer_rdfxml.c,
	librdf/rdf_serializer_raptor.c, utils/db_upgrade.c,
	tcl/example.tcl, ruby/example.rb: Use librdf_model_as_stream

	* java/org/librdf/redland/Model.java (as_stream):
	Added - use Use librdf_model_as_stream or with a context
	node, use librdf_model_context_as_stream

	* python/RDF.py (Model.as_stream): Use librdf_model_context_as_stream

	* perl/lib/RDF/Redland/Model.pm:
	Fix uses of RDF::Redland::Node::_ensure($node) to use it as a redland
	node.
	(as_stream): Take optional context node, promote as necessary,
	using librdf_model_context_as_stream. Add documentation.

	* Redland.i: Added librdf_model_context_as_stream

	* librdf/rdf_model.c, librdf/rdf_model.h:
	Added librdf_model_context_as_stream, deprecating
	librdf_model_context_serialize as confusing with the
	librdf_serializer class and mixing US/UK spelling.

	* perl/serialize.pl, demos/demo.pl, perl/example.pl: Use as_stream

	* perl/lib/RDF/Redland/Model.pm (as_stream):
	Added, deprecating serialise and serialise.

	* librdf/rdf_model.c:
	Added librdf_model_as_stream, deprecating librdf_model_serialise
	as confusing with the librdf_serializer class.

	* librdf/rdf_model.h, Redland.i: Added librdf_model_as_stream

	* tcl/Makefile.am: TCL_INCLUDES

	* php/php.ini: load shared library from .

	* php/Makefile.am:
	Remove libtool again.  Try "if OSX, else rest of world" approach.

	* docs/tcl.html: Update to note 8.4 not working.

	* configure.ac:
	TCL_INCLUDE now TCL_INCLUDES and blank if not found, otherwise -Idir

	* tcl/Makefile.am:
	Remove libtool again.  Try "if OSX, else rest of world" approach.

	* configure.ac: default TCL_INCLUDE to /usr/include

	* ruby/Makefile.am: minor depends

	* ruby/Makefile.am:
	Remove libtool again.  Try "if OSX, else rest of world" approach.
	Package now 'redland' to match ruby convention.

	* ruby/example.rb: Now redland

	* tcl/Makefile.am: Don't -I-I@TCL_INCLUDE@

	* configure.ac:
	tcl version tweak -nonewline since OSX does silly things

	* docs/tcl.html: Note --with-tcl-include

	* tcl/Makefile.am: Removed README

	* tcl/README: Moved into ../docs/tcl.html

	* tcl/Makefile.am:
	Use @TCL_VERSION@ for the library name and -I@TCL_INCLUDE@

	* configure.ac:
	--with-perl/python/java/tcl/php/ruby now either enable the language
	or enable and set the binary.  Always try to find the version of
	the language before building the API automatically.
	Hunt for Tcl tcl.h and Java JDK JNI headers in various places.
	Report the languages available and language APIs built.

	* php/Makefile.am: comments.
	testing is optional, php program might not exist

	* php/Makefile.am:
	Very complex build and install using a libfake.la so I don't have to
	care about details of building shared object and dynamically loaded
	libraries.  No OSX specific fixes here since I can't see what
	the convention is.

	* tcl/Makefile.am: Be verbose in pkgIndex.tcl

	* ruby/Makefile.am: docs

	* tcl/Makefile.am: No -module here

2003-08-27  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* tcl/Makefile.am:
	Very complex build and install using a libfake.la so I don't have to
	care about details of building shared object and dynamically loaded
	libraries (such as on OSX).  The OSX specific naming is burnt in here
	since the dynamically loaded library must be called Redland.dylib

	* ruby/Makefile.am:
	Very complex build and install using a libfake.la so I don't have to
	care about details of building shared object and modules (such
	as on OSX).  OSX specific naming have to be burnt in here since
	shared modules must be called Redland.bundle

	* ruby/Makefile.am, tcl/Makefile.am:
	Make build and installing work again, without libtool.

	* tcl/README: Update Tcl building info

	* tcl/test.tcl: Back to auto_path .

	* configure.ac: BDB check update again.
	Report discovered BDB version in summary

	* configure.ac: Use bdbc_ for temporary variables in BDB checking code.

	* perl/Makefile.PL: Revert to working version.  No need for
	builddir/srcdir things.

	* perl/Makefile.am: Revert: Remove inplace editing of PERL_MAKEFILE

	* configure.ac: Another major BDB hunt and validate.  This time
	check for db.h with version numbers.

	* perl/Makefile.PL: Set FULLEXT to RDF/Redland

	* perl/Makefile.am: Make sure PERL really uses the right FULLEXT,
	BASEEXT and BOOTSTRAP values

	* librdf/rdf_hash_bdb.c:
	Remove BDB_CLOSE/FD_2_ARGS ifdef sequence at start - now tested in
	configure.
	Rename to HAVE_BDB_CLOSE/FD_2_ARGS

	* configure.ac: bdb_dbname test was inverted

	* configure.ac: use "if test ...; then", not "if [ ... ]; then"

	* configure.ac: I give up.  Put OSX fink hints here - look for /sw/bin.
	Add more Sleepycat/Berkeley DB checks, more guesswork and hunting for
	BDB headers in /usr/include/db* subdirectories.

	* perl/Makefile.am: Use CFLAGS, not MEM.

	* perl/Makefile.PL: Use CFLAGS, not MEM.
	Use redland-src-config --libs not --static-libs

	* librdf/rdf_hash_bdb.c (librdf_hash_bdb_open):
	More BDB #ifdef mess for db->open 6 or 7
	arguments.

	* librdf/rdf_utf8.c, librdf/rdf_uri.c, librdf/rdf_stream.c,
	librdf/rdf_storage.c, librdf/rdf_statement.c,
	librdf/rdf_serializer.c, librdf/rdf_query.c, librdf/rdf_parser.c,
	librdf/rdf_node.c, librdf/rdf_model.c, librdf/rdf_iterator.c,
	librdf/rdf_heuristics.c, librdf/rdf_hash.c, librdf/rdf_files.c,
	librdf/rdf_digest.c, librdf/rdf_concepts.c:
	When running a standalone test which has a STANDALONE #define set
	then do not compile the code from the module, but use the code in the
	linked librdf - all the tests link with this.  This prevents
	complaints about dual symbols from the OSX linker, and crashes with
	statics that store the pointers to factories (models, storages,
	parsers).

2003-08-26  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.ac: Added AC_HEADER_TIME and checks for time.h, sys/time.h
	for gettimeofday

	* librdf/rdf_parser_raptor.c
	(librdf_parser_raptor_generate_id_handler): Added to use
	librdf_world_get_genid to get a unique genid if the user does not
	provide one.
	(librdf_parser_raptor_parse_file_as_stream,
	librdf_parser_raptor_parse_as_stream_common,
	librdf_parser_raptor_parse_into_model_common): Use
	librdf_parser_raptor_generate_id_handler to generate IDs.

	* librdf/rdf_node.c (librdf_new_node_from_blank_identifier):
	If a NULL identifier
	is passed in, use librdf_world_get_genid to get a unique genid.

	* librdf/rdf_init.c:
	Added a slew of time related headers for gettimeofday
	(librdf_new_world): Get the startup time to init world genid_base.
	Set genid_counter to 1.
	(librdf_world_set_feature): Support
	LIBRDF_WORLD_FEATURE_GENID_BASE, LIBRDF_WORLD_FEATURE_GENID_COUNTER
	both integers.
	(librdf_world_get_genid): Added to return a new
	genid of the form "r"+base+"r"+(counter++)

	* librdf/rdf_init.h: World gains genid_base and genid_counter.
	New world features LIBRDF_WORLD_FEATURE_GENID_BASE,
	LIBRDF_WORLD_FEATURE_GENID_COUNTER
	New internal librdf_world_get_genid

	* docs/fix-python-xhtml: +email

	* docs/fix-python-xhtml: -email

	* docs/fix-python-xhtml: words

	* docs/fix-python-xhtml: New pydoc, new bad use of ID.
	Skip the huge #commented heading in the source.

	* examples/example2.c:
	Updated to a slightly more useful example - parsing from
	string content and adding/checking/removing a statement.

	* python/redlandtest.py (testIterateModel, testContains): Added.

	* librdf/rdf_storage.c: Revert, remove contexts check here.

	* librdf/rdf_storage_list.c (librdf_storage_list_contains_statement):
	Handle contains with
	contexts using librdf_storage_list_find_statements.

	* librdf/rdf_storage_hashes.c
	(librdf_storage_hashes_contains_statement): Handle contains with
	contexts using librdf_storage_hashes_find_statements.

	* librdf/rdf_parser_raptor.c: removed unused variable

	* librdf/rdf_storage.c (librdf_storage_hashes_contains_statement):
	Revert fix.

	* librdf/rdf_storage_hashes.c
	(librdf_storage_hashes_contains_statement): Move the fix for
	stores with contexts into librdf_storage_contains_statement

	* librdf/rdf_storage_list.c
	(librdf_storage_list_contains_statement): Build a
	librdf_storage_list_node to use to run librdf_list_contains.

	* librdf/rdf_storage.h:
	Added index_contexts flag to librdf_storage_factory_s.

	* RELEASE.html: More for 0.9.13

	* python/RDF.py (Model.__iter__): Fix to return an iter

	* RELEASE.html:
	Updates to explain perl and python api changes to 0.9.13

	* python/setup.py:
	Remove MEM, MEM_LIBS code - rely on CFLAGS and LDFLAGS being passed in.
	Move version code to top.

	* python/Makefile.am: Pass on CFLAGS and LDFLAGS to python setup.py

	* python/example.py: empty statement

	* python/RDF.py: words in copyright

	* python/test/test.py, python/example.py:
	Updated to use 0.9 api features

	* ruby/Makefile.am: test-ruby fix shared dir

	* ruby/Makefile.am: LIBRUBYARG works 1.6-1.8

	* python/redlandtest.py:
	Update by Edd Dumbill to test the 0.9 RDF.py changes.

	* python/RDF.py:
	Major update to use Python 2.2+ idioms and features by Edd Dumbill.

	General remarks

	  * Removed string exceptions and replaced with RedlandError ones

	  * Where underlying Redland C objects were unexpectedly null, raise
	    exceptions rather than returning None, "" or [] as appropriate.

	  * Raise exceptions if Redland C constructors fail in Python
	    constructors.

	  * Did quite a lot of documentation updating, where possible
	    demonstrating preferred Pythonic usages.

	  * Added more unit tests to test changed functionality.

	RDF.Node

	  * Constructor now accepts Uri to make a resource/property node, or
	    a string to make a string literal

	  * Removed usage of node_type() in favour of is_resource(), is_blank()
	    etc methods.

	  * DEPRECATED get_blank_identifier() etc methods in favour of
	    node.blank_identifier etc properties.  Raise exception if properties
	    inconsistent with the node type are requested.

	RDF.Statement

	  * No need to name subject, predicate, object in constructor any more.
	    Uris or string literals accepted in place of nodes in constructor
	    argument.

	  * __getattr__ method deleted, using new-style property() for
	    subject, predicate, object

	RDF.Model

	  * Deleted get_*_iterator methods

	  * Renamed sources() to get_sources(), targets() to get_targets(),
	    arcs() to get_predicates().  Retained old method names as aliases.

	  * Added get_sources_context(), get_targets_context(),
	    get_predicates_context() which return (node, context) tuples.

	  * Amended get_source(), get_sources() etc methods so that Uri and
	    string literals were acceptable as shortcut types for nodes.

	  * Added find_statements_context() which returns (statement, context)
	    tuples.

	  * Renamed context_remove_statements() to
	    remove_statements_with_context(). Retained old method name as an
	    alias.

	  * Added __delitem__ method so del[statement] and del[statement,
	    context] work.

	  * Added append() method so append(statement) and append(statement,
	    context) work.  Suggest that append() is used in preference to
	    add_statement() for Python idiomatic usage.

	  * DEPRECATED serialise() in favour of as_stream().

	  * Added as_stream_context() to serialise (statement, context) tuples.

	  * Exception raised if len() is attempted on model with a non-countable
	    storage.

	  * DEPRECATED Model.add(), Model.add_typed_literal_statement() usages:
	    now that constructing Statements is easier, it's incongruous to have
	    these in the model.  Additionally it saves reproducing various bits
	    of error checking that properly belong in the Node() constructor.

	  * Implemented __contains__() so "if statement in model" and
	    "if (statement, context) in model" work as expected using the more
	    efficient Redland C methods where possible.

	RDF.Stream

	  * DEPRECATED Stream.context_iter().  Use in preference the _context
	    variants of the appropriate Model methods.  This leads to fewer
	    lines of code.

	RDF.Uri

	  * Amended constructor so strings or Uri instances can be passed as
	    the first argument, without named parameters being required, and
	    the right thing still happen.

	----
	I did some indenting and white space editing for consistency
	with the existing code.

	* TODO.html: model.parse* and model.serialize

	* librdf/rdf_list.c (librdf_list_iterator_get_method): Oops

	* librdf/rdf_hash.c (librdf_hash_get_all_iterator_get_method): oops

	* java/Makefile.am:
	Use check-local again, since we don't actually make programs called
	test1 and test2.

	* Redland.i: Add prototypes for static, internal methods

	* python/Makefile.am: Pass in CFLAGS to python

	* librdf/rdf_hash.c (librdf_hash_get_all_iterator_get_method): Give
	an error for an unknown method and return NULL.

	* librdf/rdf_list.c (librdf_list_iterator_get_method):
	Check method is get_object
	and return an error if it isn't.

	* librdf/rdf_storage.c
	(librdf_storage_stream_to_node_iterator_get_method): Provide
	iterator get_context method as well as get_object, using the
	internal stream.

	* ruby/Makefile.am: Made an rubylib make definition

	* tcl/Makefile.am: Made an tcllib make definition

	* tcl/Makefile.am:
	Interrogate tclsh for versions, and then guess include paths and
	library name.

	* tcl/test.tcl, tcl/example.tcl: Back to redland

	* tcl/test.tcl, tcl/example.tcl: Tcl package now Redland

	* configure.ac: Look for tclsh for TCL

	* ruby/Makefile.am: More libtool flags

	* ruby/Makefile.am: Build shared objects again.

	* ruby/Makefile.am: Don't depend on build-ruby

	* librdf/rdf_storage_hashes.c
	(librdf_storage_hashes_contains_statement): Use
	librdf_storage_hashes_find_statements to make this work when
	contexts are being used.

	* librdf/rdf_node.c (librdf_node_equals): Doc fix

	* librdf/rdf_storage_list.c (librdf_storage_list_node_equals):
	When not using contexts, don't
	check the context nodes.

	* Redland.i (librdf_call_python_message, librdf_call_perl_message):
	Fix use of
	vsnprintf in perl and python message callbacks to properly copy
	va_list using va_copy.  Same bug that happened in raptor.

2003-08-25  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* java/Makefile.am: Added test-java again

	* tcl/Makefile.am: Added test-tcl again

	* ruby/Makefile.am: Added test-ruby again

	* RELEASE.html, NEWS.html, TODO.html: Updated for 0.9.13

	* docs/python.html: More updates

	* docs/java.html:
	Updates for new install method, more java intricacies.

	* docs/ruby.html, docs/php.html, docs/perl.html, docs/tcl.html:
	Updates for new install method.

	* python/example.py: Modernise the python to 2.2+

	* python/RDF.py: Throughout:
	Updated to use new Python classes (2.2+)
	Replace __getattr__/__setattr__ with property() method.

	* python/Makefile.am: check-local now also does unittest-python

	* raptor/configure.ac: Bumped version to 0.9.13

	* raptor/NEWS.html: words

	* raptor/NEWS.html: Updated for 0.9.12

	* raptor/README.html: HTML

	* raptor/raptor_parse.c (raptor_start_element_grammar):
	With rdf:datatype, do not lose the
	URI string pointer.  For rdf:ID, do not allocate the URI twice.

	* raptor/raptor_parse.c (raptor_generate_statement):
	Do not set language when a datatype is given.

	* raptor/raptor_xml_writer.c (raptor_new_xml_writer):
	Initialise writer buffer to an empty string
	to start (i.e. just \0).
	(raptor_xml_writer_start_element): Now assume buffer is always
	present, remove empty buffer case.
	(raptor_xml_writer_end_element,raptor_xml_writer_cdata): Handle 0
	length case, no strncpy.

	* raptor/tests/Makefile.am: Added ex-51.
	Fix daml+oil test.

	* raptor/tests/ex-51.out, raptor/tests/ex-51.rdf:
	Check empty XML literal works

	* raptor/tests/ex-41.out: No language for datatyped literals.

	* raptor/tests/daml-oil.rdf, raptor/tests/daml-oil.out,
	raptor/tests/Makefile.am: Updated to DAML+OIL schema 2001-03 as
	defined in http://www.daml.org/2001/03/daml+oil-index.html

	* raptor/tests/daml-oil.out, raptor/tests/daml-oil.rdf: Added
	2000-11-30 http://www.cs.man.ac.uk/%7Ehorrocks/DAML-OIL/daml-oil.rdf

	* raptor/tests/owl-schema.rdf, raptor/tests/owl-schema.out:
	Updated OWL schema http://www.w3.org/2002/07/owl to match
	that given in OWL Reference 2003-08-18 CR
	at http://www.w3.org/TR/2003/CR-owl-ref-20030818/#appB

	* raptor/libraptor.3: Updated for 0.9.12

	* python/RDF.py (Statement._get_subject):
	Missed accidently when updating to do more copies.

	* configure.ac: No languages by default.

2003-08-24  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/Makefile.PL: Include -I builddir librdf dir to get rdf_config.h

	* Makefile.am: make languages after core libs

	* perl/Makefile.PL: More attempts at src/builddir fix.

	* perl/Makefile.am: Fix src/builddir for output of MakeMaker

	* tcl/Makefile.am: again

	* tcl/Makefile.am: oops, -c to compile

	* ruby/Makefile.am:
	This dir is now compiled and installed conditional on ruby being
	enabled with --with-ruby (off by default).
	Move -local targets into standard 'make' and 'make install' ones.
	Try to compile with the right Ruby shared library and install in
	the Ruby libs dir.

	* tcl/Makefile.am: Use @TCL@

	* tcl/Makefile.am:
	This dir is now compiled and installed conditional on tcl being
	enabled with --with-tcl (off by default).
	Move -local targets into standard 'make' and 'make install' ones.
	Try to compile the Tcl shared library and install in the Tcl
	libs dir.  Finding the tcl.h includes is impossible, so note
	that in the README.

	* tcl/README: Tcl building issues

	* php/Makefile.am: php installs now

	* configure.ac:
	In checking for progs, hunt for perl, python etc. rather than  names.
	Added --with-perl/python/java/php/tcl/ruby with optional
	argument =PATH to set the script.  This enables the particular
	language to be built.  Present defaults are perl and python are
	enabled.
	Move --with-ecma-cli to be nearby and accept 'no' also.
	Moved --with-jdk to be nearby.
	The subdirectories called with standard 'make' and 'make install'
	now are based on languages.
	Report the languages configured in the build summary.

	* python/Makefile.am:
	This dir is now compiled and installed conditional on python being
	enabled with --with-python (by default).
	Move -local targets into standard 'make' and 'make install' ones
	and create a fake build and install to keep automake happy, since
	we are using python's Distutils to do the real work.

	* perl/Makefile.am:
	This dir is now compiled and installed conditional on perl being
	enabled with --with-perl (by default).
	Move -local targets into standard 'make' and 'make install' ones
	and create a fake build and install to keep automake happy, since
	we are using perl's MakeMaker to do the real work.

	* java/Makefile.am:
	This dir is now compiled and installed conditional on java being
	enabled with --with-java, so move -local targets into standard
	'make' and 'make install' ones.
	Install both the shared library and jar.

	* java/Makefile.am: core_wrap.c without makefile variables

	* java/Makefile.am:
	EXTRA_LTLIBRARIES is broke - it won't build shared libraries.  So
	fake it using lib_LTLIBRARIES and then override the installation for
	install-javalibLTLIBRARIES: to do nothing.

	* java/Makefile.am:
	Shared library now librdf-java and built using libtool.

	* java/org/librdf/redland/World.java, java/redland-fragment.java:
	Now rdf-java (aka librdf-java under unixen)

	* librdf/rdf_init.c: Now 2003

2003-08-23  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* java/org/librdf/redland/Node.java:
	(constructors) Update to always copy rather than deal with shared
	nodes.
	(isResource, isLiteral, isBlank): Added.

	* java/org/librdf/redland/Statement.java:
	(constructors, getSubject, getPredicate, getObject) Update node and
	statements to always copy rather than deal with shared.

	* java/org/librdf/redland/Stream.java:
	Returning copied statements is default.

	* java/org/librdf/redland/Iterator.java:
	Returning copied nodes is default.

	* configure.ac: For --with-jdk, hunt for the machine-dependent subdir

	* java/Makefile.am: Use JDK_INCLUDES

	* java/org/librdf/redland/Parser.java:
	(parse) Added methods parsing content ina  string into a model
	or as a stream of statements.

	* java/org/librdf/redland/Model.java: sync has no return

	* configure.ac: Added --with-jdk to specify where Java lives

	* INSTALL.html: Update a little; no sirpac

	* java/org/librdf/redland/Model.java,
	perl/lib/RDF/Redland/Model.pm (sync): Added calling
	librdf_model_sync

	* Redland.i: Added librdf_model_sync

	* librdf/rdf_model_storage.c (librdf_model_storage_sync):
	Added, invoking librdf_storage_sync

	* librdf/rdf_model.c (librdf_model_sync):
	Added, invoking it in the implementation via new
	factory method sync.

	* librdf/rdf_model.h: Added librdf_model_sync and factory method.

	* librdf/rdf_storage_hashes.c (librdf_storage_hashes_sync):
	Added, implementing sync method.

	* librdf/rdf_storage.c: Added librdf_storage_sync

	* librdf/rdf_storage.h: Added librdf_storage_sync and factory method.

	* python/Makefile.am, perl/Makefile.am: clean more

	* perl/serialize.pl: Updated API tweaks

	* perl/lib/RDF/Redland/Node.pm (new_from_literal):
	Ensure is_wf_xml is an integer.

	* perl/lib/RDF/Redland/Model.pm (remote_statement):
	Allow NODE NODE NODE [CONTEXT] args

	* perl/lib/RDF/Redland/Statement.pm (new):
	Promote node arguments to redland nodes using
	RDF::Redland::Node::_ensure.

	* perl/lib/RDF/Redland/Node.pm (_ensure):
	Added, to promote other objects to redland nodes

	* perl/lib/RDF/Redland/Model.pm (add): Now call add_statements.
	(add_statements,remove_statement,add_statements,remove_statements,
	remove_context_statements): Promote node arguments to redland nodes
	using RDF::Redland::Node::_ensure.

	* perl/lib/RDF/Redland/Statement.pm (new_from_nodes):
	Fix call to constructor

	* perl/example.pl:
	Test add_statement(NODE, NODE, NODE) form - with same NODE

	* perl/lib/RDF/Redland/Model.pm (add_statement):
	Accept NODE NODE NODE [CONTEXT] as arguments too.

2003-08-22  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Redland.i: typo

	* perl/lib/RDF/Redland/Parser.pm:
	(parse_string_as_stream, parse_string_into_model):
	Added for parsing strings.  Note that the base_uri is required.

	* python/RDF.py:
	(Parser.parse_string_as_stream, Parser.parse_string_into_model):
	Note base_uri is required in docs, raise an error if it isn't there.

	* python/RDF.py:
	(Parser.parse_string_as_stream, Parser.parse_string_into_model):
	Added.

	* librdf/rdf_parser_raptor.c
	(librdf_parser_raptor_parse_as_stream_common,
	(librdf_parser_raptor_parse_uri_into_model_common): Ensure
	source_uri is set up correctly.  Refuse to work without a
	base_uri.

	* python/test/test.py: Added test with parser.parse_string_as_stream

	* librdf/redland.spec.in: try to get perl install working again

	* Redland.i: Added librdf_parser_parse_string_as_stream,
	librdf_parser_parse_string_into_model 

	* librdf/rdf_parser_raptor.c: Added new methods for implementing
	librdf_parser_parse_string_as_stream,
	librdf_parser_parse_string_into_model
	(librdf_parser_raptor_parse_as_stream_common): New, core
	work for both string and uri parsing into a stream.
	(librdf_parser_raptor_parse_uri_into_model_common): New, core
	work for both string and uri parsing into a model.

	* librdf/rdf_parser.h (librdf_parser_parse_string_as_stream,
	librdf_parser_parse_string_into_model): Added

	* librdf/rdf_parser.c (librdf_parser_parse_string_as_stream,
	librdf_parser_parse_string_into_model): Added

2003-08-21  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/NEWS.html: Updates for 0.9.12

	* raptor/TODO.html: URI#frag used as URI in retrievals now

	* raptor/Makefile.am: Remove -static from test links

	* raptor/raptor_uri.c (main):
	Test xmlbase and retrievable URI tranforms.

	* raptor/raptor_uri.c (raptor_uri_resolve_uri_reference):
	Handle #s relative to a uri-reference with a #fragment.

	* raptor/raptor_www.c:
	(raptor_www_fetch) Use raptor_new_uri_for_retrieval to ensure
	that the URI-reference fragments are removed, and the URI path exists.

	* raptor/raptor.h: Added raptor_new_uri_for_retrieval

	* raptor/raptor_uri.c (raptor_new_uri_for_retrieval):
	Added, strips fragments and ensures / path is present.

	* raptor/INSTALL.html: Builds on Alpha Linux 2.2

	* raptor/raptor_xml_writer.c (raptor_xml_writer_start_element,
	raptor_xml_writer_end_element): Use size_t for lengths.

	* raptor/raptor_xml_writer.c (raptor_xml_writer_start_element):
	Set content_element_seen in parent
	only if there is a parent.
	(raptor_xml_writer_end_element): Change current_element to parent
	only if there is a current element.

	* raptor/INSTALL.html: Updates

	* raptor/TODO.html: NFC checks

	* raptor/tests/Makefile.am:
	Pull out may-fail NFC checks into a separate set and don't exit 1
	if they do fail.  Failure is possible since it requires GNOME glib2
	which isn't always available.

	* librdf/redland.spec.in: Fix perl CORE dir

	* librdf/redland.spec.in: Removed duplicate perl CORE shared objects

	* librdf/redland.spec.in: Added redland-db-upgrade.1 to devel

2003-08-20  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/Makefile.PL:
	Use .. for redland-src-config and add check it is there.

	* python/setup.py:
	Use .. for redland-src-config and add an os.access check for it

	* redland-src-config.in: test ! -r

	* redland-src-config.in: Stop if cannot find raptor-src-config

	* python/setup.py: append define_macros only on match.

	* python/setup.py: Oh yes it is.

	* python/setup.py: redland-src-config is not in top_srcdir

	* python/redlandtest.py, python/setup.py, python/example.py:
	Set #! to /usr/bin/python

	* python/RDF.py:
	Update classes to always return copies of Nodes, Statements
	from streams, iterators such as model.find_statements.
	The user should now not need care about shared versus copying
	of returned values but just use them.

	* python/setup.py, python/Makefile.am:
	Pass MEM, MEM_LIBS to python compiling C

	* perl/lib/RDF/Redland/Statement.pm:
	(subject,predicate,object) Copy redland node for librdf set methods.

	* perl/lib/RDF/Redland/Node.pm: POD fixes

	* perl/example.pl: Minor updates to use newer API calls.

	* perl/lib/RDF/Redland/Statement.pm:
	(subject,predicate,object) Docs - note no copying neeeded.
	(predicate): Minor typo

	* perl/lib/RDF/Redland/RSS.pm (Model.DESTROY): Call super to tidy up
	(Node.new): Debugging
	(Node.DESTROY): Call super to tidy up
	(properties): Do less work, no need to copy.

	* perl/lib/RDF/Redland/Node.pm (new): Invoke clone properly.

	* perl/lib/RDF/Redland/URI.pm (new):
	Constructor now copies as well as building URIs.  Takes
	string literals or URIs by sniffing for classes.
	(new_from_uri): Replaced by new
	(clone): Another way to copy a URI.
	Document these changes

	* perl/lib/RDF/Redland/Iterator.pm:
	Update for Node API change and no need to copy here
	(current, context): Do not copy returned node.

	* perl/lib/RDF/Redland/Stream.pm:
	Update for Statement API change and no need to copy here
	(current, context): Do not copy returned statement.

	* perl/lib/RDF/Redland/Model.pm:
	Update for Node, Statement API changes and no need to copy here
	(sources,targets,arcs): Don't copy statements to new lists.

	* perl/lib/RDF/Redland/Statement.pm (new):
	Constructor now copies as well as building statements.  Takes
	string literals, URIs by sniffing for classes.
	(new_from_statement,new_from_nodes): Replaced by new.
	(clone): Another way to do new_from_statement
	(subject,predicate,object): Do less work, always return a copy.
	Document these changes

	* perl/lib/RDF/Redland/Node.pm (new):
	Constructor now builds resources, literals, URIs by sniffing
	for classes.
	(new_from_literal,new_from_typed_literal): Replaced with new_literal
	(new_xml_litearl): Added
	(new_from_node): Replaced with clone
	Document these changes

	* perl/rss-dump.pl:
	Comment out (working) code that lets perl do the URI retrieval,
	assume raptor has that.
	Slight updates for changed perl API.

	* librdf/rdf_node.c (main):
	Test: Revert accidently removed librdf_free_uri

	* perl/Makefile.am, perl/Makefile.PL:
	Pass on MEM to CFLAGS when building perl.

	* librdf/rdf_parser_raptor.c:
	Use LIBRDF_FREE for data returned from raptor.  This is OK
	as long as raptor is in the redland sources.  Otherwise it'll
	need to be SYSTEM_FREE.

	* librdf/rdf_hash_bdb.c:
	Use SYSTEM_FREE for data allocated by BDB via malloc()

	* librdf/rdf_init.c: Use SYSTEM_MALLOC/FREE for mutexes.
	(librdf_system_malloc, librdf_system_free): Added for dmalloc
	debugging.

	* librdf/librdf.h:
	Added SYSTEM_MALLOC and SYSTEM_FREE for routines that return
	genuine malloc() and free()ed memory - outside Redland typically.

	* raptor/raptor_general.c (raptor_check_ordinal):
	parentheses just for gcc

2003-08-19  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* python/setup.py: license now license apparently

	* utils/redland-db-upgrade.1: fix db names

	* utils/Makefile.am: Added redland-db-upgrade.1

	* utils/redland-db-upgrade.1: Manpage for redland-db-upgrade

	* librdf/rdf_node.c:
	Make nodes immutable - remove all node class set methods.
	(librdf_new_node_from_literal): Now just calls
	librdf_new_node_from_typed_literal.
	(librdf_new_node_from_typed_literal):
	librdf_new_node_set_typed_literal_value inlined here.
	(librdf_new_node_from_blank_identifier):
	librdf_set_blank_identifier inlined here.
	(librdf_new_node_from_node): Call the appropriate node constructors
	rather than malloc a new node and use the set methods.
	(librdf_node_set_uri, librdf_node_set_type,
	librdf_node_set_typed_literal_value, 
	librdf_node_set_blank_identifier): Deleted and inlined where used.
	(librdf_node_set_li_ordinal,librdf_node_set_literal_value): Deleted,
	never used in this module.
	(librdf_node_decode): Call the appropriate node constructors
	rather than malloc a new node and use the set methods.
	(main): Remove node set methods from test code.

	* librdf/rdf_node.h:
	Make nodes immutable - removed all public set methods into rdf_node.c

	* java/org/librdf/redland/Node.java:
	Make nodes immutable - remove set methods setURI, setType,
	setLiteralValue.

	* perl/lib/RDF/Redland/Node.pm:
	Make nodes immutable.  Remove set parts of methods uri,
	blank_identifier and type.  Remove method set_literal_value.

	* python/RDF.py (Class Node):
	Make nodes immutable - remove set methods.

	* Redland.i: Make nodes immutable - remove node class set methods.

	* Redland.i: comment out calling python exceptions for now

2003-08-17  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.ac: Remove MEM=-DLIBRDF_MEMORY_DEBUG if no dmalloc present.

	* librdf/rdf_uri.c, librdf/rdf_stream.c, librdf/rdf_storage.c,
	librdf/rdf_statement.c, librdf/rdf_serializer.c,
	librdf/rdf_query.c, librdf/rdf_parser.c, librdf/rdf_node.c,
	librdf/rdf_model.c, librdf/rdf_iterator.c,
	librdf/rdf_heuristics.c, librdf/rdf_hash.c, librdf/rdf_files.c,
	librdf/rdf_digest.c, librdf/rdf_concepts.c (main): In test code,
	remove calls to librdf_memory_report for old internal memory
	debugging code.

	* librdf/librdf.h:
	Remove LIBRDF_MEMORY_DEBUG and internal memory loss debugging code.
	External tools such as dmalloc work a lot better.

	* librdf/Makefile.am: Removed rdf_memory.c

	* librdf/rdf_memory.c: Memory debugging code superceeded by better
	external tools such as dmalloc

	* librdf/rdf_hash_bdb.c, configure.ac:
	Added BDB 4.0 and 4.1 open interface support - 6 or 7 arguments.

	* raptor/raptor_xml_writer.c:
	(raptor_xml_writer_end_element) Reset the current_element pointer
	on finishing.  Makes any succeeding cdata do the right thing.

	* librdf/redland.spec.in: Updates for new perl module names

	* raptor/rdfdump.c: Inside redland, don't call raptor_init/finish,
	it's done by redland's world.

2003-08-13  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_rss.c (raptor_rss_parse_chunk):
	Stop working aftera a user abort of the parser.

	* raptor/raptor_general.c (raptor_check_ordinal): c is not const

	* raptor/rdfdump.c, raptor/raptor_xml_writer.c,
	raptor/raptor_xml.c, raptor/raptor_www_libwww.c,
	raptor/raptor_utf8.c, raptor/raptor_uri.c, raptor/raptor_set.c,
	raptor/raptor_sax2.c, raptor/raptor_qname.c,
	raptor/raptor_parse.c, raptor/raptor_namespace.c,
	raptor/raptor_locator.c, raptor/raptor_libxml.c,
	raptor/raptor_identifier.c, raptor/raptor_general.c,
	raptor/ntriples_parse.c: Move dmalloc includes into
	raptor_internal.h and use everywhere.

	* raptor/raptor_internal.h:
	Add raptor dmalloc includes here to ensure all raptor code uses it
	or not consistently.

	* librdf/rdf_parser_raptor.c: (librdf_parser_raptor_error_handler,
	librdf_parser_raptor_warning_handler):
	Remove inadvisable use of raptor_parser as a variable name.
	(librdf_parser_raptor_parse_uri_into_model): Zap unused world.

	* librdf/rdf_hash.c (librdf_hash_from_array_of_strings):
	Fix return value.

	* raptor/TODO.html: +URI retrieval

	* examples/Makefile.am: Added redland_dbus

	* examples/redland_dbus.c: Initial import

2003-08-12  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_uri.c, librdf/rdf_stream.c,
	librdf/rdf_storage_list.c, librdf/rdf_storage_hashes.c,
	librdf/rdf_storage.c, librdf/rdf_statement.c,
	librdf/rdf_serializer_rdfxml.c, librdf/rdf_serializer.c,
	librdf/rdf_query.c, librdf/rdf_parser_raptor.c,
	librdf/rdf_parser.c, librdf/rdf_node.c, librdf/rdf_model.c,
	librdf/rdf_init.c, librdf/rdf_hash_memory.c,
	librdf/rdf_hash_bdb.c, librdf/rdf_hash.c, librdf/rdf_digest.c,
	librdf/rdf_concepts.c:
	Replaced most LIBRDF_FATAL1/2 calls with LIBRDF_ERROR1/2; both now
	take world arguments.  The remaining fatal errors are either in
	redland startup when there is no sensible way to recover or in out of
	memory situations.  The LIBRDF_ERROR1/2 calls now give the error and
	recover/fail the method if appropriate.  The documentation on several
	methods were updated to note this.  The error notification isn't
	always possible since some methods have way to return errors.
	A new method on the world class is needed to test for this state.

	* TODO.html: Updated for 0.9.13 so far

	* librdf/librdf.h:
	Added LIBRDF_ERROR1 and LIBRDF_ERROR2 that take world argument and call
	either librdf_error(world, ...) or #ifdef LIBRDF_DEBUG,  abort()

	* librdf/rdf_parser_repat.c: Out of date, gone

	* librdf/rdf_stream.c, librdf/rdf_storage_list.c,
	librdf/rdf_storage.c, librdf/rdf_serializer_rdfxml.c,
	librdf/rdf_parser_repat.c, librdf/rdf_parser_raptor.c,
	librdf/rdf_node.c, librdf/rdf_hash_memory.c,
	librdf/rdf_hash_bdb.c, librdf/rdf_digest.c: Replace most abort()
	with calls to LIBRDF_FATAL2 which aborts but gives a message too.

	* librdf/rdf_init.c (librdf_world_get_feature,
	librdf_world_set_feature): Return failure
	rather than crash - not implemented or exposed in APIs yet.

	* TODO.html: RDFS updates

2003-08-11  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_model.c (main):
	Add test that librdf_model_add_statement fails on a partial statement.

	* librdf/rdf_model.c (librdf_model_size):
	Added warning that it might not return an answer.
	(librdf_model_add_statement, librdf_model_add,
	librdf_model_remove_statement, librdf_model_contains_statement,
	librdf_model_context_add_statement,
	librdf_model_context_remove_statement): Added check that the
	statement used is complete, using new librdf_statement_is_complete

	* librdf/rdf_statement.h: Added librdf_statement_is_complete

	* librdf/rdf_statement.c (librdf_statement_is_complete):
	Added to check that a statement has
	all the subject, predicate, object fields.

	* docs/php.html: Added some more other PHP API pointers

2003-08-08  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/Makefile.am: Added warn-03

	* raptor/tests/warn-03.rdf: Handle deleting of default namespaces

	* raptor/raptor_parse.c (raptor_xml_start_element_handler):
	Handle when a name has a
	namespace but that namespace has no URI such as xmlns="".  In
	that case, the element has non-namespaced parts too, so skip.

	* raptor/ntriples_parse.c (raptor_ntriples_parse_line):
	Casts so isspace calls get int args.

	* raptor/raptor_uri.c (raptor_uri_is_absolute):
	Cast so isalpha and isalnum get int args.

	* raptor/tests/Makefile.am: Addex ex-50

	* raptor/tests/ex-50.out, raptor/tests/ex-50.rdf:
	Check parseType with unknown value

	* raptor/raptor_parse.c (raptor_start_element_grammar):
	Handle parseType="Literal"
	without duplicating code.

	* raptor/raptor_parse.c (raptor_start_element_grammar):
	Handle parseType="...." which
	isn't any of the other known types identically to
	parseType="Literal".

	* raptor/raptor_general.c (raptor_check_ordinal):
	Return <0 on failure such as no legal
	characters at all.

	* raptor/raptor_internal.h: Added raptor_check_ordinal.

	* raptor/ntriples_parse.c (raptor_ntriples_generate_statement): Make
	RAPTOR_IDENTIFIER_TYPE_ORDINAL predicates for property URI strings
	that match the rdf:_<n> pattern with n a decimal integer>0.

	* raptor/raptor_parse.c:
	Use raptor_check_ordinal for checking <n> in rdf:_<n>

	* raptor/raptor_general.c (raptor_check_ordinal):
	Check the <n> in rdf:_<n>

	* raptor/raptor_general.c (raptor_vsnprintf):
	Non-portable use of va_list fixed by copying the
	arguments with va_copy before passing to vsnprintf calls.  The
	symptom was crashes on some architectures where this mattered, such
	as powerpc.

2003-08-07  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_parser_raptor.c: Track errors and warnings in parsing.
	(librdf_parser_raptor_error_handler(): Call raptor_parse_abort

	* librdf/rdf_statement.c (librdf_statement_decode_parts):
	Updated for new librdf_node_decode API

	* librdf/rdf_node.c (librdf_node_decode):
	Updated for new API - returns a new allocated node
	and sets the size pointer as a side effect.  This removes the only
	use of librdf_new_node outside the node class.
	(main): Updated the test code to match.

	* librdf/rdf_node.h (librdf_node_decode): Updated for new API

	* raptor/raptor_general.c (raptor_parse_uri_with_connection):
	Return failure status.

	* librdf/rdf_node.c (librdf_new_node): No args means make a blank node.
	(librdf_new_node_from_blank_identifier): Docs

	* python/RDF.py (Model.serialise):
	Add optional contexts arg, to serialise contexts
	as stream of statements.
	(NS): New class to cache handy nodes from a namespace URI

	* using.html: Updated raptor credits url for InferEd / RDF Gateway

2003-08-03  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/Makefile.am:
	Added bad N-Triples tests bad-0[0-3].nt and checks

	* raptor/tests/bad-00.nt, raptor/tests/bad-01.nt,
	raptor/tests/bad-02.nt, raptor/tests/bad-03.nt: Bad N-Triples

	* raptor/ntriples_parse.c: raptor_ntriples_term_class Added for:
	(raptor_ntriples_term_valid): Checking validity of a ntriples term -
	this could be inlined.
	(raptor_ntriples_string) Renamed to:
	(raptor_ntriples_term) Use raptor_ntriples_term_valid.
	(raptor_ntriples_parse_line): Add more checks that whitespec exists
	between ntriples terms.
	Error to have typed literals with languages.

	* perl/Makefile.PL: Remove -Dbool=int - this can only cause trouble

	* perl/lib/RDF/Redland/Node.pm:
	Added methods is_resource, is_literal, is_blank using
	librdf_node_is_resource, librdf_node_is_literal, librdf_node_is_blank

	* python/RDF.py: Removed NODE_TYPE_LI
	(Node) is_resource, is_literal, is_blank now use
	librdf_node_is_resource, librdf_node_is_literal, librdf_node_is_blank

	* Redland.i, librdf/rdf_node.h, librdf/rdf_node.c:
	Added librdf_node_is_resource, librdf_node_is_literal,
	librdf_node_is_blank

	* librdf/rdf_node.h, librdf/rdf_node.c:
	Delete LIBRDF_NODE_TYPE_LI - never used.  Reserve the allocated type 3.

	* raptor/tests/test.out, raptor/tests/test.nt:
	Updated to remove language from typed literals

	* raptor/raptor_general.c (raptor_print_statement_detailed):
	Fix datatype uri output <uri> not <uri<

2003-07-31  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/TODO.html:
	'make check' shouldn't fail on NFC checks that will never work.

	* raptor/raptor_general.c (raptor_parser_simple_error):
	Call raptor_parser_error_varargs, don't
	lose the arguments.

2003-07-30  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.ac: ECMA CLR=>ECMI CLI since it's not just the runtime.
	ECMA CLI= ECMA  Common  Language  Infrastructure.

	* configure.ac:
	No need for CSHARP_COMPILE, dotGNU compiler accepts same args as mcs.

2003-07-29  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.ac: Also substitute CSHARP_COMPILE for csharp

	* configure.ac:
	Added --with-ecma-clr for mono or dotgnu versions of toolchain.
	Sets CLRRUN and CSHARPCC for use in csharp dir

	* Makefile.am: Added csharp dir

	* raptor/configure.ac: Bumped version to 0.9.12

	* raptor/raptor_sax2.c: struct nsd: use size_t for length.

	* raptor/configure.ac:
	Ensure the libxml2 xmlReader API is new enough (2.5.0+) such as
	having xmlParserSeverities.

2003-07-28  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor.h:
	Update raptor_generate_id_handler to take user_bnodeid arg.

	* raptor/raptor_rss.c: Update calls of raptor_generate_id with
	user_bnodeid (NULL for existing calls)

	* raptor/raptor_parse.c:
	Update calls of raptor_generate_id with user_bnodeid (NULL for
	existing calls)
	Use it to wrap the rdf:nodeID values for subject and object cases.

	* raptor/raptor_internal.h:
	raptor_generate_id updated to add user_bnodeid

	* raptor/raptor_general.c (raptor_set_generate_id_handler):
	Document final argument
	user_bnodeid from the rdf:nodeID attribute value.
	(raptor_default_generate_id_handler): Add user_bnodeid, return it if
	present.
	(raptor_generate_id): Add user_bnodeid and pass on.

	* raptor/raptor_internal.h: Added raptor_xml_writer_comment

	* raptor/TODO.html: NFC checking done.
	Exclusive XML C14N done.

	* raptor/raptor_namespace.c (raptor_namespace_copy):
	Don't copy uri and then lose it.

	* raptor/raptor_xml_writer.c:
	Added current_element for tracking empty/not empty elements.
	(raptor_xml_writer_comment): Added, just concatenating the content
	via raptor_xml_writer_cdata.

	* raptor/raptor_parse.c (raptor_xml_comment_handler):
	Call raptor_xml_writer_comment inside
	parseType="Literal"

	* raptor/raptor_xml_writer.c: raptor_xml_writer gains stack depth.
	(raptor_free_xml_writer): Clear any content_cdata before finishing.
	(raptor_xml_writer_start_element)
	Add depth to raptor_format_sax2_element calls.  Increase it
	(raptor_xml_writer_start_element,raptor_xml_writer_end_element):
	Add depth to raptor_format_sax2_element calls.  Decrease it
	and raptor_namespaces_end_for_depth each time.

	* raptor/raptor_namespace.c:
	Moved  error_handler and error_data arguments around.
	(raptor_namespaces_start_namespace) Gets those as arguments
	(raptor_namespaces_start_namespace) Added, simpler version of _full
	(raptor_namespaces_start_namespace_full) Added, was the old interface
	but less error arguments.
	(raptor_namespaces_namespace_in_scope): Fix namespace URI comparison.
	(raptor_namespace_new) Looses error arguments.
	(raptor_namespace_copy) Added, copy to a new stack with a new depth.

	* raptor/raptor_sax2.c (raptor_format_sax2_element):
	Gain stack depth argument.
	Only use namespace declarations when there is a namespace stack
	present.
	copy namespaces to new stack when new ones are needed.

	* raptor/raptor_internal.h:
	Add error_handler and error_data to namespace_stack.
	raptor_namespaces_start_namespace gets those as arguments
	raptor_namespace_new looses them
	raptor_namespaces_start_namespace takes less args
	raptor_namespaces_start_namespace_full added
	raptor_namespace_copy added
	content_cdata_seen and content_element_seen back into sax2_element

	* raptor/raptor_parse.c:
	Moved content_cdata_seen and content_element_seen back into
	sax2_element.
	Update for new raptor_namespaces_start_namespace calling convention.

	* TODO.html: alias serialize methods?

	* raptor/raptor_xml_writer.c: Debug

	* raptor/raptor_namespace.c (raptor_namespaces_format):
	Fix missing counting : when present

	* raptor/tests/ex-11.rdf, raptor/tests/ex-11.out:
	Updated to declare the html namespace as default, expect it in the
	N-Triples output.

	* raptor/raptor_namespace.c (raptor_namespaces_namespace_in_scope):
	Added, checking if a given
	namespace is declared in scope.
	(raptor_namespaces_format): Added, returning a string to declare
	the given namespace.

	* raptor/raptor_xml_writer.c:
	(raptor_xml_writer_start_element,raptor_xml_writer_end_element):
	Updated for raptor_format_sax2_element new arguments

	* raptor/raptor_sax2.c (raptor_format_sax2_element):
	Add raptor_namespace_stack argument.
	Create xmlns declarations for elements not declared in the current
	stack state, using raptor_namespaces_format to create the string.

	* raptor/raptor_internal.h:
	Added prototypes for raptor_namespaces_namespace_in_scope,
	raptor_namespaces_format
	raptor_format_sax2_element now takes a raptor_namespace_stack

2003-07-27  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_internal.h:
	raptor_xml_writer prototypes take unsigned char*

	* raptor/raptor_parse.c:
	Move the code building parseType="Literal" strings to
	raptor_xml_writer class.
	(raptor_cdata_grammar): Added, just for symmetry mostly, with most
	code taken from raptor_xml_cdata_handler.

	* raptor/raptor_xml_writer.c:
	Move the code building parseType="Literal" strings to
	raptor_xml_writer class.

	* raptor/Makefile.am: Added raptor_xml_writer.c

	* raptor/raptor_xml_writer.c: Initial version

	* raptor/raptor_parse.c:
	Split content_cdata fields between sax2_element & (RDF/XML
	specific) element.
	raptor_element: Add xml_writer field.
	Various calls changed to use the new raptor_simple_message_handler
	for error handling implemented as raptor_parser_simple_error here.
	(raptor_xml_parser_simple_error_handler): Added, matching the
	raptor_simple_message_handler API and calling raptor_parser_error.
	(raptor_start_element_grammar): When parseType="Literal" appears,
	create a new raptor_xml_writer.
	(raptor_end_element_grammar): When parseType="Literal" ends, delete
	the raptor_xml_writer.

	* raptor/raptor_sax2.c (raptor_format_sax2_element):
	Use raptor_simple_message_handler.

	* raptor/raptor_general.c (raptor_start_parse):
	Use raptor_parser_simple_error with raptor_namespaces_init.
	(raptor_parser_simple_error): Added, matching the
	raptor_simple_message_handler API but same as raptor_parser_error.

	* raptor/raptor_xml.c (raptor_xml_escape_string):
	Use raptor_simple_message_handler.

	* raptor/raptor_qname.c (raptor_new_qname):
	Use raptor_simple_message_handler.

	* raptor/raptor.h: raptor_sax2_element moved here, semi-public.
	Re-ordered URI functions earlier.
	Various methods changed to use (public) raptor_simple_message_handler
	for error handling.

	* raptor/raptor_internal.h: Delete raptor_internal_message_handler.
	Added prototype raptor_parser_simple_error, implementing
	raptor_simple_error_handler API.
	Various methods changed to use (public) raptor_simple_message_handler
	for error handling.
	raptor_sax2_element moved to semi-public raptor.h
	rdf/xml-specific cdata parts moved from raptor_sax2_element to
	raptor_element.
	Added raptor_xml_writer functions.

	* raptor/raptor_namespace.c:
	Use (public) raptor_simple_message_handler for error handling.

2003-07-24  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_parse.c (raptor_process_property_attributes):
	NFC error message tidy.
	(raptor_end_element_grammar): Fix NFC error reporting and recovery.
	Report NFC validation failures for XML Literals

	* raptor/tests/Makefile.am: Added bad-15 bad-17 for bad NFC checking

	* raptor/tests/bad-16.rdf, raptor/tests/bad-17.rdf,
	raptor/tests/bad-15.rdf: Bad NFC tests for property attribute,
	element, element ptl

	* raptor/configure.ac:
	Added check for g_utf8_normalize in glib 2.0 using pkgconfig.
	Defines HAVE_G_UTF8_NORMALIZE if present.

	* raptor/raptor_internal.h: Added raptor_utf8_is_nfc

	* raptor/raptor_parse.c (raptor_process_property_attributes):
	Check for valid NFC on property
	attribute values.
	(raptor_end_element_grammar): Check for valid NFC on plain literal
	property element values.

	* raptor/raptor_utf8.c (raptor_utf8_is_nfc):
	Added Normal Form C checking, using GNOME glib
	2.0 g_utf8_normalize initially.

	* raptor/raptor_parse.c (raptor_start_element_grammar):
	Forbid property attributes and all
	rdf:* attributes (except rdf:ID) with rdf:parseType

	* raptor/raptor_general.c:
	(raptor_statement_part_as_counted_string,
	raptor_print_statement_part_as_ntriples): Do not emit language for
	datatyped literals.

	* raptor/raptor_parse.c (raptor_process_property_attributes):
	rdf:li is forbidden as a property attribute

	* raptor/raptor_parse.c: rdf_syntax_terms_info table: rdf:li is
	forbidden as a property attribute

	* raptor/libraptor.3: Updated raptor_set_feature for
	RAPTOR_FEATURE_ALLOW_BAGID and
	RAPTOR_FEATURE_ALLOW_RDF_TYPE_RDF_LIST

	* raptor/tests/owl-schema.out, raptor/tests/ex-39.out:
	Updated to remove the <idList> rdf:type rdf:List triples

	* raptor/raptor_general.c (raptor_set_feature,
	raptor_set_parser_strict): Added a new feature
	RAPTOR_FEATURE_ALLOW_RDF_TYPE_RDF_LIST (user argument) and
	feature_allow_rdf_type_rdf_List (internal) to generate the rdf:type
	rdf:List triple from rdf:parseType="Collection".  The default is no
	after latest RDF/XML revisions.  Not relevant for daml:Collection
	which get the daml:List always.

	* raptor/raptor.h:
	Added a new feature feature RAPTOR_FEATURE_ALLOW_RDF_TYPE_RDF_LIST
	to control rdf:type rdf:List triple generation from
	rdf:parseType="Collection" (default no)

	* raptor/raptor_internal.h:
	Added a new feature feature_allow_rdf_type_rdf_List
	to control rdf:type rdf:List triple generation from
	rdf:parseType="Collection" (default no)

	* raptor/raptor_parse.c (raptor_start_element_grammar):
	Remove rdf:type rdf:List triple
	generation from rdf:parseType="Collection" by default.  Not
	for daml:Collection.  Add a new feature
	feature_allow_rdf_type_rdf_List to control this.

2003-07-22  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_xml.c (raptor_valid_xml_ID, raptor_xml_escape_string):
	unsigned long for
	all unichars.

	* raptor/raptor_internal.h:
	Update raptor_utf8_to_unicode_char to use unsigned long output.

	* raptor/raptor_utf8.c (raptor_utf8_to_unicode_char):
	Take and use unsigned long for unichars.

	* raptor/raptor_rss.c:
	namespace->nspace since might be a C/C++ keyword sometime

	* raptor/raptor_www_curl.c (raptor_www_curl_header_callback):
	Turn void* into char*

	* raptor/raptor_set.c: Casts

	* raptor/rdfdump.c (rdfdump_error_handler):
	Cast data into raptor_parser*

	* raptor/raptor_www_curl.c:
	(raptor_www_curl_write_callback,raptor_www_curl_header_callback):
	Return unsigned int 0 on failure, cannot return -1 :)

	* raptor/raptor_www.c: Some casts near mallocs

	* raptor/tests/owl-schema.out: Updated to match 2003-03-18 version.

	* raptor/tests/owl-schema.rdf:
	Updated to 2003-03-18 version (just changed DOS line endings)

	* raptor/ntriples_parse.c (raptor_ntriples_parse_chunk):
	Handle just the end marker being given
	i.e. len=0 (and possibly s=NULL)

	* raptor/raptor_parse.c (raptor_xml_end_element_handler):
	When parsing has been aborted
	(rdf_parser->failed), clean up used memory rather than just return.
	element_name is not used except when debugging, so #ifdef it.

2003-07-21  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor.h:
	Export global statics raptor_copyright_string, raptor_version_string,
	raptor_version_major, raptor_version_minor, raptor_version_release
	and raptor_version_decimal

	* raptor/raptor_general.c:
	Added statics raptor_copyright_string, raptor_version_string,
	raptor_version_major, raptor_version_minor, raptor_version_release
	and raptor_version_decimal

	* raptor/Makefile.am:
	Removed raptor_cc code since ISO may charge a commercial use fee for
	this list.

	* raptor/raptor_cc.gperf: ISO 3166-1 'The use of ISO 3166-1 in
	commercial products may be subject to a licence fee.' says the
	maintenance agency.  Goodbye code.

	* raptor/raptor_parse.c:
	Free former rdf:about, rdf:resource attribute string values before
	they are zapped.

	* raptor/raptor_parse.c (raptor_xml_parse_terminate):
	Delete the sax2 object when cleaning
	up.

	* raptor/rdfdump.c:
	Free new uri_string when it's allocated for a filename

	* raptor/rdfdump.c: Tidied usage and help information.

	* raptor/rapper.1: Updated to match current rapper arguments.

	* raptor/Makefile.am: Added raptor_identifier.c

	* raptor/raptor_general.c, raptor/raptor_identifier.c:
	Moved raptor_identifer classes to raptor_identifier.c

2003-07-20  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/rdfdump.c:
	If first argument is a filename, make it into a file:/// uri.

	* raptor/raptor_uri.c (raptor_default_new_uri):
	Turn probably-bad file:filename 'URIs' into
	proper file:///... etc. ones.

	* raptor/raptor_parse.c:
	Make use of forbidden rdf-namespaced property attributes into errors,
	as they should be.
	(raptor_forbidden_propertyAttribute_name): Now used.
	Reword some error messages.

	* raptor/tests/Makefile.am (check-bad-rdf):
	Note when bad test succeeds instead of failing

	* raptor/tests/Makefile.am: Added bad-13, bad-14

	* raptor/tests/bad-14.rdf:
	rdf:Description is not a legal property attribute

	* raptor/tests/bad-13.rdf: A property element cannot take rdf:about

	* raptor/raptor_uri.c (raptor_new_uri_for_xmlbase): Docs

2003-07-15  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/libraptor.3: formatting

	* raptor/libraptor.3: Added
	raptor_set_default_generate_id_parameters,
	raptor_set_generate_id_handler

	* raptor/raptor_general.c (raptor_set_default_generate_id_parameters):
	Fix it right this time.

	* raptor/raptor_general.c (raptor_set_default_generate_id_parameters):
	Fix base so the next
	generated ID uses the integer given, not integer+1

	* raptor/raptor_general.c (raptor_free_parser):
	Free any user-set genid prefix.

2003-07-13  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor.h:
	raptor_genid_type enum added - for RAPTOR_GENID_TYPE_BNODEID, BAGID
	Added prototypes for raptor_set_generate_id_handler,
	raptor_set_default_generate_id_parameters.

	* raptor/raptor_general.c (raptor_set_generate_id_handler):
	Added, to sent the generate ID
	handler implementation.
	(raptor_set_default_generate_id_parameters): Added, to sent the
	generate ID handler parameters for the default implementation
	("gen"+integer).
	(raptor_default_generate_id_handler): Added, moved default code from
	raptor_generate_id
	(raptor_generate_id): Use handler if it exists, otherwise the default
	implementation.

	* raptor/raptor_internal.h:
	Added generate_id_handler data parts to raptor_parser internals.

2003-06-24  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* redland-config.in: Make --libs pick the right libdir - add
	exec_prefix variable declaration.

	* utils/Makefile.am, librdf/Makefile.am, examples/Makefile.am:
	Use @LIBS@ in LIBS to pick up any system-wide use.

	* configure.ac:
	Pick up any external CPPFLAGS, LDFLAGS, LIBS to start with.

	* raptor/tests/Makefile.am: use top_builddir not ..

	* raptor/Makefile.am: add libraptor.la to rapper dependencies

2003-06-23  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* python/RDF.py: Statements, Model: more docs, usage.

	* python/Makefile.am: Added redlandtest.py

	* python/redlandtest.py: Redland Python unit tests

	* python/RDF.py: v0.8
	Updates from Matt Biddulph.
	(class Model) Now takes optional storage, if omitted, a memory
	storage model is created
	(class StreamWithContextIter, class IteratorWithContextIter,
	class IteratorIter, class StreamIter): Internal classes to create
	python iterators out of redland stream/iterators.
	(class Stream): New method context_iter that returns a python iterator
	returning (stream, context node) tuple on each iteration.
	(class HashStorage): Simple class to simplify creating hashed storage.
	(class MemoryStorage): Simple class to simplify creating in-memory
	storage.
	(class Parser): Name is now optional, defaults to raptor and RDF/XML.
	(class Parser): Methods parse_as_stream, parse_into_model will
	autoconvert uri arguments that are strings into redland URIs.

	* python/test/test.py: s/if not thing/if thing is None/

	* raptor/rdfdump.c:
	Added -e/--ignore-errors otherwise rapper stops parsing after 1st
	error using raptor_parse_abort.

2003-06-14  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_rss.c (raptor_rss_insert_identifiers):
	Back to being legal C99.

	* raptor/libraptor.3: Fix changes for 0.9.11

	* raptor/libraptor.3: Updated for stuff since 0.9.10

	* raptor/raptor_rss.c (raptor_rss_insert_identifiers):
	Init identifier after item

	* raptor/rdfdump.c, raptor/configure.ac:
	Tweak RSS Tag Soup parser words

2003-06-10  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_parse.c (raptor_xml_start_element_handler):
	Emit an error for namespace
	declarations that are RDF namespace URI plus some chars.  Emit
	a warning if a namespace is declared same as RDF one but 1 char
	short.

	* raptor/tests/Makefile.am: Added bad-12, warn-02

	* raptor/tests/bad-12.rdf, raptor/tests/warn-02.out,
	raptor/tests/warn-02.rdf: Check for bad rdf namespace URI
	declarations and warn if last char of RDF namespace URI omitted

2003-06-09  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_uri.c (librdf_new_uri_from_filename): Removed unused vars.

2003-06-08  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* FAQS.html: Added FAQ: Redland and Raptor - what are they?

	* raptor/configure.ac:
	Fix the check for RSS parser requirements and report it more
	verbosely.

	* raptor/configure.ac:
	RSS parser only if libxml/reader.h present (for now).

	* raptor/configure.ac: libcurl reporting

	* raptor/raptor_parse.c (raptor_xml_parse_chunk_): Use sax2->first_read

	* raptor/raptor_parse.c (raptor_xml_parse_start,raptor_xml_parse_chunk_):
	Don't use first_read on newer libxml2.

2003-06-06  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_internal.h:
	raptor_sax2_s: Add first_read #if LIBXML_VERSION < 20425

	* raptor/raptor_rss.c (raptor_rss_insert_identifiers):
	Fix GCC-ism, declare variable at
	start of block.

	* raptor/raptor_parse.c (raptor_xml_parse_init):
	Move declaration of expat xp to start of
	function.

	* raptor/examples/raptor_abort.c, raptor/examples/grapper.c,
	raptor/strcasecmp.c, raptor/rdfdump.c, raptor/raptor_xml.c,
	raptor/raptor_www_test.c, raptor/raptor_www_libxml.c,
	raptor/raptor_www_libwww.c, raptor/raptor_www_curl.c,
	raptor/raptor_www.c, raptor/raptor_win32.c, raptor/raptor_utf8.c,
	raptor/raptor_uri.c, raptor/raptor_set.c, raptor/raptor_sax2.c,
	raptor/raptor_rss.c, raptor/raptor_qname.c, raptor/raptor_parse.c,
	raptor/raptor_namespace.c, raptor/raptor_locator.c,
	raptor/raptor_libxml.c, raptor/raptor_general.c,
	raptor/ntriples_parse.c, raptor/configure.ac: Merged patch from
	Jose Kahan to switch to use raptor_config.h (helps people
	compiling from source with multiple config.h)

2003-06-05  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/examples/grapper.c (fs_ok_button_callback):
	Use raptor_uri_filename_to_uri_string
	to make the file URI.
	(main): If the argument is a filename, make a URI string out of it
	via raptor_uri_filename_to_uri_string and use it instead of
	assuming it is a URI.

2003-06-04  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Redland.i, librdf/rdf_uri.h: Added librdf_new_uri_from_filename

	* librdf/rdf_uri.c (librdf_new_uri_from_filename):
	Added using raptor_uri_filename_to_uri_string

	* INSTALL.html: 2.6 Update 'make install'

	* autogen.sh: Report min SWIG version

	* INSTALL.html: Add testing sec, link to language tests

	* docs/README.html: Added link to testing

2003-05-26  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* demos/rss-show.pl: words

2003-05-12  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_xml.c (raptor_xml_escape_string):
	Changed API - does not require a parser arg.

	* raptor/raptor_internal.h: Moved SAX2 parts and prototypes here.

	* raptor/raptor_general.c:
	Use RAPTOR_PARSER_RSS to wrap init of RSS parser

	* raptor/raptor.h:
	Changed prototype of raptor_xml_escape_string - does not require a
	parser arg.

	* raptor/raptor_parse.c:
	Split raptor_element/raptor_rdf_xml_parser into SAX2/RDF bits.
	Lots of function and structure renaming.

	* raptor/configure.ac:
	Define RAPTOR_PARSER_RSS only when libxml is around

	* raptor/raptor_sax2.c: SAX2 API

	* raptor/Makefile.am: Added raptor_sax2.c

2003-04-30  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/Redland/Model.pm:
	Same as before but with right package names
	(find_statements): Return copies of shared statements
	(sources,arcs,targets): Return copies of shared nodes

	* perl/lib/RDF/Redland/Model.pm (find_statements):
	Return copies of shared statemetns
	(sources,arcs,targets): Return copies of shared nodes

2003-04-29  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_statement.c (librdf_statement_to_string):
	Handle buffer size counting when parts are null

	* librdf/rdf_heuristics.c (librdf_heuristic_gen_name):
	Check loop doesn't go before start.

	* librdf/rdf_utf8.c (librdf_utf8_print):
	check length first before looking in what might
	be a byte beyond the length

2003-04-28  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_rss.c (raptor_rss_emit): Use raptor_free_identifier

	* raptor/raptor_rss.c (raptor_rss_emit):
	Properly init the raptor_identifier items

2003-04-27  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_rss.c, raptor/raptor_parse.c, raptor/ntriples_parse.c:
	Use raptor_parser_register_factory with label param.

	* raptor/raptor.h: Added raptor_get_name, raptor_get_label

	* raptor/raptor_general.c: Added parser label to factory
	(raptor_parser_register_factory): Add label param, copy it.
	(raptor_get_name): Added, return name of parser.
	(raptor_get_label): Added, return label of parser.

	* raptor/raptor_internal.h: Added parser label to factory

	* raptor/examples/grapper.c: Remove some g_printfs
	Remove use of display qnames - not impl.

	* raptor/raptor_general.c (raptor_statement_part_as_counted_string):
	Init len for literals with
	the literal len included

	* raptor/examples/grapper.c: Don't use triples_list for now.
	(grapper_model_set_syntax): Fix output.
	(grapper_model_statements_handler): Remove newlines from literals.

	* raptor/raptor_general.c (raptor_statement_part_as_counted_string):
	Init len for literals.

2003-04-25  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_set.c: fix doccumment

2003-04-23  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/examples/grapper.c:
	Replace N-Triples / RDF/XML with dropdown menu and add RSS tag soup.

2003-04-22  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/redland.spec.in: Updated for Redhat 9 and RPM 4

	* python/RDF.py: Added blank node is_blank() method example
	(Node.__set_attr): Fix set_type
	(Node.get_blank_identiifer, Node.set_blank_identiifer): Added

	* python/RDF.py: some perlisms in the docs/comments

	* python/RDF.py:
	this one file is now also under BSD without advertising/MIT license

2003-04-19  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/rdfdump.c: Added -i/--input for rdfxml, ntriples, rss

	* raptor/raptor_internal.h: More RAPTOR_DEBUG macros

	* raptor/raptor_general.c:
	(raptor_init) Added rss parser via raptor_init_parser_rss when
	HAVE_LIBXML_XMLREADER_H

	* raptor/Makefile.am: Added raptor_rss.c

	* raptor/raptor_rss.c: Raptor RSS parser

	* docs/stylesheet.css: now validates
	hovering over links in header works better

2003-04-17  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/INSTALL.html: Added some links

	* docs/stylesheet.css: <100% was making things too small

	* raptor/configure.ac: Bumped version to 0.9.11

	* raptor/TODO.html, raptor/NEWS.html: Updated for 0.9.10 release

	* raptor/INSTALL.html: Updated to reflect recent tests.
	Added examples section, link to libraptor.html
	Added more configure options docs.

	* raptor/libraptor.3: Added raptor_set_parser_strict
	Added raptor_www_no_www_library_init_finish

	* TODO.html: Bad blank nodeIDs w.r.t rdf/xml shouldn't serialize

	* raptor/raptor.spec.in: Require curl
	Added raptor-config, raptor.pc

	* raptor/tests/Makefile.am:
	Move rdf:bagID tests to list of tests with warnings for now (while
	testing in lax mode)

2003-04-15  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/fix-pod-xhtml: and a newline

	* docs/fix-pod-xhtml: added xml decl

	* docs/fix-pod-xhtml: More fixing

	* docs/fix-pod-xhtml: New style POD to html cleanup

	* TODO.html: -bug crash on un-named memory hash storage

	* librdf/rdf_storage_hashes.c (librdf_storage_hashes_register):
	Allow NULL name

	* perl/lib/RDF/Redland/Storage.pm: add rest of storage options to docs

	* TODO.html: +bug crash on un-named memory hash storage

	* raptor/rdfdump.c (print_statements):
	Print the program name not "rdfdump" hardcoded.

	* librdf/rdf_node.h, librdf/rdf_node.c:
	Added librdf_node_get_literal_value_as_counted_string

2003-04-14  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/configure.ac: Check for libxml/xmlreader.h

2003-04-13  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/examples/grapper.c: Added about box, triples count.
	Free some allocated memory.  Rest seems lost in gtk.

	* raptor/examples/Makefile.am: Add AM_CFLAGS, LIBS for debugging

	* raptor/raptor_parse.c (raptor_xml_start_element_handler):
	Don't copy an empty attributes array.

	* raptor/configure.ac: Added raptor.pc

	* raptor/Makefile.am:
	Added raptor.pc pkgconfig file installing to $(libdir)/pkgconfig

	* raptor/raptor.pc.in: pkgconfig for raptor

2003-04-12  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/Makefile.am: Added rdf_model_storage.h

	* librdf/rdf_model_storage.h: RDF Model Storage Interface definition

2003-04-10  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_model.c:
	Split model/storage into model/model factory/model storage factory
	just like hashes, storage classes.
	(librdf_init_model): Call librdf_init_model_storage
	(librdf_finish_model): Call librdf_delete_model_factories
	(librdf_delete_model_factories, librdf_model_register_factory,
	librdf_get_model_factory):  Added, after rdf_storage.c similar names.
	(librdf_new_model_with_options): Use storage factory create method.
	(librdf_new_model_from_model): Use clone method.
	(librdf_free_model): Use destroy method.
	The remaining methods that depend on storage now use factory methods.
	Some methods have slight edits to use the model method not the
	storage one when it doesn't matter, or when no factory method is
	present, and it is emulated at the model level.

	* librdf/Makefile.am: Added rdf_model_storage.c

	* librdf/rdf_model.h:
	Added internal librdf_model_factory struct with factory methods
	Added librdf_model_register_factory, librdf_get_model_factory

	* librdf/librdf.h: added librdf_model_factory

	* librdf/rdf_model_storage.c: RDF model over a storage

2003-04-07  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/TODO.html: words

2003-04-05  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor.h: void arg

	* raptor/examples/raptor_abort.c: Zap curl cleanup.

	* raptor/rdfdump.c:
	Added -c flag to getopts - oops, missed in last release.
	Added -m/--mode flag to set strict/lax.  Check the values and die
	with usage.
	Check the legal values of -o/--output and die with usage.
	Zap curl cleanup.

	* raptor/raptor_www.c (raptor_www_no_www_library_init_finish):
	To control global WWW
	library init/finish

	* raptor/raptor_parse.c:
	Make bagID optional - removed from language and gives errors
	(strict), allowed with warnings (lax).
	lax/strict controlled by feature_allow_bagID

	* raptor/raptor_internal.h: Added feature_allow_bagID

	* raptor/raptor_general.c: Several more docucomments for functions.
	(raptor_new_parser): Use raptor_set_parser_strict
	(raptor_set_feature): Added RAPTOR_FEATURE_ALLOW_BAGID
	(raptor_set_parser_strict): Added to set strict/lax mode flags.

	* raptor/raptor.h: Added RAPTOR_FEATURE_ALLOW_BAGID
	Added raptor_set_parser_strict
	Added raptor_www_no_www_library_init_finish

2003-04-03  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/Makefile.am: Added warn-01

	* raptor/tests/warn-01.out, raptor/tests/warn-01.rdf:
	Check warning on non-prefixed property elements

	* raptor/raptor_parse.c, raptor/tests/Makefile.am
	(raptor_xml_start_element_handler): Error recovery - try to hide that
	a bad element was found from a parent element, it thinks the element
	is empty.  See tests/warn-00.rdf

	* raptor/tests/warn-00.out, raptor/tests/warn-00.rdf: Check warnings

2003-04-02  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Makefile.am, raptor/configure.ac, raptor/Makefile.am, configure.ac:
	debian dir elsewhere

2003-04-01  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/TODO.html: docs updated

	* raptor/TODO.html: www tidy by default on raptor_finish

	* librdf/rdf_parser_raptor.c
	(librdf_parser_raptor_new_statement_handler): (re)add storing in a
	model direct.
	(librdf_parser_raptor_parse_uri_as_stream_write_bytes_handler): Added
	to support librdf_parser_raptor_parse_uri_as_stream via raptor_www
	(librdf_parser_raptor_parse_uri_as_stream): Added.  Calls
	librdf_parser_raptor_parse_file_as_stream if that's possible.
	(librdf_parser_raptor_parse_uri_into_model): Added, doing all of
	librdf_parser_raptor_parse_file_into_model.
	(librdf_parser_raptor_constructor): Register new functionality.

	* raptor/raptor_uri.c (raptor_uri_uri_string_to_filename):
	Use raptor_strcasecmp
	(raptor_uri_is_file_uri): Use raptor_strncasecmp

	* librdf/rdf_parser_libwww.c: No libwww parser

2003-03-31  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/fix-groff-xhtml: more cols

	* raptor/README.html: added libraptor.html

	* raptor/fix-groff-xhtml: More fixes

	* raptor/Makefile.am: Added libraptor.html, fix-groff-xhtml

	* raptor/fix-groff-xhtml: Fix groff output HTML

	* raptor/libraptor.3: deleted repeated URI METHODS

	* raptor/libraptor.3: Updated for 0.9.6->present

2003-03-30  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/examples/grapper.c: Use N-triples output style.
	Pass in URL command line argument

	* raptor/TODO.html: words

	* raptor/TODO.html: XML attribute bugs

	* raptor/Makefile.am: Added raptor_xml.c

	* raptor/raptor_parse.c (raptor_xml_start_element_handler):
	do XML attribute value
	normalization for libxml2.  Cannot be done properly since the type of
	the attribute is lost.  expat gets it right.
	(raptor_xml_parse_init): Cast for expat XML_SetExternalEntityRefHandler

	* raptor/raptor_xml.c:
	Updated for C14N text/attribute node encoding rules.  Don't de-UTF8
	at the same time.

	* raptor/tests/ex-49.out: > in attribute appears raw

	* raptor/raptor_general.c:
	(main) Moved raptor_validate_xml_ID, raptor_xml_escape_string test
	code to raptor_xml.c

	* raptor/raptor_xml.c: Raptor XML routines

	* raptor/raptor_general.c:
	Moved raptor_validate_xml_ID, raptor_xml_escape_string to raptor_xml.c

	* raptor/tests/Makefile.am: Added ex-49

	* raptor/tests/ex-49.out, raptor/tests/ex-49.rdf:
	Checking escaping in parseType Literal values with XML attributes

	* raptor/raptor_parse.c (raptor_format_element):
	Pass in parser for UTF-8 error handling.
	Use raptor_xml_escape_string for attribute values but
	only malloc/free if lengths changed.
	(raptor_xml_end_element_handler): Update to new
	raptor_xml_escape_string API and only malloc/free it if lengths
	changed.

	* raptor/raptor_parse.c (raptor_xml_cdata_handler):
	Use updated raptor_xml_escape_string API

	* raptor/raptor.h: Added raptor_statement_part_as_counted_string,
	raptor_statement_part_as_string
	Changed raptor_xml_escape_string API

	* raptor/raptor_general.c
	(raptor_statement_part_as_counted_string,
	raptor_statement_part_as_string): Added, making N-triples style
	output from parts of raptor_statement.
	(raptor_xml_escape_string): Change API to take an existing
	buffer/calculate length
	(main): Update for raptor_xml_escape_string.

	* raptor/examples/Makefile.am: Also clean grapper binary

2003-03-29  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/examples/grapper.c: Added N-Triples parsing

	* raptor/examples/Makefile.am: Don't build grapper usually

	* raptor/examples/grapper.c: Raptor GTK GUI example code

	* TODO.html: +in-memory storage bloat
	-contexts crash killed.
	-repat gone
	-thread support

	* python/RDF.py, librdf/rdf_parser_raptor.c, librdf/rdf_parser.h,
	librdf/rdf_parser.c, librdf/Makefile.am, docs/redland.pod,
	docs/api.sgml.in, docs/Makefile.am, demos/parser-tests.pl,
	demos/demo.pl, configure.ac: Removed repat

	* librdf/rdf_uri.c (librdf_free_uri): Move world defn inside ifdef

	* raptor/examples/Makefile.am: Added grapper.c

	* raptor/examples/Makefile.am: more deps

	* raptor/raptor_internal.h:
	Added raptor_print_statement_part_as_ntriples prototype

	* raptor/raptor_general.c:
	raptor_print_ntriples_string moved to raptor_general.c
	(raptor_print_statement_part_as_ntriples): Added, internal.
	(raptor_print_statement_as_ntriples): Now uses above.

	* Makefile.am: Removed repat

	* raptor/ntriples_parse.c:
	raptor_print_ntriples_string moved to raptor_general.c

	* librdf/Makefile.am: die recursive make

2003-03-28  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/examples/Makefile.am: another deps attempt

	* raptor/examples/Makefile.am: typo

	* raptor/examples/Makefile.am: Use LDADD and hunt for @REDLAND_LIBS@
	Added $(top_builddir)/../librdf/librdf.la

	* raptor/configure.ac: Hunt for librdf.la in abs dir

	* raptor/rapper.1: added -c/--count

	* raptor/examples/Makefile.am: Fixes to make cross-dir building work.

	* raptor/TODO.html: docs

	* raptor/configure.ac, raptor/Makefile.am: Added examples dir

	* raptor/raptor_general.c (raptor_parse_uri_with_connection): Added.
	(raptor_parse_abort): Added.

	* raptor/raptor.h: Added raptor_parse_uri_with_connection.
	Added raptor_parse_abort.

	* raptor/examples/raptor_abort.c, raptor/examples/Makefile.am: examples

	* raptor/rdfdump.c:
	Call curl_global_cleanup if using curl to free it's resources.

	* raptor/raptor_www.c (raptor_www_init,raptor_www_finish):
	Don't init/cleanup curl, we
	can't guarantee doing this at most once if a handle is passed in.

	* raptor/raptor_www_curl.c (raptor_www_curl_free): Tidy

	* raptor/raptor_www_curl.c (raptor_www_curl_init,raptor_www_curl_free):
	Use/mark field
	curl_init_here to note when to cleanup a handle - don't destroy one
	that was provided.

	* raptor/raptor_internal.h:
	for curl, record when curl_easy_init was done in raptor

	* raptor/raptor_general.c (raptor_init): Call raptor_www_init
	(raptor_finsh): Call raptor_www_finish
	(raptor_parse_uri): Delete www object on failure.

	* raptor/configure.ac: Bumped version to 0.9.10

	* raptor/NEWS.html, raptor/README.html: Updated for 0.9.9 release

	* librdf/rdf_model.c: unused var

	* librdf/rdf_stream.c, librdf/rdf_statement.c,
	librdf/rdf_serializer.c, librdf/rdf_query.c, librdf/rdf_parser.c,
	librdf/rdf_node.c, librdf/rdf_iterator.c, librdf/rdf_hash.c,
	librdf/rdf_concepts.c:
	Changes to test code after initial locking for threads support.
	(main) Testcode - use librdf_world_init_mutex

	* librdf/rdf_uri.c: Initial locking for threads from Seth Ladd
	(librdf_new_uri): Lock/unlock world for new URI.
	(librdf_free_uri): Lock/unlock world for destroying URI.
	(main) Testcode - use librdf_world_init_mutex

	* librdf/rdf_init.h: Initial locking for threads from Seth Ladd
	Added mutex to world.
	Added prototype for internal librdf_world_init_mutex

	* librdf/rdf_init.c: Initial locking for threads from Seth Ladd
	(librdf_free_world): Delete mutex on shutdown.
	(librdf_world_init_mutex): Added (internal) to be used by tests
	rather than initing all of redland.
	(librdf_world_open): Create mutex on startup.

	* configure.ac: Initial locking for threads from Seth Ladd
	Added --with-threads for POSIX threads

2003-03-27  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* demos/demo.pl: utf-8 output

	* librdf/rdf_storage_hashes.c (librdf_storage_hashes_grow_buffer):
	Fix return code sense.
	(librdf_storage_hashes_add_remove_statement): Use calculate length
	for key/value len, not buffer sizes.
	(librdf_storage_hashes_context_add_statement): Return failure if
	contexts aren't enabled and this is called.

	* librdf/rdf_model.c:
	(main) Test code - check get_sources, get_targets, get_arcs

	* TODO.html: contexts when not enabled crash

	* python/RDF.py (Stream.context): Use self.stream

	* raptor/TODO.html: fixed crashing when rdf/xml parser has no base URI

2003-03-26  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_set.c:
	Only use raptor_set_stats_print with RAPTOR_DEBUG

	* raptor/raptor_general.c: Some comment tidying.
	(raptor_start_parse): Docucomment.  Copy the uri into the parser
	structure (base_uri, locator uri), don't just keep the pointer.
	(raptor_free_parser): Free the base URI in the structure, if
	present.

	* raptor/raptor_parse.c (raptor_xml_parse_start):
	Remove uri arg.   Fail if no base URI is
	given - stored in the parser object

	* raptor/ntriples_parse.c (raptor_ntriples_parse_start):
	Remove uri arg.

	* raptor/raptor_internal.h:
	raptor_parser_factory start method: Remove (base) uri arg, it's in
	the object data.

	* raptor/raptor_www.c: Use RAPTOR_FREE,MALLOC,CALLOC
	(raptor_www_free): Free the www object.  Doh.

	* raptor/TODO.html:
	raptor_start_parse crash with NULL base URI for rdfxml parser

	* raptor/libraptor.3: raptor_parse_chunk: Takes unsigned char buffer.

	* raptor/libraptor.3:
	raptor_start_parse: Note NULL base URI ok for ntriples

	* raptor/libraptor.3: Typo: raptor_start_parse not raptor_parse_start

	* raptor/raptor_general.c (raptor_xml_escape_string):
	Make it work with 10ffff again

	* raptor/raptor_parse.c (raptor_xml_cdata_handler):
	Cast around raptor_xml_escape_string

	* raptor/raptor_general.c (raptor_xml_escape_string):
	Null terminate new string

	* raptor/raptor_www_libxml.c, raptor/raptor_www.c:
	Use RAPTOR_WWW_BUFFER_SIZE for I/O buffers

	* raptor/raptor_internal.h:
	Define RAPTOR_WWW_BUFFER_SIZE for I/O buffers

	* raptor/rdfdump.c: Declare raptor_stats_print when RAPTOR_DEBUG

	* raptor/raptor_general.c: (raptor_stats_print) C99

	* librdf/rdf_model.c (librdf_model_add_typed_literal_statement):
	Don't free object here,
	librdf_model_add does it as part of freeing the statement.

2003-03-25  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* demos/rss-show.pl, demos/parser-tests.pl, demos/ntriples.pl,
	demos/demo.pl: Updated to 0.9.12 API

2003-03-24  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/rdfdump.c: Call raptor_stats_print with RAPTOR_DEBUG

	* raptor/raptor_set.c: Record set hits/misses with RAPTOR_DEBUG
	(raptor_set_stats_print): Defined with RAPTOR_DEBUG

	* raptor/raptor_internal.h:
	Move raptor_xml_parser typedef here (still internal).
	raptor_xml_parser_stats_print, raptor_set_stats_print: Defined with
	RAPTOR_DEBUG

	* raptor/raptor_parse.c (raptor_xml_parser_stats_print):
	Defined with RAPTOR_DEBUG

	* raptor/raptor_general.c (raptor_stats_print):
	Defined with RAPTOR_DEBUG

	* raptor/TODO.html: Fixed escaping rdf:parseType="Literal" content

	* raptor/raptor_parse.c (raptor_xml_cdata_handler):
	Use raptor_xml_escape_string when content
	type is an XML literal

	* raptor/raptor_general.c (raptor_xml_escape_string):
	Now takes and returns lengths
	Fix assumption of '\0' terminated strings.
	(main): Update for counted strings

	* raptor/raptor.h:
	raptor_xml_escape_string now takes and returns lengths

	* raptor/raptor.h: Added raptor_xml_escape_string

	* raptor/Makefile.am: Added raptor_general_test

	* raptor/raptor_general.c (raptor_xml_escape_string):
	Added, XML-escapes UTF-8 strings.
	(main): Added set of tests for raptor_xml_escape_string

2003-03-23  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/ex-48.out, raptor/tests/ex-48.rdf:
	ex-48 parse type literal with entity encoding

	* raptor/tests/Makefile.am: Added ex-48

	* raptor/raptor_www_libxml.c (raptor_www_libxml_fetch):
	Make this work again

	* raptor/raptor_parse.c (raptor_record_ID): Dealloc item after adding

	* librdf/rdf_parser_raptor.c: raptor_free now raptor_free_parser
	(librdf_raptor_uri_as_counted_string): Added
	Use it to register the raptor_uri

	* raptor/raptor_parse.c: typo

	* raptor/raptor_parse.c:
	Remove raptor_id_list implementation for ID checking to use raptor_set.
	(raptor_xml_parse_init): Init raptor_set for ids.
	(raptor_xml_parse_terminate): Use raptor_free_set.
	(raptor_record_ID): Use raptor_set_add to check for unique "ID base-URI"
	(raptor_free_ID_list): Gone

	* raptor/raptor_uri.c (raptor_default_uri_as_counted_string,
	(raptor_uri_as_counted_string): Added and used in default factory.

	* raptor/raptor.h: Added raptor_uri_as_counted_string.

	* raptor/raptor_internal.h:
	Added raptor_set and raptor_new_set constructor, raptor_free_set
	destructor and raptor_set_add only method

	* raptor/Makefile.am: Added raptor_set.c, raptor_set_test

	* raptor/raptor_set.c: Raptor sets for ID checking

2003-03-20  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* demos/rss-show.pl: sort feeds case insensitively

	* demos/rss-show.pl: Added Annotate module

	* librdf/rdf_storage_hashes.c:
	Add key/value buffers to hash context and share/grown them as needed
	to prevent a lot of unncessary malloc/frees.
	(librdf_storage_hashes_terminate): Delete shared key/value buffers.
	(librdf_storage_hashes_grow_buffer): Added to grow them when needed.
	(librdf_storage_hashes_add_remove_statement): Use
	librdf_storage_hashes_grow_buffer and shared key/value buffers.

	* librdf/rdf_hash_memory.c (librdf_hash_memory_expand_size):
	Revert bucket rehashing code to the older, simpler, slightly
	slower (2x work) since changed version failed.

	* librdf/rdf_hash_memory.c:
	Switched to same hash algorithm as perl, inlined it.
	(librdf_hash_memory_expand_size): When expanding, only move the nodes
	that need it, don't move everything.

2003-03-19  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* examples/example4.c: Free nodes on failure of get_source/target/arc

	* raptor/tests/Makefile.am: Added OWL namespace document / rdf
	schema owl-schema.rdf, owl-schema.out

	* raptor/raptor_www.c: No ghttp, init w3c libwww

	* librdf/rdf_statement.c (librdf_statement_to_string):
	Init statement_string_len to 0

	* librdf/rdf_hash_memory.c (librdf_hash_memory_expand_size):
	Quick hack to make hash grow.
	Needs a proper fix.

	* librdf/rdf_statement.c (librdf_statement_to_string):
	Use librdf_node_to_counted_string to save on strlen calls.

	* librdf/rdf_node.c (librdf_node_to_string):
	Now uses librdf_node_to_counted_string.
	(librdf_node_to_counted_string): Added, returns already known length.
	Uses librdf_uri_to_counted_string to save on strlen calls.
	(librdf_node_encode): Use librdf_uri_as_counted_string to save on
	strlen calls.

	* librdf/rdf_node.h: Added librdf_node_to_counted_string

	* librdf/rdf_uri.c (librdf_uri_as_counted_string,
	librdf_uri_to_counted_string): Added returning the already
	stored/calculated length of the string.

	* librdf/rdf_uri.h:
	Added librdf_uri_as_counted_string, librdf_uri_to_counted_string

	* raptor/tests/owl-schema.out, raptor/tests/owl-schema.rdf:
	OWL namespace schema

	* raptor/TODO.html: Bug: encoding & < and > in XML literals.

	* raptor/raptor_www_libwww.c: add fatal does-not-work error

	* raptor/configure.ac, raptor/raptor_internal.h,
	raptor/raptor_www_ghttp.c: Delete libghttp

2003-03-18  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_www_libwww.c: Raptor WWW with W3C libwww

	* raptor/rdfdump.c:
	Added -c/--count option to just count triples, don't print anything.

	* raptor/raptor_www_test.c: Use raptor_www_init/finish

	* raptor/raptor_www_libxml.c, raptor/raptor_www_ghttp.c:
	Handle www->failed and aborting transfer.

	* raptor/raptor_www_curl.c: Handle www->failed and aborting transfer.
	(raptor_www_curl_init): Use passed-in connection if available.

	* raptor/raptor_www.c (raptor_www_init): Added, for once-only init.
	(raptor_www_finish): Added, for once-only tidy.
	(raptor_www_new): Now uses new constructor
	(raptor_www_new_with_connection): Added, allows re-use of existing
	www library connection - just curl at present.
	(raptor_www_get_connection): Added, returns current libwww library
	connection.
	(raptor_www_abort): Added to stop a www transaction.
	(raptor_www_file_fetch): Tidying of errors; handle abort.
	(raptor_www_fetch): Uses raptor_www_file_fetch for all files.

	* raptor/raptor_internal.h: Added W3C libwww prototypes.

	* raptor/raptor_parse.c:
	Throughout all SAX event handlers - if rdf_parser->failed set, return
	immediately, doing no work.

	* raptor/raptor_general.c (raptor_parse_uri_write_bytes):
	Use raptor_www_abort if parsing
	fails.
	(raptor_parse_uri): Return error status.  Pass on is_end empty chunk.
	(raptor_parser_abort): Added, setting failed flag.
	(raptor_print_statement_detailed): Typo

	* raptor/raptor.h: Added raptor_www_abort

	* raptor/raptor.h: Add raptor_www_init, raptor_www_finish.
	Add raptor_www_new_with_connection
	Add raptor_www_get_connection

	* raptor/configure.ac: Added w3c libwww configuring

2003-03-16  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/rdfdump.c: Use raptor_parse_uri

	* raptor/raptor_general.c (raptor_parse_uri_write_bytes):
	Added, to support:
	(raptor_parse_uri): Added, using raptor_www to get and deal with all
	the data in one go.

	* raptor/raptor.h: raptor_parse_uri takes optional base_uri

	* raptor/raptor_www_test.c: Use URI from context.
	Take www arg on handlers
	Use raptor_uri

	* raptor/raptor_www_libxml.c, raptor/raptor_www_ghttp.c, raptor/raptor_www_curl.c:
	Use URI from context.
	Take www arg on handlers

	* raptor/raptor_www.c (raptor_www_set_userdata): Gone
	(raptor_www_free): Free request uri
	(raptor_www_set_write_bytes_handler,
	raptor_www_set_content_type_handler): Added
	(raptor_www_file_fetch): pass www to write_bytes
	(raptor_www_fetch): Don't pass URI on.

	* raptor/raptor_internal.h: Store raptor_uri of request
	Use new declared write_bytes, content_type handlers
	*fetch methods don't take URI string

	* raptor/raptor.h:
	Declare handlers for raptor www write bytes, content type
	raptor_www_fetch now takes a raptor_uri

	* raptor/raptor_parse.c:
	Fix broken-fix for broken-expat UTF8 BOM crash.
	tokens_count is on the rdf_xml_parser not rdf_parser

	* raptor/configure.ac: tweak

	* raptor/configure.ac: tidy libcurl version

	* raptor/raptor_internal.h, raptor/configure.ac:
	No more gnome-xml/libxml.h

	* raptor/configure.ac: Min libxml2 now 2.4.0

	* raptor/configure.ac: Don't look for xml-config

	* raptor/raptor_general.c (raptor_parse_file):
	Tidy up if raptor_start_parse fails

	* raptor/raptor_general.c:
	Removed raptor_start_parse_file - merged into raptor_parse_file

	* raptor/raptor_www.c (raptor_www_file_fetch): Used for RAPTOR_WWW_NONE
	Report file open errors, correct file read eof handling.
	(raptor_www_fetch) Use only raptor_www_file_fetch for RAPTOR_WWW_NONE

	* raptor/raptor_general.c (raptor_start_parse_file):
	Improve file open error message

	* raptor/configure.ac:
	Added --with-www=none option and RAPTOR_WWW_NONE to indicate it

2003-03-15  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_www.c (raptor_www_error): Use RAPTOR_FREE

	* raptor/raptor_www_ghttp.c (raptor_www_ghttp_fetch):
	call raptor_www_error

	* raptor/raptor_www_test.c: Call raptor_uri_init

	* raptor/raptor_www_curl.c (raptor_www_curl_fetch):
	call raptor_www_error

	* raptor/raptor_internal.h: Use raptor_message_handler again

	* raptor/raptor.h:
	Use raptor_message_handler again in raptor_www_set_error_handler,
	raptor_www_error

	* raptor/raptor_www.c (raptor_www_free): Tidy locator URI
	(raptor_www_set_error_handler, raptor_www_error): Use
	raptor_message_handler again.
	(raptor_www_error): Use raptor_locator in output, error handler.
	(raptor_www_fetch): Store the URI string of request in the locator

	* raptor/raptor.h: Declare raptor_www_message_handler (no locator)

	* raptor/raptor_general.c: raptor_vsnprintf now internally visible.

	* raptor/raptor_internal.h:
	Use different error handler, no parser context.
	raptor_vsnprintf now internally visible.
	Added raptor_www_error prototype

	* raptor/raptor_www.c:
	Only enable raptor_www_file_fetch with libxml, libghttp
	(raptor_www_set_error_handler): Use different error handler, no
	parser context.

	* raptor/configure.ac, raptor/Makefile.am:
	Added raptor WWW enabling, configuring

	* raptor/raptor_internal.h:
	Added raptor WWW retrieval internal includes, structs, prototypes

	* raptor/raptor.h: Added raptor WWW retrieval prototypes

	* raptor/raptor_www.c, raptor/raptor_www_curl.c,
	raptor/raptor_www_ghttp.c, raptor/raptor_www_libxml.c,
	raptor/raptor_www_test.c: Raptor WWW retrieval

2003-03-13  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* TODO.html: more bugs, fixedone

	* librdf/rdf_parser_raptor.c (librdf_parser_raptor_parse_file_as_stream):
	Save copies of source
	and base URI - don't assume they will be around for the life of a
	parse.
	(librdf_parser_raptor_serialise_finished): Free the copied uris.

	* examples/example4.c: document parse-stream

	* python/RDF.py (Node.__init__):
	Add world arg to librdf_new_node_from_blank_identifier

2003-03-11  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* using.html: Updated rdf gateway links

2003-03-10  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* TODO.html: Possible in-memory hash bug

2003-03-09  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Makefile.am: added demos dir

	* demos/rss-show.pl, demos/ntriples.pl: absolutize some doc urls

	* configure.ac, Makefile.am: added demos dir

	* demos/rss-show.pl, demos/parser-tests.pl, demos/ntriples.pl,
	demos/demo.pl: point to source code

	* demos/rss-show.pl, demos/parser-tests.pl, demos/ntriples.pl,
	demos/demo.pl: add source code

	* demos/Makefile.am, demos/demo.pl, demos/ntriples.pl,
	demos/parser-tests.pl, demos/rss-show.pl: Redland CGI demos

2003-03-06  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/serialize.pl (format_element_content,format_attribute):
	Added to escape &, <, > things  etc.

2003-03-05  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/serialize.pl: Whitespace tidying.
	(emit_literal_element): Added, for doing 1-line literals
	Fix datatypes.
	Emit multiple rdf:type properties too.

	* python/RDF.py:
	(Node.get_literal_value) Correct datatype URI method call to only
	operate if there is a datatype URI.
	(Stream._del_): Work when there is no redland Stream.
	(Parse.parse_as_stream): Return None if parsing fails, not an
	empty Stream.

	* perl/lib/RDF/Redland/Node.pm (literal_datatype):
	Added, return the URI of the literal datatype or
	undef if not one.

	* perl/lib/RDF/Redland/Parser.pm (parse_as_stream):
	Return undef if parsing fails, don't return a stream

	* perl/lib/RDF/Redland/Stream.pm (DESTROY):
	Handle wrapping an empty stream - might happen when a
	search fails straight away.

	* librdf/rdf_parser_raptor.c
	(librdf_parser_raptor_new_statement_handler): Handle XMLLiteral
	and datatyped literal URIs - pass them on as appropriate statements.

	* perl/serialize.pl (predicate_split): Fix
	(emit_empty_element) Pull out some more element
	building stuff - for now.
	main - declare an OWL namespace just for testing

	* perl/serialize.pl: added emit_start_element, emit_end_element
	now rdf:RDF declares its namespaces

	* perl/serialize.pl: Make blank node subject and objects work.

2003-03-04  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor.h: Export raptor_free_parser with RAPTOR_API

	* raptor/win32_config.h: add trailing #endif

	* raptor/win32_config.h: s/WIN32_LEAD_AND_MEAN/WIN32_LEAN_AND_MEAN/

	* raptor/raptor_parse.c (raptor_xml_comment_handler):
	Added - nop at present.
	(raptor_xml_parse_init): For expat, use raptor_xml_comment_handler

	* raptor/raptor_libxml.c:
	(raptor_libxml_init) Use raptor_xml_comment_handler

	* raptor/raptor_internal.h: Add raptor_xml_comment_handler prototype

	* raptor/configure.ac:
	Try to make maintainer mode flags match redland's defaults.

	* Makefile.am: expat sources not included

	* configure.ac: expat sources not included
	building against expat / libxml sources no longer supported.

	* librdf/rdf_model.c (librdf_model_add_typed_literal_statement):
	Document - nodes become owned by the model.

	* python/RDF.py: Bogus quotes

	* java/org/librdf/redland/Model.java:
	(add) (nodes, typed nodes versions) Copy redland nodes before adding.

	* perl/t/test2.t:
	Added test of Model method add_typed_literal_statement
	Added test of Serializer method serialize_model_to_file

	* python/test/test.py: Added test of model.add_typed_literal_statement

	* python/RDF.py (Model.add_typed_literal_statement):
	Copy redland nodes before adding.

2003-03-03  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/Makefile.am: make clean targets run when perl isn't enabled.

	* perl/Makefile.PL: Grab version from redland-src-config

	* perl/Makefile.am: Use $(srcdir)/Makefile.PL

	* python/Makefile.am: Use $(srcdir)/setup.py

	* java/Makefile.am:
	clean-java - don't leap down subdirs to clean stuff too early -
	confuses autoconf.

	* configure.ac: More AC_CONFIG_FILES tidying

	* raptor/configure.ac, raptor/Makefile.am:
	Fix cflags/cppflags when in redland

	* librdf/rdf_serializer_raptor.c
	(librdf_serializer_print_statement_as_ntriple):
	No need for fprintf.

	* librdf/rdf_serializer_raptor.c: No need for ntriples.h
	(librdf_serializer_print_statement_as_ntriple): Handle datatyped
	literals.

	* perl/lib/RDF/Redland/Node.pm (new_from_typed_literal):
	Added, creating a datatyped literal.

	* perl/lib/RDF/Redland/Model.pm (add, add_typed_literal_statement):
	Copy the nodes before passing on
	- more natural for perl.

	* librdf/Makefile.am: s/AML_CFLAGS/AM_CFLAGS/
	Give rdf_uri_test the raptor includes

	* librdf/rdf_node.c (librdf_node_decode):
	Correct datatype URI/lang decoded in wrong
	order.
	(main): Add de/encode of datatyped node.

	* librdf/rdf_node.c (librdf_node_encode):
	Copy datatype URI string not junk from the URI
	object.
	(main): Add use of librdf_new_node_from_typed_literal

	* examples/example4.c:
	Added add-typed command to use librdf_new_node_from_typed_literal

	* autogen.sh: Require autoconf 2.53+

	* configure.ac: Require autoconf 2.53+
	Update AC_OUTPUT to new form

	* Redland.i: Added librdf_new_node_from_typed_literal

	* redland-src-config.in:
	use abs_top_srcdir for all refs to raptor-src-config

2003-03-02  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/ex-46.out, raptor/tests/ex-46.rdf:
	make rdf:li and rdf_2 property elements generate different triples

2003-02-27  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/ex-46.out: fix

	* raptor/tests/Makefile.am: Added ex-47

	* raptor/tests/ex-47.out, raptor/tests/ex-47.rdf:
	Exercise all rdfs vocab

	* raptor/tests/Makefile.am: Added ex-46

	* raptor/tests/ex-46.out, raptor/tests/ex-46.rdf:
	Exercise all rdf vocab

2003-02-26  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* python/RDF.py (RDF.set_message_handler): Added. Make a class method
	(message_handler): Moved out of RDF.World class.
	(RDF.World): Use RDF.message_handler
	(RDF.Stream): Docs.

	* librdf/rdf_storage_hashes.c
	(librdf_storage_hashes_node_iterator_create):
	Handle node being NULL,
	for example when dealing with a predicates index p2so.

2003-02-25  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* repat/Makefile.am: Make only librepat.la

	* Makefile.am: Add man pages to dist

2003-02-24  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/win32/raptor.plg, raptor/win32/Makefile.am: deleted raptor.plg

	* raptor/win32/raptor.dsp, raptor/win32/README:
	Updated win32 config - from contributed patches

2003-02-23  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_uri.c: Correct :'s turning into |'s in win32 file URIs

2003-02-20  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* autogen.sh: export autotools to configure

	* autogen.sh: Tidying

	* raptor/autogen.sh, autogen.sh:
	run libtoolize in each configure.ac dir

	* Makefile.am: acconfig.h not needed

	* utils/Makefile.am, repat/Makefile.am, librdf/Makefile.am,
	expat/xmltok/Makefile.am, expat/xmlparse/Makefile.am,
	examples/Makefile.am:
	Updates for automake 1.5-1.7

	* autogen.sh: Update to use automake 1.6, autoconf 2.52 min

	* configure.ac: configure.ac replacing configure.in

	* acconfig.h, configure.in:
	Replace configure.in acconfig.h with configure.ac

	* raptor/win32_config.h:
	win32 has C99 compatible vsnprintf called _vsnprintf

	* raptor/configure.ac:
	Check for vsnprintf and check for C99 compatible return value.

	* raptor/raptor_general.c (raptor_vsnprintf):
	Added for handling compatibilty with vsnprintf
	that doesn't match C99.

2003-02-19  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/Makefile.am:
	Use $(ECHO) which may be different from sh's echo

	* raptor/Makefile.am:
	Changing, moved raptor_getopt.h to rapper_SOURCES after automake
	manual recommendation.

	* raptor/Makefile.am: Put raptor_getopt.h in noinst_HEADERS

	* raptor/Makefile.am: No need for EXTRA_libraptor_la_SOURCES

	* raptor/Makefile.am: Use LTLIBOBJS for extra libraptor objs

	* raptor/raptor.h: again

	* raptor/raptor.h: don't do deprecated on broken OSX gcc

	* raptor/raptor_getopt.h, raptor/getopt.c: No need for prefix

	* raptor/getopt.c: Duh - use raptor getopt header

	* raptor/Makefile.am:
	Use RAPPER_EXTRA_OBJS to optionally add getopt to rapper only

	* raptor/configure.ac: Add getopt object to RAPPER_EXTRA_OBJS

	* raptor/rdfdump.c: Add raptor_getopt.h for local version

	* raptor/raptor_getopt.h: Define rest of getopt externs

	* raptor/getopt.c: More prefixes

	* raptor/raptor_getopt.h, raptor/getopt.c: Public domain getopt

	* raptor/configure.ac: Check for getopt and add getopt.o if it missing.

	* raptor/autogen.sh:
	try asking the progs for their version - slower, but right

	* raptor/autogen.sh: tidying

	* raptor/acconfig.h: acconfig.h obsoleted

	* raptor/Makefile.am: Use AM_CPPFLAGS

	* raptor/autogen.sh:
	Min versions are bumpled - 2.52 for autoconf, 1.6 for automake
	Now hunts for newest, shinyest autoconf and automake/aclocal and uses
	them whatever is available.

2003-02-18  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/configure.ac: autoconf 2.5x configure.ac

	* raptor/configure.in: Replaced with autoconf 2.5x configure.ac

2003-02-15  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor.h: Move stuff around, consolidate deprecated bits

	* raptor/ntriples_parse.c, raptor/rdfdump.c: No need for ntriples.h

	* raptor/raptor.h: Moved all ntriples.h defines here.
	Defined RAPTOR_DEPRECATED (with gcc 3.1+) and used on old api calls.

	* raptor/ntriples.h:
	Moved all definitions to raptor.h - this file is now deprecated.

	* python/RDF.py: typo

2003-02-14  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* debian/changelog, debian/libredland0-dev.install:
	added redland-config.1

	* debian/libredland0-dev.manpages: Added redland-config.1

	* debian/Makefile.am: Added libredland0-dev.manpages

	* Makefile.am: added redland-config.1

	* redland-config.1: redland-config manual page

	* redland-config.in, raptor/raptor-config.in: No exec-prefix

	* raptor/raptor-config.1: Manual page for raptor-config

	* raptor/Makefile.am: Added raptor-config.1

	* debian/Makefile.am: missed a backslash

	* debian/redland1.files, debian/manpage.1.ex, debian/shlibs.local.ex:
	Not used

	* debian/rules.in, debian/copyright, debian/control,
	debian/changelog, debian/README.Debian, debian/Makefile.am:
	Updated for debian packaging 0.9.12

	* debian/libredland0-dev.docs, debian/libredland0-dev.files,
	debian/libredland0-dev.install, debian/libredland0.files,
	debian/libredland0.install, debian/libredland0.manpages:
	Redland debian packaging

	* debian/doc-base.package, debian/docs, debian/dirs: Not used

	* raptor/rapper.1: EXAMPLE

2003-02-13  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Redland.i: Added librdf_node_get_literal_value_datatype_uri

	* raptor/tests/Makefile.am: $name=>$$name

	* configure.in: Bumped version to 0.9.13

	* Snapshotted redland_0_9_12 for 0.9.12 release

	* NEWS.html: Updated for 0.9.12 release

	* raptor/raptor.spec.in: release is 1

	* raptor/NEWS.html: Updated for 0.9.8 release

2003-02-12  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/redland.spec.in, Makefile.am: No RELEASE, TODO

	* raptor/Makefile.am: Restore LICENSE.txt

	* raptor/Makefile.am: No LICENSE.txt in dist

	* raptor/README.html: Updated for 0.9.8 release.

	* README.html: No LXR.
	Fix mailing list link.

	* README.html: Point to new mailing list page

	* raptor/TODO.html: Note some missing conformance bits.

	* java/org/librdf/redland/Makefile.am: Add Hash.ajva to dist

	* librdf/redland.spec.in:
	Move man pages around.  All headers now in devel.

	* docs/README.html: Updated for 0.9.12 release

	* librdf/redland.spec.in: Don't put raptor man files in this rpm

	* librdf/redland.spec.in: Require raptor 0.9.8

	* raptor/raptor_uri.c (main):
	Use lstat, reading a selection of dirs to try harder to test
	relative file URIs.

	* raptor/configure.in: check for sys/stat.h (for raptor_uri_test main)

	* raptor/TODO.html: Note PNG parser

	* raptor/tests/Makefile.am: There is no portable test == operator

	* raptor/TODO.html: Fixed xmlns:foo="" being erroneously allowed.

	* raptor/raptor_parse.c (raptor_xml_start_element_handler):
	Updated call to
	raptor_namespaces_start_namespace to use error_handler, error_data
	parameters

	* raptor/raptor_general.c (raptor_start_parse):
	Updated call to raptor_namespaces_init to use
	error_handler, error_data parameters

	* raptor/raptor_internal.h:
	Updated raptor_namespaces_init, raptor_namespaces_start_namespace,
	raptor_namespace_new with error_handler, error_data parameters

	* raptor/raptor_namespace.c: (raptor_namespaces_init,
	raptor_namespaces_start_namespace, raptor_namespace_new) 
	Add error handler and data parameters and use to explain how
	xmlns:foo="" isn't allowed

	* utils/Makefile.am: Add update-api-0912.pl to dist

2003-02-11  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_parse.c:
	multiple objects of a property element (statement) is an error

	* raptor/tests/Makefile.am:
	Report warnings when they occur.  Print the warning text

	* raptor/tests/bad-11.rdf: now xml

	* raptor/tests/Makefile.am: typo - restult

	* raptor/tests/bad-11.rdf:
	Check xmlns with no namespace name (URI) fails

	* raptor/tests/Makefile.am: Added bad-11

	* raptor/TODO.html: diagnosed crash on empty xml namespace name (URI)

	* raptor/TODO.html: Fixed empty docs now give error, not crash.

	* raptor/raptor_libxml.c (raptor_libxml_update_document_locator):
	Handle empty parser context.

	* raptor/tests/Makefile.am: ex-46 now bad-10

	* raptor/tests/bad-10.rdf, raptor/tests/ex-46.rdf,
	raptor/tests/ex-46.out: Now bad-10

	* raptor/raptor_parse.c (raptor_xml_parse_chunk_):
	Make an empty rdf/xml bytestream an
	illegal doc (like expat) and return an error.

	* raptor/TODO.html: Clarified empty files bug

	* raptor/raptor_libxml.c (raptor_libxml_update_document_locator):
	Don't use loc if it is NULL
	such as errors before start of XML document.

	* raptor/raptor_libxml.c:
	Check for xmlSAXHandler externalSubset field, not present in old
	libxml v1.  Whether raptor works after this is unlikely and untested.

	* raptor/configure.in: Add old libxml V1 warning and suggestion

	* raptor/acconfig.h: Added RAPTOR_LIBXML_XMLSAXHANDLER_EXTERNALSUBSET

	* raptor/configure.in: Check for xmlSAXHandler externalSubset field

	* raptor/INSTALL.html: Added libxml1 warning

	* INSTALL.html:
	Sec 3: Updated to reflect source re-org.  Point at other lang
	examples.

	* raptor/TODO.html: note some bugs

2003-02-10  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_locator.c (raptor_print_locator):
	Only print non-negative line numbers

	* raptor/raptor_parse.c (raptor_xml_parse_chunk_):
	For libxml, handle first chunk being
	empty, when the XML parser context, xc, is attempted to be initialiased

	* raptor/tests/Makefile.am:
	Added ex-46 (Empty file should give 0 triples)

	* raptor/tests/ex-46.out, raptor/tests/ex-46.rdf:
	Empty file should give 0 triples

2003-01-31  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* NEWS.html, RELEASE.html: Note redland-db-upgrade

	* Makefile.am: utils now has buildable stuff

	* librdf/rdf_hash_bdb.c:
	Make BDB open failures return librdf_error even when debug set.

	* configure.in, Makefile.am, RELEASE.html, NEWS.html: scripts now utils

	* utils/Makefile.am, utils/db_upgrade.c, utils/update-api-0912.pl:
	scripts now utils, added redland-db-upgrade util

	* librdf/redland.spec.in: Added redland-db-upgrade

2003-01-30  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.in: don't destroy passed in LDFLAGS value

2003-01-29  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* tcl/Makefile.am:
	Fix so it doesn't compile over the input file.  Bad $? / $< again

	* java/org/librdf/redland/Model.java:
	(add/remove) Added contexts version of methods
	(context_remove): Added, remove all statements with given context.

	* java/Makefile.am: $< wrong for build jars, add all files

	* python/RDF.py:
	(Model) Added contexts methods, as optional args to add/remove
	statements methods.
	New method: context_remove_statements

	* perl/lib/RDF/Redland/Model.pm (add_statement, add_statements,
	remove_statement): Add optional context arg.
	(remove_context_statements): Added.

	* configure.in:
	Make xml parser prefer libxml, to match what raptor does.  Expat will
	be added if required/available anyway, such as for repat.
	If expat is needed for raptor, ensure it uses system expat first if
	available rather than always use source version.

	* INSTALL.html, README.html: Updates for 0.9.12 release

	* php/php.ini: added safe_mode = Off, says Ron

	* docs/java.html: New Jena URL, removed older java apis, Added KAON

	* docs/php.html: Updated RDF API for PHP details, words

	* autogen.sh: require swig 1.3.14 min

	* LICENSE.html, docs/api.sgml.in, docs/fix-python-xhtml,
	docs/fix-pod-xhtml: dates

	* NEWS.html, RELEASE.html, configure.in, Makefile.am:
	Renamed aux dir to scripts

	* scripts/Makefile.am, scripts/update-api-0912.pl: Moved from aux dir

2003-01-27  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* tcl/Makefile.am, ruby/Makefile.am, raptor/Makefile.am,
	python/Makefile.am, perl/Makefile.am, java/Makefile.am,
	docs/Makefile.am, php/Makefile.am:
	Remove $? and replace with $< or full dependencies

	* RELEASE.html: Note about get_object

2003-01-23  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_storage_hashes.c (librdf_storage_hashes_register):
	Return correct failure sense.

	* librdf/rdf_storage_hashes.c (librdf_storage_hashes_terminate):
	Protect from empty arrays

	* librdf/rdf_storage_hashes.c (librdf_storage_hashes_register):
	Don't leak full_name memory when
	librdf_new_hash fails.

	* librdf/rdf_storage_hashes.c (librdf_storage_hashes_init_common):
	On failure to create lower level
	hashes, don't free stuff here, librdf_storage_hashes_terminate will
	do it, eventually.

2003-01-21  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/ntriples_parse.c:
	Fix macro IS_ASCII_DIGIT which refused to allow '0'.

2003-01-13  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/rdfdump.1: rdfdump.1 renamed to rapper.1

	* librdf/redland.spec.in:
	Updated for redland 0.9.12 (requires installed raptor to build)

	* raptor/raptor.spec.in,
	raptor/tests/Makefile.am, raptor/TODO.html, raptor/README.html,
	raptor/NEWS.html, raptor/Makefile.am, raptor/INSTALL.html:
	rdfdump now rapper

	* raptor/rapper.1: rdfdump.1 renamed to rapper.1

2003-01-07  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_parser_sirpac.c: No longer needed

2003-01-03  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* examples/Makefile.am: tweak clean

	* librdf/rdf_model.c:
	(librdf_model_get_source,librdf_model_get_target,librdf_model_get_arc):
	Return a new copy of the shared node, restoring the declared API
	behaviour.

	* NEWS.html: Updates for 0.9.12 release

	* Makefile.am: Added RELEASE.html RELEASE

	* librdf/rdf_parser_repat.c
	(librdf_parser_repat_parse_file_into_model): Tidy up internal stream
	after add_statements no longer frees it.

	* librdf/rdf_parser_raptor.c
	(librdf_parser_raptor_parse_file_into_model): Tidy up internal stream
	after add_statements no longer frees it.

2003-01-02  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* examples/example4.c: Revert temporary context dbd-store ifdef

	* librdf/rdf_node.c (librdf_new_node_from_typed_literal):
	Docucomment fix

2003-01-01  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/api.sgml.in: Added general query, serializer doc parts

	* aux/update-api-0912.pl: Add model add_statement changes checks

	* aux/update-api-0912.pl: Docs

	* aux/update-api-0912.pl: Try to catch stream/iterator api changes too

2002-12-28  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Redland.i: Added model methods for add/remove/serialize contexts.

	* examples/example4.c: Updated to test contexts (not enabled by
	default) and print out context nodes of results (always, when they
	are present).

	* Redland.i, python/RDF.py, perl/lib/RDF/Redland/Stream.pm,
	perl/lib/RDF/Redland/Iterator.pm,
	java/org/librdf/redland/Stream.java,
	java/org/librdf/redland/Iterator.java: Updated Stream, Iterator
	classes with context methods returning a Node

	* librdf/rdf_storage_list.c: All experimental group methods now
	context.  List now always stores a small struct instead of a
	statement (less conditional code at a small overhead of
	alloc/dealloc).
	(librdf_storage_list_init): Use contexts on user option
	("contexts").
	(librdf_storage_list_node_equals): Added for comparing the list
	node structs.

	* librdf/rdf_storage_hashes.c: All experimental group methods now
	context.
	(librdf_storage_get_hash_description_by_name): Now used, returning
	a librdf_hash_descriptor.
	(librdf_storage_hashes_register): Added, for registering the
	hashes more dynamically.
	(librdf_storage_hashes_init_common): Use
	librdf_storage_hashes_register to index predicates, contexts on
	user option ("index-predicates", "contexts").

	Use librdf_statement_encode_parts and
	librdf_statement_decode_parts to de/en-code with context node if
	necessary.
	(librdf_storage_hashes_serialise*): Hold knowledge if current
	deserialized statement is fresh and only do once on demand.

	* librdf/rdf_model.c: All experimental group methods now context.
	(librdf_model_print): Docs
	(librdf_model_add_statements): Does not free stream at end of
	work.
	(main): Demo updated to use context+nodes (not group+uris)

	* librdf/rdf_model.h, librdf/rdf_storage.c, librdf/rdf_storage.h:
	All experimental group methods now context.

	* librdf/rdf_stream.c (librdf_stream_print): Docs.  Prints
	contexts of statements if there are any.

	* librdf/rdf_statement.c (librdf_statement_print): Docs
	(librdf_statement_encode): Update for changed
	librdf_statement_encode_parts.
	(librdf_statement_encode_parts): Takes context node arg.
	(librdf_statement_decode): Uses librdf_statement_decode_parts.
	(librdf_statement_decode_parts): New, takes context node arg.

	* librdf/rdf_statement.h: Prototype for
	librdf_statement_decode_parts Statement ID, FLAGS parts gone (were
	never used)

	* librdf/rdf_node.c (librdf_node_print): Docs

2002-12-22  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_uri.c:
	(main) Try test again with /etc - surely that is least likely to
	be a symlink?

	* raptor/tests/Makefile.am: check-bad-rdf: turn off bourne shell
	exiting while running tests expected to fail.

	* raptor/tests/Makefile.am: Set baseuri from test file basename;
	ensure no dirs are in the base URI

	* Makefile.am: Added acconfig.h to dist - some automake versions
	don't do this automatically such as 1.4-p5 which comes with Redhat
	7.3

	* java/org/librdf/redland/Makefile.am, java/Makefile.am:
	coreJNI.java is not for dist

	* perl/test.pl: test.pl now t/*.t

	* librdf/Makefile.am: No need for ex1.rdf ex2.rdf in deps

	* librdf/Makefile.am, librdf/ex1.rdf, librdf/ex2.rdf: Remove test
	files; generated from strings in rdf_model.c (main) when needed

	* librdf/rdf_model.c (main): Create test files from string content
	here rather than rely on ex1.rdf and ex2.rdf being present.

	* librdf/rdf_parser_repat.c, librdf/rdf_parser_raptor.c: Don't
	declare extern errno, the optional errno.h header does that.

	* librdf/rdf_parser_repat.c, librdf/rdf_parser_raptor.c: Include
	errno.h if present to get the write definition.

	* configure.in: check for errno.h (again?)

	* perl/Makefile.am: Fix for 5.8 install

2002-12-21  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/configure.ac: Removed just for now

2002-12-20  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/NEWS.html: tweak

	* raptor/configure.in: Bumped version to 0.9.8

	* raptor/NEWS.html: date

	* raptor/raptor.spec.in: Updated for 0.9.7 release

2002-12-19  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/INSTALL.html, raptor/README.html, raptor/NEWS.html:
	Updated for 0.9.7 release

	* raptor/acconfig.h: Seems like PACKAGE and VERSION are not needed
	here, and later autoconfs generate headers that moan.

	* raptor/raptor_parse.c, raptor/raptor_general.c: castings

	* raptor/raptor.h: Indent CPP directives after column 1 # for lame
	C compiler

	* raptor/tests/Makefile.am: test(1) string equality is = not ==

	* docs/stylesheet.css: Remove some of the boxes in sidebar; turn
	category header to white on blue.

2002-12-18  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/autogen.sh: Delete autom4te too

	* raptor/configure.ac: auto-configure source for newer autoconfs

2002-12-16  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_uri.c (main): Use /bin to test, seems more likely
	to be around on more posix systems such as OSX

	* raptor/raptor_parse.c (raptor_generate_statement): Handle NULL
	reified being passed.
	(raptor_process_property_attributes): Property attributes are
	never reified explicitly but may be in a bag.
	(raptor_start_element_grammar,raptor_end_element_grammar): Turn
	bad uses of bag:ID into errors not warnings.

	* raptor/tests/Makefile.am: Added more bag:ID checks (44-45) and
	errors (bad 05-09) Make test failures stop the 'make check'.

	* raptor/tests/bad-05.rdf, raptor/tests/bad-06.rdf,
	raptor/tests/bad-07.rdf, raptor/tests/bad-08.rdf,
	raptor/tests/bad-09.rdf, raptor/tests/ex-48.rdf,
	raptor/tests/ex-49.rdf, raptor/tests/ex-50.rdf,
	raptor/tests/ex-46.rdf, raptor/tests/ex-47.rdf,
	raptor/tests/ex-48.out, raptor/tests/ex-49.out,
	raptor/tests/ex-50.out, raptor/tests/ex-46.out,
	raptor/tests/ex-47.out: Turned rdf:bagID property element checks
	into errors

	* raptor/raptor_parse.c: Add rdf:bagID checks - only allow it in
	the two cases it is in the grammar - on a node element and an
	empty property element.  Otherwise emit warnings since there is no
	error test case yet.

	* raptor/tests/ex-50.out, raptor/tests/ex-50.rdf,
	raptor/tests/ex-44.out, raptor/tests/ex-45.out,
	raptor/tests/ex-46.out, raptor/tests/ex-47.out,
	raptor/tests/ex-48.out, raptor/tests/ex-49.out,
	raptor/tests/ex-44.rdf, raptor/tests/ex-45.rdf,
	raptor/tests/ex-46.rdf, raptor/tests/ex-47.rdf,
	raptor/tests/ex-48.rdf, raptor/tests/ex-49.rdf: Checking rdf:bagID
	ignored on other property element cases

	* raptor/raptor_parse.c (raptor_generate_statement): Handles
	generating a reified statement ID for use with bagID and then
	reiifying the statement too.

	* raptor/tests/Makefile.am: Add ex-43

	* raptor/tests/ex-43.out, raptor/tests/ex-43.rdf: Test rdf:bagID
	when property elements need generated reified ID

	* raptor/raptor_parse.c (raptor_generate_statement): Gain
	bag_element argument, use it throughout to indicate the element to
	find the rdf:bagID if any.
	(raptor_start_element_grammar): Generate _:bagid rdf:type rdf:Bag
	when rdf:bagID appears on node element.

	* raptor/tests/ex-42.out: Correct for actual output order

2002-12-15  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/ex-03.rdf, raptor/tests/ex-03.out: correct this now
	that rdf:bagID support begins to work

	* raptor/tests/Makefile.am: Added ex-42

	* raptor/tests/ex-42.out, raptor/tests/ex-42.rdf: rdf:bagID

	* raptor/tests/bad-04.rdf: Check rdf:ID and rdf:bagID with same
	value fails

	* raptor/tests/bad-02.rdf: Duplicate rdf:ID names

	* raptor/raptor_parse.c: Make debug less chatty about cdata,
	unless RAPTOR_DEBUG_CDATA defined.

	* raptor/raptor_parse.c (raptor_record_ID): Added, notes rdf:ID
	and rdf:bagID values, checks for duplicates (per in-scope
	base-URI).
	(raptor_free_ID_list): Added, frees structure above.
	(raptor_xml_start_element_handler): Handle xml:base using
	raptor_new_uri_for_xmlbase to strip/fix parts that aren't used.
	(raptor_start_element_grammar): Check for illegal rdf:ID,
	rdf:bagID and rdf:nodeID using raptor_valid_xml_ID.  Check for
	duplicate rdf:ID and rdf:bagID values using raptor_record_ID.
	Only allow parsetype "Literal", "Resource" and "Collection", not
	case-equivalents.  Check for and forbid property attributes on a
	literal property elemnent.

	* raptor/Makefile.am: Added raptor_utf8.c

	* raptor/raptor_internal.h: Export less from raptor_utf8.c

	* raptor/raptor_general.c (raptor_valid_xml_ID): Use
	raptor_unicode_is_namestartchar and raptor_unicode_is_namechar.

	* raptor/raptor_utf8.c: Raptor UTF-8 and Unicode support

	* raptor/tests/bad-03.rdf: Check rdf:ID and rdf:bagID values

	* raptor/tests/Makefile.am: Added bad-02 to bad-04

	* raptor/raptor_uri.c (raptor_uri_construct): Internal; constructs
	a uri-ref string from the parts.
	(raptor_new_uri_for_xmlbase): Ad
	(raptor_uri_resolve_uri_reference): Copy reference path across
	when reference URI has one.  Work for path components that are >1
	letter long.
	(raptor_new_uri_for_xmlbase): Added, makes a new uri from an
	existing one, suitable for xml:base (no fragment, query; path must
	be present).
	(main): Make test cases use example.org.  Add checks for the above
	bugs.

	* raptor/raptor.h: Added prototype for raptor_new_uri_for_xmlbase

	* raptor/ntriples_parse.c: raptor_ntriples_unicode_char_to_utf8
	now raptor_unicode_char_to_utf8
	raptor_ntriples_utf8_to_unicode_char now
	raptor_unicode_utf8_to_unicode_char
	(raptor_print_ntriples_string): Allow no delimiter.

	* raptor/raptor_internal.h: Added prototypes for
	raptor_valid_xml_ID Added prototypes for raptor_unicode_is_*
	methods.  The ntriples_* utf8/unicode methods are now
	raptor_unicode_*

	* raptor/raptor_general.c (raptor_print_statement_as_ntriples):
	N-Triples escape URIs (for IRI compatibility).
	(raptor_validate_xml_ID): Added, checks that the syntax of
	attributes matching xml:ID are correct matching
	http://www.w3.org/TR/REC-xml-names/#NT-NCName

	* raptor/rdfdump.c: Exit 1 on error, 2 on warnings.

	* raptor/README.html: Words

2002-12-13  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/ex-41.rdf, raptor/tests/ex-41.out: Add rdf:datatype
	test with xml:lang

	* raptor/raptor_parse.c: Don't care state about numbers

	* raptor/raptor_parse.c (raptor_xml_end_element_handler): Don't
	check for unbalanced XML; the XML parsers do that

	* raptor/raptor_parse.c: Update parser states to match
	http://www.w3.org/TR/rdf-syntax-grammar/ names.  Fix comments to
	also match.  rdf_syntax_terms_info - added to describe forbidden
	nodeEl, propEl, propAttr
	(raptor_forbidden_nodeElement_name,
	raptor_forbidden_propertyElement_name): Added, using above

	* raptor/rdfdump.c: Exit with code 2 if there were warnings.

	* raptor/raptor_parse.c: Zap xml:lang attr

2002-12-12  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* java/Makefile.am: die, extra ;

	* php/Makefile.am: _ not -

	* perl/lib/RDF/Redland.pm (DESTROY): call librdf_perl_world_finish
	at exit.

	* php/Makefile.am: Tidy clean

	* docs/php.html: Updated for current state (not working yet).

	* php/test.php, php/Makefile.am: PHP updates.  Still not working yet.

	* php/php.ini: testing php.ini config

	* docs/ruby.html, docs/tcl.html: Updated, tested

	* tcl/example.tcl: fix stream typo

	* tcl/test.tcl: comment out non-working serializer test

	* python/example.py: fix arg

	* python/example.py: Added serializer code

	* docs/python.html: updated example output

	* tcl/Makefile.am: tidy clean

	* python/RDF.py: consistency things

	* python/RDF.py: Added yet more pydoc

	* python/RDF.py: Added more pydoc

	* docs/python.html: Reference, link ot pydoc/RDF.html

	* docs/fix-python-xhtml: Fix exceptions.html

	* docs/Makefile.am: Added pydoc and pydoc/RDF.html

	* docs/fix-python-xhtml: Fix pydoc output to be xhtml

	* docs/fix-pod-xhtml: minor changes

	* docs/python.html: Added RDFLib.net

	* python/example.py: Fixed for stream updates

	* docs/python.html: Added Serializer class

	* docs/perl.html: moved serializer around

	* docs/perl.html: Updated example output

	* docs/perl.html: Added Serializer class

	* docs/Makefile.am: Added perl POD Serializer

	* perl/example.pl: Tidy, add serializer example.

	* perl/Makefile.am: clean test-out.rdf

	* librdf/rdf_storage_hashes.c (librdf_storage_hashes_find_map):
	Don't free filtered shared statement, just return NULL.

	* docs/java.html: Updated.
	Added Serializer.

	* java/Makefile.am: More javac fixes

	* java/example.java: Tidy up

	* java/Makefile.am:
	Build redland-java.jar for tests and -classpath to use it.

	* java/test2.java:
	Replaced finalize() method with finished() that apps should call
	to release resources since Java never guarantees it is.

	* java/skeleton.java: Added Serializer

	* java/org/librdf/redland/World.java,
	java/org/librdf/redland/URI.java,
	java/org/librdf/redland/Stream.java,
	java/org/librdf/redland/Storage.java,
	java/org/librdf/redland/Statement.java,
	java/org/librdf/redland/Serializer.java,
	java/org/librdf/redland/Parser.java,
	java/org/librdf/redland/Node.java,
	java/org/librdf/redland/Model.java,
	java/org/librdf/redland/Iterator.java: Replaced finalize() method
	with finished() that apps should call to release resources since
	Java never guarantees it is.

	* java/test1.java: free uri after finishing with it

	* java/Makefile.am:
	Added lots of bodges to get around SWIG 1.3.15+ broken Java API.
	sed editing of the generated files to remove the stupid coreJNI
	class.

	* java/org/librdf/redland/Model.java (add - literal):
	Use librdf_model_add_typed_literal_statement

	* java/org/librdf/redland/Stream.java: Updated for stream changes

	* java/org/librdf/redland/Iterator.java: Updated for iterator changes

2002-12-11  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* python/RDF.py:
	Big update, lots of new docucomments, encouraged by pydoc.

	* python/Makefile.am:
	Added build target for RDF.html; should work if pydoc is around.

	* perl/lib/RDF/Redland/Model.pm (add_typed_literal_statement):
	Replacing add_string_literal_statement.

	* perl/Makefile.am: test.pl now in t/* tests dir.

	* configure.in: Added perl/t dir

	* Redland.i: Added librdf_model_add_typed_literal_statement
	to replace librdf_model_add_string_literal_statement

	* librdf/rdf_model.h, librdf/rdf_model.c:
	Added librdf_model_add_typed_literal_statement

	* perl/lib/RDF/Redland/Node.pm: Updated node types

	* python/test/test.py: add some more output messages

	* python/Makefile.am: tidy cleanfiles

	* Redland.i:
	Discovered the %newobject directive; use it to free() returned
	malloc() memory from the *_to_string methods.

	* perl/t/test1.t: Test updates, fixes.

	* perl/t/Makefile.am, perl/t/test1.t, perl/t/test2.t, perl/t/test3.t:
	perl test ftest.pl split into t/test1-3.t

2002-12-10  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* python/test/test.py: test Serializer class

	* python/Makefile.am: Add clean for serializer output

	* python/RDF.py: Serializer class fix

	* raptor/configure.in: Added raptor-config

	* redland-src-config.in: Call raptor/raptor-src-config

	* raptor/Makefile.am: Added raptor-src-config

	* raptor/raptor-src-config.in: raptor-src-config source

	* librdf/rdf_storage_hashes.c
	(librdf_storage_hashes_serialise_get_statement): Clear shared
	statement in context before decoding into it.
	(librdf_storage_hashes_node_iterator_get_method): Clear appropriate
	node/nodes of shared statement before decoding into it.
	For p2so case, use statement2 in context as shared statement result.
	(librdf_storage_hashes_node_iterator_finished): Tidy up shared
	statements or predicate from p2so statement2.
	(librdf_storage_hashes_node_iterator_create) Copy query nodes,
	initialise statement2 for p2so case.
	(librdf_storage_hashes_group_serialise_get_statement): Clear shared
	statement before decoding into it.

	* configure.in, acconfig.h, librdf/rdf_hash.c,
	librdf/rdf_hash_gdbm.c, librdf/rdf_hash_gdbm.h,
	librdf/Makefile.am: GDBM dead

	* examples/example1.c: Revert to memory storage for test

	* examples/example4.c: Do free statements added, used in queries.
	Don't free nodes returned from sources/targets/arcs

	* librdf/rdf_storage_list.c
	(librdf_storage_list_group_serialise_get_statement):
	clear statement of any previous nodes before overwriting.

	* librdf/rdf_statement.c (librdf_statement_decode):
	Revert freeing overwritten nodes; some
	code relies on this for shared nodes.  Use librdf_statement_clear
	before to ensure this.

	* librdf/rdf_storage_list.c:
	Use librdf_stream_map_free_context_handler for calling
	librdf_stream_set_map

	* librdf/rdf_stream.h:
	Added librdf_stream_map_free_context_handler typedef

	* librdf/rdf_serializer.h:
	Added librdf_serializer_serialize_model_to_file

	* librdf/rdf_storage_hashes.c (librdf_storage_hashes_init_common):
	Added 'index-predicates=<boolean>'
	config to turn on p2so index.
	(librdf_storage_get_hash_description_by_name): Comment out, unused for
	now.

	* examples/example1.c (main): Free added statement

	* examples/example1.c (main):
	Don't free shared node returned by iterator

	* librdf/rdf_storage_list.c (librdf_storage_list_find_map):
	Don't free statement on discard, just
	return NULL.

	* java/org/librdf/redland/Makefile.am: Added Serializer.java

	* java/org/librdf/redland/Serializer.java: Java Serializer class

	* python/RDF.py: Added Serializer class (not tested)

	* perl/lib/RDF/Redland/Serializer.pm:
	call librdf_serializer_serialize_model_to_file properly

	* python/RDF.py:
	When building sequences from iterated nodes, copy them.

	* perl/lib/RDF/Redland/Serializer.pm:
	method serialize_model now serialize_model_to_file

	* Redland.i:
	Replaced librdf_serializer_serialize_model with more suitable method
	librdf_serializer_serialize_model_to_file

	* librdf/rdf_serializer.c (librdf_serializer_serialize_model_to_file):
	Added - more suitable for
	calling from other langs than something with a FILE* arg.

	* librdf/PrintConsumer.java, librdf/PrintParser.java:
	Removed java wrapper parsers

	* librdf/rdf_parser.h, librdf/rdf_parser.c, librdf/Makefile.am,
	docs/api.sgml.in, docs/Makefile.am, configure.in, acconfig.h:
	Deleted old parsers: libwww, java sirpac-stanford, java sirpac-w3c

	* librdf/rdf_query.h: Include rdf_query_triples.h internally

	* librdf/rdf_node.h: Added librdf_node_static_iterator_create

	* librdf/rdf_hash.c: doc fix

	* librdf/Makefile.am: added rdf_stream_test rdf_iterator_test

	* librdf/rdf_stream.c (librdf_stream_from_node_iterator*): Changed
	implementation; copy the prototype statement, ensuring no problems
	if it goes away.
	(main): Added, testing librdf_new_stream_from_node_iterator using
	librdf_node_static_iterator_create to make a simple node iterator.

	* librdf/rdf_iterator.c (main): Added, testing general iterator
	features using librdf_node_static_iterator_create

	* librdf/rdf_node.c (librdf_node_static_iterator_is_end,
	librdf_node_static_iterator_next_method,
	librdf_node_static_iterator_get_method,
	librdf_node_static_iterator_finished,
	librdf_node_static_iterator_create): Added, to create an iterator
	over a static array of nodes.  Mostly intended for testing
	iterator code.
	(main): style tweaks.

	* librdf/rdf_storage_hashes.c
	(librdf_storage_hashes_find_statements): Copy the passed in
	statement and use librdf_stream_set_map free map context argument
	to free it when the stream is closed.

	* librdf/rdf_storage_list.c (librdf_storage_list_find_statements):
	Copy the passed in statement and use librdf_stream_set_map free
	map context argument to free it when the stream is closed.

	* librdf/rdf_stream.c (librdf_free_stream): Use free map context
	method if present argument
	(librdf_stream_set_map): Added a free map context method argument

	* librdf/rdf_stream.h: librdf_stream_set_map gains a free context
	method argument

2002-12-09  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/Redland/RSS.pm (properties_with_ns_prefix): Updated
	pod

	* librdf/rdf_statement.c (librdf_statement_init): Zap s,p,o
	pointers
	(librdf_statement_set_subject, librdf_statement_set_predicate,
	librdf_statement_set_object): Revert; don't free old pointers,
	some code is using this to update shared pointers.

	* librdf/rdf_hash.c (librdf_hash_keys_iterator_get_method): Return
	something for the GET_OBJECT method, so that
	librdf_iterator_update_current_element works OK

	* Redland.i: Add some prototypes.

	* librdf/rdf_statement.h, librdf/rdf_statement.c,
	librdf/rdf_node.h, librdf/rdf_node.c, librdf/librdf.h:
	librdf_statement is no longer a type of librdf_node.  This
	implementation issue was never visible or used in the public API.

	* librdf/rdf_statement.c:
	(librdf_statement_set_subject, librdf_statement_set_predicate,
	librdf_statement_set_object): Free any existing node before setting.

	* perl/serialize.pl: More playing, still incomplete.

2002-12-08  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_storage_hashes.c
	(librdf_storage_hashes_add_remove_statement): Remove
	librdf_free_statement from here; wrong place.
	(librdf_storage_hashes_add_statements): Do not statement copy
	before add_statement method.

	* librdf/rdf_storage_hashes.c
	(librdf_storage_hashes_serialise_finished): Clear static
	statement.

	* librdf/rdf_storage_hashes.c
	(librdf_storage_hashes_add_remove_statement): Free passed in
	statement

2002-12-04  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_storage_list.c:
	(librdf_storage_list_group_serialise_finished) Use
	librdf_statement_clear to empty static statment.

	* librdf/rdf_statement.c (librdf_statement_clear): Added, for
	clearing static statements of nodes.
	(librdf_statement_decode): Check/remove existing nodes before
	overwriting them.

	* librdf/rdf_statement.h: Added librdf_statement_clear

	* raptor/raptor_parse.c (raptor_xml_start_element_handler): Save
	away the element attributes in an allocated array, restore the
	pointers later.  This allows the XML parser to free them
	correctly.
	(raptor_xml_end_element_handler): Call raptor_free_qname again to
	tidy up.
	(raptor_init_parser_rdfxml): Initialise libxml2 explicitly
	(raptor_terminate_parser_rdfxml): Added, cleaning up libxml2.

	* raptor/raptor_libxml.c (raptor_libxml_endDocument): free the
	libxml2 Doc that is created but never freed by the SAX methods.

	* raptor/raptor_internal.h, raptor/raptor_general.c: Added
	raptor_terminate_parser_rdfxml() for closing rdfxml parser
	factory.

	* librdf/rdf_stream.c, librdf/rdf_iterator.c: Use is_finished and
	current fields to track when finished/empty.  Rename
	iterator/stream *get_next_mapped* to *update_current*
	element/statement

	* librdf/rdf_storage.c
	(librdf_storage_stream_to_node_iterator_get_method): Do not touch
	fields in shared statement from stream.

	* librdf/rdf_statement.c: Fix comment.

	* librdf/rdf_storage_list.c
	(librdf_storage_list_group_serialise_get_statement): Use iterator
	(hash) value to decode context correctly.

	* librdf/rdf_hash.c (librdf_hash_get_all_iterator_get_method):
	Return something for get_object to enable general iterator to work

2002-12-03  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_libxml.c
	(raptor_libxml_internalSubset,raptor_libxml_externalSubset): No
	return value.

	* raptor/raptor.h: Update prototype for unsigned char arg.

	* raptor/raptor_parse.c: Yet more casts, for expat XML_Char as
	char*

	* raptor/raptor_uri.c (raptor_free_uri): There is no return value

	* raptor/raptor_uri.c, raptor/raptor_qname.c,
	raptor/raptor_parse.c, raptor/raptor_namespace.c,
	raptor/raptor_general.c, raptor/raptor.h, raptor/ntriples_parse.c:
	More unsigned char to char fixes, other castings enough to make
	g++ happy.

	* raptor/raptor_parse.c, raptor/raptor_qname.c,
	raptor/raptor_namespace.c, raptor/raptor_general.c,
	raptor/raptor_internal.h: Use unsigned char for UTF-8 strings
	rather than char (That means all XML names, content, buffers)

	* raptor/raptor_parse.c:
	Delete HAVE_XML_SetNamespaceDeclHandler - never used
	Don't merge expat XML_Char (char) and libxml2 xmlChar (unsigned char).
	Work with unsigned char always.

	* raptor/raptor_internal.h:
	Don't merge expat XML_Char (char) and libxml2 xmlChar (unsigned char).
	Work with unsigned char always.

	* raptor/configure.in, raptor/acconfig.h:
	Delete HAVE_XML_SetNamespaceDeclHandler - never used

	* raptor/raptor_parse.c (raptor_element_has_property_attributes):
	Unused rdf_parser arg
	zapped.

	* raptor/raptor_parse.c (raptor_xml_parse_chunk_):
	Don't assign a negative number to size_t
	len, it is probably unsigned.

	* raptor/raptor_parse.c (raptor_free_element):
	Use raptor_free_uri on datatype URI

	* raptor/raptor_parse.c, raptor/raptor.h:
	Removed trailing ','s in enums

2002-12-02  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_utf8.c:
	Updates for Unicode 3.2 UTF-8 encoding; forbid ranges and encodings
	that aren't used or allowed.

	* raptor/ntriples_parse.c (raptor_ntriples_string): sscanf format lx

2002-11-27  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/INSTALL.html:
	Now works with old libxml 2.3.5 (released 2001-03-23)

	* raptor/raptor_libxml.c (raptor_libxml_init):
	Use RAPTOR_LIBXML_XMLSAXHANDLER_INITIALIZED
	to see if libxml xmlSAXHandler has an initialized field

	* raptor/configure.in: Check libxml xmlSAXHandler has initialized
	field defining RAPTOR_LIBXML_XMLSAXHANDLER_INITIALIZED if so

	* raptor/acconfig.h: Added RAPTOR_LIBXML_XMLSAXHANDLER_INITIALIZED

	* raptor/INSTALL.html: Updated supported versions

2002-11-26  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_utf8.c, librdf/rdf_uri.c, librdf/rdf_stream.c,
	librdf/rdf_storage_list.c, librdf/rdf_storage_hashes.c,
	librdf/rdf_storage.c, librdf/rdf_statement.c,
	librdf/rdf_serializer_rdfxml.c, librdf/rdf_serializer_raptor.c,
	librdf/rdf_serializer.c, librdf/rdf_query_triples.c,
	librdf/rdf_query.c, librdf/rdf_parser_sirpac.c,
	librdf/rdf_parser_repat.c, librdf/rdf_parser_raptor.c,
	librdf/rdf_parser_libwww.c, librdf/rdf_parser.c,
	librdf/rdf_node.c, librdf/rdf_model.c, librdf/rdf_memory.c,
	librdf/rdf_list.c, librdf/rdf_iterator.c, librdf/rdf_init.c,
	librdf/librdf.h, configure.in, raptor/win32_config.h,
	raptor/configure.in, raptor/rdfdump.c, raptor/raptor_uri.c,
	raptor/raptor_parse.c, raptor/raptor_libxml.c,
	raptor/raptor_general.c, raptor/ntriples_parse.c:
	stdarg.h is now a required header.

	* raptor/configure.in, configure.in:
	Added --with-xml2-config to set location of libxml xml2-config program.

	* librdf/rdf_serializer_rdfxml.c: Fix broken comment

	* librdf/rdf_serializer_rdfxml.c: Documentation.  Added some.
	(rdf_serializer_rdfxml_ok_xml_name): Correct the check.

2002-11-25  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_serializer.h: Added librdf_serializer_rdfxml_constructor

	* librdf/rdf_serializer.c: Use librdf_serializer_rdfxml_constructor

	* librdf/rdf_serializer_rdfxml.c: s/stream/handle/ for file handles
	(rdf_serializer_rdfxml_print_as_xml_content): Added to print
	XML-escaped element content
	(rdf_serializer_rdfxml_print_as_xml_attribute): Added to print
	XML-escaped attribute  content
	(rdf_serializer_rdfxml_print_xml_attribute): Added to print attribute
	plus escaped content.
	(librdf_serializer_print_statement_as_rdfxml): Use above to properly
	handle attributes and element content.

	* librdf/Makefile.am: Added rdf_serializer_rdfxml.c

	* librdf/rdf_serializer_rdfxml.c: Dumb RDF/XML Serializer

	* INSTALL.html: Tested with BDB 4.1.24

	* acconfig.h, configure.in, librdf/rdf_hash_bdb.c (librdf_hash_bdb_open):
	Updated to handle BDB V4.1 DB->open which now
	has 7 arguments.

2002-11-24  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_parse.c (raptor_xml_start_element_handler): Don't free
	raptor_free_qname(element_name) here, raptor_free_element does it.

	* perl/lib/Makefile.am, perl/lib/RDF.pm: RDF.pm removed as promised

2002-11-21  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_parser_libwww.c: parse into model always works

	* librdf/rdf_parser_libwww.c: Updated for stream method changes.

	* ruby/example.rb, tcl/test.tcl, tcl/example.tcl,
	python/test/test.py, python/example.py, python/RDF.py,
	perl/lib/RDF/Redland/Stream.pm, perl/lib/RDF/Redland/Model.pm,
	perl/lib/RDF/Redland/Iterator.pm: Updated for stream and iterator
	method changes.

	* perl/test.pl, perl/serialize.pl, perl/example.pl,
	examples/example4.c, examples/example1.c: Updated for stream
	method changes.

	* Redland.i: Updated for stream method changes.
	Added librdf_node_set_typed_literal_value
	Added librdf_stream_get_object, split from librdf_stream_next

	* librdf/rdf_parser_repat.c: Updated for stream method changes.

	* librdf/rdf_parser_raptor.c: Updated for stream method changes.
	(librdf_parser_raptor_get_next_statement): Call Raptor using new
	raptor_parse_chunk API allowing better handling of large content.
	(librdf_parser_raptor_destructor): Added, to tidy up raptor on module
	close.

	* librdf/rdf_storage_list.c, librdf/rdf_storage_hashes.c,
	librdf/rdf_storage.h, librdf/rdf_storage.c: Updated for stream
	method changes.

	* librdf/rdf_parser.h: Added librdf_parser_raptor_destructor

	* librdf/rdf_parser.c (librdf_finish_parser):
	Call librdf_parser_raptor_destructor on
	module close.

	* librdf/rdf_serializer_raptor.c
	(librdf_serializer_print_statement_as_ntriple):
	Updated for N-Triples
	language changes, XML Literal
	(librdf_serializer_raptor_serialize_model): Updated for stream method
	changes.

	* librdf/rdf_serializer.c (librdf_get_serializer_factory):
	Fix call to librdf_uri_equals.

	* librdf/rdf_model.c: (librdf_model_add_statements_group,
	librdf_model_remove_statements_group) Updated for stream method
	changes.

	* librdf/rdf_stream.c:
	Stream changed to more cursor-like, matching Iterator class.
	(librdf_new_stream): Updated args - next_method and get_method
	(librdf_free_stream): Updated for renamed method.
	(librdf_stream_get_next_mapped_statement,
	librdf_stream_end,librdf_stream_next): Updated for new methods.
	(librdf_stream_get_object): Added
	(librdf_stream_get_context): Added
	(librdf_new_stream_from_node_iterator,
	librdf_stream_from_node_iterator_next_statement,
	librdf_stream_from_node_iterator_get_statement): Added / updated for
	stream changes.  Use a static statement instead of creating new ones
	on each call.
	(librdf_stream_print): Updated for stream method changes.

	* librdf/rdf_stream.h:
	Stream changed to more cursor-like, matching Iterator class.
	Split get_next method into get/next methods.
	Added librdf_stream_get_object, librdf_stream_get_context

	* librdf/rdf_iterator.h:
	iterator structure - is_end now is_end_method, finished now
	finished_method

	* librdf/rdf_iterator.c (librdf_new_iterator,librdf_free_iterator):
	Parameter and structure
	renamings; use is_end_method instead of is_end

	* librdf/rdf_uri.c (librdf_uri_equals):
	Added defensive check, any NULL parameters is
	failure.

	* librdf/rdf_statement.c (librdf_statement_init):
	Added stronger usage instructions.

	* librdf/rdf_concepts.h, librdf/rdf_concepts.c: Added rdf:XMLLiteral

	* librdf/rdf_node.h:
	Remove is_wf_xml field, add datatype URI field to node structure
	Added prototypes for:
	librdf_new_node_from_typed_literal,
	librdf_node_get_literal_value_datatype_uri,
	librdf_node_set_typed_literal_value

	* librdf/rdf_node.c (librdf_node_set_typed_literal_value): Added
	(librdf_new_node_from_typed_literal): Added
	(librdf_node_get_literal_value_datatype_uri): Added
	Remove is_wf_xml field, add datatype URI field to node structure
	(librdf_node_equals): Updated for datatypes
	(librdf_node_encode, librdf_node_decode): Added datatyped node
	encoding 'M'.

	* raptor/configure.in:
	Make it use expat sources if this is part of Redland, ../expat dir
	exists and there is no installed expat system library

	* raptor/raptor_parse.c (raptor_xml_parse_chunk_):
	Only use the libxml2 bug workaround for small
	buffers for libxml2 versions lower than 2.4.25

	* raptor/tests/Makefile.am:
	Report error status from standard rdf/xml tests, even if the answer
	was correct.

	* raptor/tests/ex-03.rdf: Remove aboutEach* and bare bagID

2002-11-20  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* php/test.php, php/example.php: Do nothing

	* php/Makefile.am:
	Run test (does nothing so far apart from import Redland)

	* docs/php.html: typo

	* docs/Makefile.am: Added php.html (no API in release though)

	* docs/php.html: PHP API doc

2002-11-19  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/test.out, raptor/tests/test.nt,
	raptor/tests/ex-11.out, raptor/tests/ex-07.out,
	raptor/raptor_parse.c, raptor/raptor_general.c,
	raptor/ntriples_parse.c:
	rdfs:XMLLiteral now rdf:XMLLiteral
	Add rdf:nil to allowed rdf namespace terms

	* raptor/raptor_parse.c: More error/warnings rewordings

	* raptor/raptor_parse.c:
	Remove M&S from some comments, messages.  Use RDF namespace.

	* raptor/raptor_parse.c:
	Improve warning about multiple object nodes for a property element.

2002-11-12  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/Redland/RSS.pm (inchannel):
	Delete; never part of RSS 1.0

2002-11-11  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/Makefile.am, perl/lib/RDF/Stream.pm,
	perl/lib/RDF/URI.pm, perl/lib/RDF/Model.pm, perl/lib/RDF/Node.pm,
	perl/lib/RDF/Parser.pm, perl/lib/RDF/RSS.pm,
	perl/lib/RDF/Statement.pm, perl/lib/RDF/Storage.pm,
	perl/lib/RDF/Iterator.pm:
	Removed old perl namespaced modules

	* Redland.i: Removed duplicate and clashing extern declarations.

2002-11-07  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/test.out: typo

	* raptor/tests/test.nt:
	Remove xml"foo" tests, replacing with "foo"<...> form.

2002-11-06  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/test.out, raptor/tests/ex-11.out,
	raptor/tests/ex-07.out:
	Remove xml"foo" tests, replacing with "foo"<...> form.

	* raptor/raptor_general.c: Remove xml"foo" (stage 1).
	(raptor_print_statement_detailed): Output this as a datatyped literal.
	(raptor_print_statement_as_ntriples): Output the "foo"<..> datatype
	N-Triples form.

	* raptor/ntriples_parse.c:
	Remove xml"foo" (stage 1).  Parsing it works but gives an error.
	Never output.
	(raptor_ntriples_generate_statement): Output "foo"<...> for xml
	literal.  Remove is_xml argument.
	(raptor_ntriples_parse_line): For XML literal (old xml"foo"), parse,
	give an error and emit it in the datatype form.

2002-11-02  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/configure.in: Bumped version to 0.9.7

	* raptor/raptor_parse.c:
	rdf_attr_info gains allowed_unprefixed_on_attribute to suppress warning.

	* raptor/libraptor.3: Updated for 0.9.6

	* raptor/tests/test.out: minor fix

	* raptor/rdfdump.1: Add -a/--assume option.

	* raptor/raptor.h:
	Tweak uri factory method typedefs, prefix with raptor_

	* raptor/raptor.h: raptor_start_parse_file: Made an internal method

	* raptor/raptor_general.c (raptor_start_parse_file):
	Made an internal method

	* raptor/tests/test.nt: minor fix

	* raptor/tests/test.out, raptor/tests/test.nt:
	Added tests for datatyped literals with/without language

	* raptor/ntriples_parse.c (raptor_ntriples_string):
	Added N-Triples datatype (^^<uri-ref>) parsing.

2002-11-01  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/ntriples_parse.c (raptor_ntriples_generate_Statement):
	Added datatypes argument,
	will set the URI if the string is passed in.

2002-10-31  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_parse.c:
	Check for rdf:datatype on property/member elements

	* raptor/tests/Makefile.am: Added ex-41

	* raptor/tests/ex-41.out, raptor/tests/ex-41.rdf:
	Added rdf:datatype tests

	* raptor/raptor_parse.c (raptor_free_element): Free xml:lang values

	* raptor/raptor_parse.c:
	alternatively, don't zap the pointer and let cleanup grab it.

	* raptor/raptor_parse.c:
	free rdf:about attribute value before discarding pointer.

	* raptor/raptor_general.c (raptor_parse_file): Always free filename.

	* raptor/raptor_uri.c (raptor_uri_filename_to_uri_string):
	Fix length of buffer
	for unix when file name is recalculated from getcwd().

	* raptor/raptor_namespace.c (raptor_namespaces_free):
	Don't need non-NULL context to do freeing.

	* librdf/rdf_parser_raptor.c (librdf_parser_raptor_constructor):
	raptor_init(), not just URI class.

	* raptor/ntriples_parse.c:
	Update to handle xml"string"@lang format (and warn about older one)

	* raptor/ntriples_parse.c:
	Update to handle "string"@lang format (and warn about older one)

	* raptor/tests/test.out, raptor/tests/test.nt,
	raptor/tests/rdfs-namespace.out, raptor/tests/rdf-schema.out,
	raptor/tests/ex-29.out:
	Update to "string"@lang format.

	* raptor/raptor_general.c (raptor_print_statement_as_ntriples):
	Update to "string"@lang format.
	Add datatype URI.

	* raptor/rdfdump.c (main): Init uri_string variables

	* raptor/raptor_internal.h, raptor/ntriples_parse.c,
	raptor/raptor_namespace.c, raptor/raptor_parse.c,
	raptor/raptor_qname.c, raptor/raptor_uri.c,
	raptor/raptor_general.c, raptor/raptor_libxml.c: 
	LIBRDF_ macros now RAPTOR_

	* raptor/raptor_internal.h: Remove raptor_uri_init

	* librdf/rdf_parser_raptor.c: Update to new raptor API

	* raptor/raptor.h: Added raptor_uri_init

	* raptor/raptor_namespace.c:
	(main) Updates for initialising URI class in/outside redland

	* raptor/rdfdump.c: When RAPTOR_IN_REDLAND, include <librdf.h>

	* raptor/rdfdump.c: Use raptor URI calls.
	Use raptor_init/raptor_finish - now required.

	* raptor/raptor_general.c (raptor_init): Now compulsory

	* raptor/raptor_parse.c, raptor/raptor_locator.c,
	raptor/raptor_namespace.c:
	macro RAPTOR_URI_AS_STRING -> raptor_uri_as_string

	* raptor/raptor_internal.h: Removed macro RAPTOR_URI_AS_STRING

	* raptor/raptor_general.c:
	macro RAPTOR_URI_AS_STRING -> raptor_uri_as_string

	* raptor/raptor.h: Added raptor_uri_as_string and uri class method

	* librdf/rdf_parser_raptor.c (librdf_raptor_uri_as_string):
	Added, registered for raptor uri
	class.

	* raptor/raptor_uri.c (raptor_default_uri_as_string): Added
	(raptor_uri_as_string): Added, using above for default class.
	(raptor_uri_init_default_handler): Register the above

	* raptor/raptor_general.c:
	Use RAPTOR_URI_AS_STRING for getting uri string to make a filename.

	* raptor/raptor_parse.c:
	Remove uses of IS_RDF_MS_CONCEPT with raptor_uri_equals.
	Define more concepts for rdf:RDF, rdf:Description and rdf:li

	* raptor/raptor_internal.h: remove IS_RDF_MS_CONCEPT

	* raptor/raptor_qname.c: macro RAPTOR_FREE_URI -> raptor_free_uri

	* raptor/raptor_internal.h:
	delete macros RAPTOR_FREE_URI, RAPTOR_URI_TO_FILENAME

	* raptor/raptor_general.c: macro RAPTOR_FREE_URI -> raptor_free_uri
	macro RAPTOR_URI_TO_FILENAME -> raptor_uri_uri_string_to_filename
	(only use)

	* raptor/ntriples_parse.c: macro RAPTOR_FREE_URI => raptor_free_uri

	* raptor/raptor_uri.c:
	Add some casts now raptor_uri is a typedef for void*

	* raptor/raptor_internal.h, raptor/raptor.h:
	Remove more RAPTOR_IN_REDLAND prototypes

	* raptor/ntriples.h: Remove more RAPTOR_IN_REDLAND

	* raptor/rdfdump.c: Remove more RAPTOR_IN_REDLAND and old API

	* raptor/raptor_parse.c:
	Re-add DAML Collection info to rdf_content_type_info table - just
	plain luck that this was working without it.
	Add concept URIs table to rdf_xml_parser structure.
	Change concepts macros to point to the parts of that table.
	Remove most of the RAPTOR_IN_REDLAND stuff, consequently.

	* raptor/raptor_namespace.c (raptor_namespaces_free):
	Handle being called when handler/context
	empty.

	* raptor/raptor_namespace.c:
	Use raptor_namespace struct  raptor_namespace_stack field
	to get uri handler/context

	* raptor/raptor_internal.h:
	raptor_namespace: add raptor_namespace_stack field

	* raptor/raptor_general.c (raptor_start_parse):
	Use changed raptor_namespaces_init call.

	* raptor/raptor_namespace.c:
	Remove RAPTOR_REDLAND code and use uri_handlre/context args
	(raptor_namespaces_init): Now takes uri handler, context args.
	Initialises rdf/rdfs namespace URIs.
	(raptor_namespaces_free): Free rdf/rdfs namespace URIs.

	* raptor/raptor_general.c: Remove RAPTOR_REDLAND code
	Call raptor_namespaces_init with raptor URI handler, context

	* raptor/raptor_internal.h:
	Remove RAPTOR_REDLAND definitions and double prototypes.
	Added uri_handler, uri_context, rdf_ms_uri, rdf_schema_uri to
	raptor_namespace_stack.

	* raptor/ntriples_parse.c: Remove RAPTOR_REDLAND code

	* raptor/raptor_uri.c (raptor_uri_get_handler): Added

	* raptor/raptor.h: Added raptor-uri_get_handler.

	* raptor/raptor_uri.c:
	rename raptor_current_uri_* -> raptor_uri_current_*

	* librdf/rdf_parser_raptor.c:
	Added raptor uri factory initialisation calls, untested yet.

	* raptor/raptor_uri.c:
	Use raptor_current_uri_handler, raptor_current_uri_context
	throughout.

2002-10-30  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_uri.c (raptor_uri_set_handler):
	Added, initialising the static
	variables raptor_current_uri_handler, raptor_current_uri_context.
	raptor_init_uri_class -> raptor_uri_init

	* raptor/raptor_general.c, raptor/raptor_internal.h:
	raptor_init_uri_class -> raptor_uri_init

	* raptor/raptor.h: Added raptor_uri_set_handler

	* raptor/raptor_uri.c: raptor_copy_uri -> raptor_uri_copy
	(raptor_default_uri_copy): Added
	(raptor_init_uri_default_handler): Added to re-init the default uri
	class.
	(raptor_init_uri_class): To initialise the uri class with default
	handler

	* raptor/raptor_internal.h: Declare uri class init prototypes.

	* raptor/raptor_parse.c, raptor/raptor_general.c:
	raptor_copy_uri -> raptor_uri_copy

	* raptor/raptor.h: raptor_copy_uri -> raptor_uri_copy
	Added uri handler func definitions.
	Added raptor_uri_handler, using above funcs

2002-10-15  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_qname.c:
	Remove only RAPTOR_IN_REDLAND use - not required.

	* raptor/raptor_uri.c: Updated copyright

	* raptor/ntriples_parse.c:
	Removed raptor_make_uri; use raptor_new_uri_relative_to_base directly.

	* raptor/raptor.h: Removed raptor_new_uri_from_base_name prototype

	* raptor/raptor.h: Removed all raptor_make_uri prototypes.
	Added prototypes for raptor_new_uri_relative_to_base,
	raptor_new_uri_from_id, raptor_new_uri_from_base_name,
	raptor-new_uri_for_rdf_concept.

	* raptor/raptor_parse.c:
	RAPTOR_FREE_URI (macro) to raptor_free_uri (method)
	Removed raptor_make_uri; use raptor_new_uri_relative_to_base directly.
	Removed raptor_make_uri_from_id: use raptor_new_uri_from_id directly
	Use raptor_new_uri_for_rdf_concept

	* raptor/raptor_uri.c: Typo.
	Removed raptor_make_uri; use raptor_new_uri_relative_to_base directly.
	(raptor_default_new_uri_for_rdf_concept,
	raptor_new_uri_for_rdf_concept): Added to get URI of rdf:thing

2002-10-13  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_uri.c (raptor_default_new_uri_relative_to_base, raptor_new_uri_relative_to_base):
	Added
	(raptor_new_uri_from_id): Added, was make_uri_from_id
	(raptor_new_uri_from_base_name): Added, was make_uri_from_base_name

	* raptor/raptor.h:
	Added new uri methods, soon-to-be old make_uri_* ones

	* raptor/raptor_internal.h: Move uri calls to raptor.h

	* raptor/raptor_parse.c:
	Remove unused rdf_parser argument of raptor_make_uri_from_id calls.

	* raptor/raptor_uri.c (raptor_make_uri_from_id):
	Remove unused rdf_parser argument

	* raptor/raptor_uri.c:
	Start of skeleton code for URI class, along with default methods.
	(raptor_default_new_uri, raptor_new_uri): Added
	(raptor_default_new_uri_from_uri_local_name,
	raptor_new_uri_from_uri_local_name): Added
	(raptor_default_free_uri,raptor_free_uri): Added
	(raptor_default_uri_equals, raptor_uri_equals): Added
	(raptor_make_uri, raptor_make_uri_from_id,
	raptor_make_uri_from_base_name):Moved from raptor_general.c

	* raptor/raptor_general.c:
	Move raptor_make_uri, raptor_make_uri_from_id,
	raptor_make_uri_from_base_name to raptor_uri.c

2002-10-12  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_parse.c (raptor_xml_parse_terminate):
	Moved all of raptor_xml_parse_clean
	here, deleted it.

	* raptor/rdfdump.c:
	Updated to newest calling API - no special ntriples calls.

	* raptor/raptor_general.c, raptor/raptor.h:
	Tweak raptor_new_parser prototype.

	* raptor/libraptor.3: Updated to describe features

	* raptor/libraptor.3: Updated for shared parser core api

	* raptor/raptor_parse.c: Add raptor_xml_parser here - private struct.

	* raptor/raptor_internal.h: Moved raptor_xml_parser to private file.

	* raptor/raptor_general.c: Tidy raptor_new old api note.

	* raptor/ntriples.h: Updated ntriples parser to new registering API.

	* raptor/ntriples_parse.c: Converted to the new factory-based API.
	raptor_ntriples_parser_context (and struct version _s) now allocated
	by main parser code.
	Use raptor_parser for most methods and calls.
	(raptor_ntriples_parse_init, raptor_ntriples_parse_terminate): Added
	(raptor_ntriples_new): Replaced with wrapper around raptor_new_parser("ntriples").
	(raptor_ntriples_free): Replaced with wrapper around raptor_free_parser
	(raptor_ntriples_set_error_handler, raptor_ntriples_set_fatal_error_handler,
	raptor_ntriples_set_statement_handler, raptor_ntriples_parser_error,
	raptor_ntriples_parser_fatal_error, raptor_ntriples_parse_file):
	Replaced with wrappers around general methods.
	(raptor_ntriples_parse_chunk): Renamed from raptor_ntriples_parse
	(raptor_ntriples_parse_start): Added from parts of old
	raptor_ntriples_parse_file.
	(raptor_ntriples_parser_register_factory): Added to register this
	with the main system.
	(raptor_init_parser_ntriples): Added to register this module.

2002-10-11  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_internal.h:
	Moved raptor_parser_s here, for use across the library.
	Lots of rearranging and reordering to move structs earlier.
	Added raptor_parser_factory_s and typedef.
	Added prototypes for factory registration calls.

	* raptor/raptor_parse.c: Now uses factory and parser-specific context.
	(raptor_xml_new, raptor_xml_free, raptor_xml_parse_init): Moved most
	code to raptor_new_parser, raptor_free_parser, raptor_start_parse
	(raptor_xml_parse_init_file): Gone.
	Renamed to match factory methods - raptor_xml_parse_terminate.
	(raptor_parse_file): Moved to raptor_general.c
	(raptor_xml_parser_register_factory): Added, for registering factory.
	(raptor_init_parser_rdfxml): Register parser type "rdfxml".

	* raptor/raptor_general.c:
	Added parser factory functions and use them via new API.
	(raptor_init, raptor_finish): Added to start/end raptor.
	(raptor_delete_parser_factories): Added, helper for cleanup.
	(raptor_parser_register_factory): Added, for registering parsers
	(raptor_get_parser_factory): Added, helper for finding a parser
	(raptor_new_parser): New constructor, uses factory and initialises
	only general parts of parser.
	(raptor_start_parse): New method to (re)initialise a particular
	parse.
	(raptor_start_parse_file): New method to start parsing from a
	filename.
	(raptor_parse_chunk): New method to parse content from memory.
	(raptor_free_parser): New destructor.
	(raptor_parse_file): Moved from raptor_parse.c and made general.
	(raptor_new): Old API constructor, now written over new constructor.
	(raptor_free): Old API destructor, now just calls new destructor.
	(raptor_set_world): Temporary redland support.

	* raptor/raptor_namespace.c (raptor_namespaces_free):
	Zap top of stack when done, so
	can work when called multiple times.

	* raptor/raptor.h: Added raptor_init(), raptor_finish()
	Deprecate raptor_new(), raptor_free().
	Added raptor_new_praser(), raptor_free_parser(),
	raptor_start_parser(), raptor_start_parse_file(), raptor_parse_chunk()
	Temporarily use raptor_set_redland_world.

2002-10-10  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/Makefile.am: Added raptor_general.c

	* raptor/raptor.h: raptor_print_statement_detailed: Now public.

	* raptor/raptor_internal.h, raptor/raptor_parse.c,
	raptor/raptor_general.c:
	Split general parsing routines into raptor_general.c leaving
	the rdf/xml parsing specific parts in raptor_parse.c.
	The general raptor_parser structure moved to raptor_internal.h
	leaving a new raptor_xml_parser for raptor_parse.c [rdf/xml].

2002-10-07  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/test.html, raptor/tests/test.svg: Embedded rdf:RDF
	tests

	* raptor/raptor_general.c, raptor/raptor_parse.c:
	Call dummy (length calculating) vsnprintf call with a 1-byte buffer
	rather than NULL - OSX seems unhappy with that.
	Try to get rdf:RDF scanning working by adding at_grammar_start check
	rather than apply at all state unknown points.

2002-09-30  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* php/Makefile.am: PHP interface

	* configure.in, Makefile.am: Added php interface

2002-09-29  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/Makefile.am:
	Split the checks into classes; ex-19.rdf is for when rdf is assumed
	since it ommits rdf:RDF, and hence is not really rdf/xml.

	* raptor/rdfdump.c: Added -a,--assume to set feature assume_is_rdf

	* raptor/raptor_general.c, raptor/raptor_parse.c:
	Added rdf:datatype built in.
	Literal datatype URI stored in containing property element.
	Added feature_assume_is_rdf to make rdf:RDF optional.
	(raptor_generate_statement): Add literal datatype URI argument.
	(raptor_xml_parse_chunk_): Return parser errors in initial XML_Parse
	correctly - check if it happens even if end of data.  Similarly for
	libxml's xmlParseChunk.
	(raptor_set_feature): Added feature assume_is_rdf
	(raptor_print_statement_detailed): Added literal datatype URI
	printing.
	(raptor_process_property_attributes): Warn about unqualified
	(property) attributes, don't try to process them.
	(raptor_start_element_grammar): Added feature assume_is_rdf
	splitting scanning for rdf:RDF (feature scanning) and ignoring it
	(feature assume)

	* raptor/raptor_qname.c (raptor_new_qname):
	Don't die on non-namespaced XML; could be used in
	skipping or other processing.

	* raptor/raptor.h: added assume_is_feature
	datatypes built in
	raptor_print_ntriples_string now returns an int

	* raptor/LICENSE.html: Tidy intro, update dates

	* raptor/ntriples_parse.c: change anon->bnodeid
	Add ASCII rather than is* locale-tests and validate bnodeIDs with
	the macros
	(parse_ntriples_string): Check for invalid ASCII chars.
	Tidy error reporting for end of line.
	(raptor_ntriples_parse_line): Add validation of bnodeIDs
	(raptor_ntriples_parse_file): Comments
	(raptor_print_ntriples_string): Handle failure, add a return code

	* raptor/ntriples.h: change anon->bnodeid

	* raptor/configure.in: datatypes built in now

	* raptor/Makefile.am: Clean the test programs

2002-09-27  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/Makefile.am:
	Updates to make swig re-run and build lib/RDF/Redland/CORE.pm when
	it is needed.

	* python/RDF.py:
	Check for == None as well as == "NULL" as return from SWIG methods.
	(Change to the SWIG calling convention in newer version)

2002-09-19  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* NEWS.html: Update old N-Triples link

	* raptor/Makefile.am:
	Restore rule to make librdf.la for when embedded in Redland

	* raptor/raptor_libxml.c (raptor_libxml_init):
	Enable handling of cdata blocks -
	<![CDATA[...]> by registering callback to raptor_xml_cdata_handler

	* raptor/tests/ex-40.out: Fix node

	* raptor/tests/Makefile.am: Added ex-40

	* raptor/tests/ex-40.out, raptor/tests/ex-40.rdf:
	Check XML CDATA sections

	* raptor/Makefile.am:
	dist-hook added to copy pre-built README and NEWS to release

	* librdf/Makefile.am:
	Remove dist-hook, rpm, finish - not needed or usable any longer.

2002-09-18  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_namespace.c (raptor_namespace_new):
	Fix debug message to report no URI for namespace.

	* raptor/raptor_namespace.c (raptor_namespace_new):
	Make xmlns="" work when compiling inside Redland.

2002-09-17  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* examples/example1.c:
	Add another statement by hand so we get multiple statements and
	targets

	* librdf/rdf_storage.c
	(librdf_storage_stream_to_node_iterator_get_method):
	Handle being
	called before librdf_storage_stream_to_node_iterator_next_method
	and initialising statement.

	* librdf/rdf_storage_hashes.c
	(librdf_storage_hashes_serialise_next_statement,
	librdf_storage_hashes_group_serialise_next_statement):
	Move
	librdf_iterator_next call till after the data is fetched.

	* docs/api.sgml.in: minor rewordings

	* docs/kernel-doc: Updated to new linux version.
	Fix minor error reporting bug.

	* examples/example1.c: Fix subject to work with updated ../perl/dc.rdf

	* Redland.i:
	Added librdf_node_equals which was already being used by language
	interfaces!

2002-09-16  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_parse.c (raptor_xml_parse_chunk_):
	For libxml, don't pass in filename to
	xmlCreatePushParserCtxt, we may not always have one.
	For lbixml, return correctly from initial parsing.
	(raptor_xml_parse_chunk): Add docucomments.
	(raptor_parse_file): Terminate loop on end of file as well as error.

	* raptor/Makefile.am:
	Added REDLAND_LIBS to raptor_namespace_test to make it work inside
	redland

2002-09-12  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_parse.c (raptor_parse_file): Split into:
	raptor_xml_parse_init, raptor_xml_parse_init_file,
	raptor_xml_parse_clean and raptor_xml_parse_chunk to allow more
	flexible APIs.
	(raptor_xml_parse_chunk_): Added, doing the main work of
	raptor_xml_parse_chunk but without error checking.
	(raptor_xml_parse_handle_errors): Added to process errors from an XML
	parser during parsing.

	* raptor/raptor_namespace.c: Make it work inside redland too.
	Fix standalone tests inside redland.

2002-09-11  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_internal.h:
	Moved namespace and qname definitions and prototypes here from
	raptor_parse.c

	* raptor/Makefile.am: Added raptor_namespace.c raptor_qname.c

	* raptor/raptor_parse.c:
	Moved namespace code to raptor_namespace.c, qname code to
	raptor_qname.c and renamed raptor_ns_map, raptor_ns_na,e
	to match.

	* raptor/raptor_qname.c: Raptor XML qname

	* raptor/raptor_namespace.c: Raptor XML namespace classes

2002-09-06  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* repat/Makefile.am:
	Use REPAT_LIBS to link tests with an expat XML parser

	* configure.in:
	Added REPAT_LIBS to link internal repat tests with an expat XML
	parser (only)

	* librdf/rdf_digest_md5.c: Include rdf_types.h for u32

2002-09-05  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* python/Makefile.am: Use SWIG_PYTHON_ARGS

	* configure.in:
	Check for swig 1.3.14+ and add SWIG_PYTHON_ARGS=-noproxy

	* configure.in:
	Add warning if BDB library cannot be found in dir, then default to 'db'

	* autogen.sh: Remove config.cache before running new configure

2002-09-04  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* python/RDF.py:
	Add some defensive checks for __str__ calls on null nodes/statements

2002-09-03  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* autogen.sh: Fix swig check

	* python/test/test.py: test with raptor parser

	* autogen.sh: Require swig, min 1.3.10

	* configure.in:
	SWIG 1.3.10 required; warn appropriately if pre-generated files are
	present, is OK but no generating possible.

	* autogen.sh:
	Move copying of local copies of config.guess, config.sub to after
	automake, libtool to ensure it overwrides.

2002-09-02  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_storage_hashes.c:
	Re-include some headers for internal prototypes

2002-09-01  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_parse.c: Use updated LIBRDF_RS URI names

	* librdf/rdf_concepts.h:
	Rename new syntax terms to be CONCEPT_RS (revised syntax) etc.
	Add URI terms too.

	* raptor/raptor_parse.c:
	Added rdf:parseType="Collection" after daml:collection code

	* raptor/tests/Makefile.am: Added test ex-39 for parseType Collection

	* raptor/tests/ex-39.out, raptor/tests/ex-39.rdf:
	rdf:parseType="Collection" test

	* librdf/rdf_concepts.h, librdf/rdf_concepts.c:
	Add new concepts rdf:nodeID, rdf:List, rdf:first, rdf:rest, rdf:nil

	* librdf/rdf_query.c:
	Include rdf_query.h and rdf_query_triples.h again for prototypes

	* librdf/rdf_storage.c:
	Include rdf_storage.h and rdf_storage_hashes.h again for prototypes

	* librdf/rdf_uri.h:
	librdf_uri_to_filename renamed from librdf_uri_as_filename.

	* librdf/rdf_uri.c (librdf_uri_to_filename):
	Renamed from librdf_uri_as_filename.

	* librdf/rdf_parser_repat.c (librdf_parser_repat_parse_file_as_stream):
	librdf_uri_as_filename
	now librdf_uri_to_filename.

	* librdf/rdf_parser.c (librdf_parser_parse_as_stream,librdf_parser_parse_into_model):
	filename not needed

	* librdf/rdf_hash_memory.c:
	Include rdf_hash_memory.h again for prototypes

	* raptor/raptor_parse.c:
	Change daml:Collection, daml:* comments to Collection, rdf:List etc.

2002-08-31  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_parse.c (raptor_end_element_grammar):
	Generate rdf:nodeID, store in id, not
	URI field.
	Rearrange three calls of raptor_process_property_attributes into one.

	* raptor/tests/Makefile.am:
	Use ECHO_N and ECHO_C to do portable echo without newline

	* raptor/configure.in:
	Pass on echo pre/postfix args needed for echoing without a newline

	* raptor/tests/Makefile.am:
	Instead of ignoring warnings, make make ignore exit codes from rdfdump

	* raptor/tests/Makefile.am: Ignore warnings (for now) in tests

	* raptor/tests/Makefile.am: Remove RDF_TEST_ANSWER_FILES - not used

	* raptor/raptor_parse.c (raptor_start_element_grammar):
	Don't copy URIs from daml:collection
	to the contained nodes.

	* raptor/tests/ex-34.out: Now correct.

2002-08-29  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/Makefile.am: Added ex-38

	* raptor/tests/ex-38.rdf, raptor/tests/ex-38.out:
	Test daml:Collection with rdf:ID

	* raptor/tests/ex-37.out: switch order again

	* raptor/raptor_parse.c (raptor_element_has_property_attributes):
	Check for rdf: properties
	too

	* raptor/tests/ex-37.out: Correct order, nodes in result

	* raptor/tests/ex-37.out, raptor/tests/ex-37.rdf:
	rdf:type attribute on empty property

	* raptor/tests/Makefile.am: Added ex-37

2002-08-28  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/ex-13.nt: deleted

	* raptor/raptor_parse.c: Fixed empty daml:Collection handling

	* raptor/raptor_uri.c: Minor strcat/strcpy optimisation

	* raptor/tests/ex-34.rdf: Renamed nodes so prop2 goes with node2 etc.

	* raptor/tests/ex-34.out: renamed genids to more match output

	* raptor/tests/ex-35.out, raptor/tests/ex-35.rdf,
	raptor/tests/ex-36.out, raptor/tests/ex-36.rdf:
	Added more daml:Collection checks

	* raptor/tests/ex-24.out: output order changed, same triples

	* raptor/tests/Makefile.am:
	Added ex-35, ex-36 for more daml:Collection checks

	* raptor/tests/ex-12.out: output order changed, same triples

2002-08-22  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_parse.c: removed fn not used

	* raptor/raptor_parse.c: Update xml namespaces comment with NE05 errata

	* raptor/raptor_parse.c:
	Removed use of obsolete object_is_literal statement field
	Added rdf datatypes test code

	* raptor/ntriples_parse.c:
	Removed use of obsolete object_is_literal statement field

	* raptor/raptor.h: Add statement object datatype uri

	* raptor/configure.in:
	Add rdf datatypes test flag --enable-rdf-datatypes

	* raptor/acconfig.h: Add rdf datatypes test flag

2002-08-20  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_uri.c (raptor_uri_uri_string_to_filename):
	Freeing wrong things

	* raptor/ntriples_parse.c, raptor/raptor_parse.c,
	raptor/raptor_internal.h:
	Remove RAPTOR_URI_AS_FILENAME

	* raptor/raptor.h: Added raptor_uri_is_file_uri

	* raptor/configure.in: Added limits.h check

	* librdf/rdf_uri.c (librdf_uri_is_file_uri): Use raptor_uri_is_file_uri

	* raptor/raptor_internal.h: Added raptor_strncasecmp

	* raptor/raptor_uri.c (raptor_uri_is_file_uri): Added.

	* raptor/Makefile.am: Added strcasecmp_test

	* raptor/strcasecmp.c (raptor_strncasecmp): Added
	(assert_strcasecmp, assert_strncasecmp): Added for testing.
	(main) Added to run tests

	* raptor/raptor_uri.c:
	(raptor_uri_filename_to_uri_string); For unix filename "foo", get dir
	and name it "/dir/foo".
	(main): Check above works using /tmp dir - warn if can't chdir(/tmp)

	* raptor/raptor_internal.h:
	Replaced raptor_file_uri_to_filename with aptor_file_uri_to_filename

	* raptor/raptor_parse.c, raptor/ntriples_parse.c:
	Removed raptor_file_uri_to_filename

	* raptor/raptor_uri.c (raptor_uri_filename_to_uri_string, (raptor_uri_uri_string_to_filename):
	fix unix relative file file:foo
	and bad win32 authority check.
	(main): Check unix foo/file:foo works

	* raptor/raptor.h: Added raptor_uri_filename_to_uri_string and
	raptor_uri_uri_string_to_filename

	* raptor/raptor_uri.c (raptor_uri_filename_to_uri_string):
	Added for filename to file: URI
	for win32 and unix.
	(raptor_uri_uri_string_to_filename): Added for file: URI to filename
	for win32 and unix.
	(assert_filename_to_uri,assert_uri_to_filename): Added for
	regression testing.
	(main): Tests for win32 / unix filename / file:URIs

2002-08-19  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/test.pl: Added tests for error and warning callbacks.

	* python/RDF.py:
	Added Python message callback support - generate raise on error or
	warnings.

	* Redland.i: Added Python message callback support.

	* raptor/INSTALL.html: Added some more xml library versions

	* raptor/raptor_parse.c:
	Remove a lot of raptor_update_document_locator calls
	and add them to the start of several functions.
	Replace some expat-specific stuff with general calls.

	* raptor/raptor_parse.c:
	Add raptor_update_document_locator calls before every parser error
	or warning.
	(raptor_expat_update_document_locator): Added.

	* raptor/raptor_internal.h:
	Export raptor_libxml_update_document_locator
	Export raptor_expat_update_document_locator
	Export raptor_update_document_locator

	* raptor/raptor_libxml.c (raptor_libxml_update_document_locator):
	Now not static.
	Remove column numbers - they seem to be total fiction.

	* raptor/raptor_locator.c (raptor_update_document_locator): Added.

	* perl/lib/RDF/Redland.pm: fix docs

	* perl/lib/RDF/Redland.pm: Move subroutines to documented package

	* docs/fix-pod-xhtml: Fix relative URIs

	* docs/perl.html: fix RDF::Redland link

	* perl/lib/RDF/Redland.pm:
	Call new librdf_perl_world_init method to init perl callbacks.
	(message): Added, to dispatch callbacks.
	(set_error_handler,set_warning_handler): Allow users to change handlers

	* librdf/rdf_utf8.c, librdf/rdf_uri.c, librdf/rdf_stream.c,
	librdf/rdf_storage_list.c, librdf/rdf_storage_hashes.c,
	librdf/rdf_storage.c, librdf/rdf_statement.c,
	librdf/rdf_serializer_raptor.c, librdf/rdf_serializer.c,
	librdf/rdf_query_triples.c, librdf/rdf_query.c,
	librdf/rdf_parser_sirpac.c, librdf/rdf_parser_repat.c,
	librdf/rdf_parser_raptor.c, librdf/rdf_parser_libwww.c,
	librdf/rdf_parser.c, librdf/rdf_node.c, librdf/rdf_memory.c,
	librdf/rdf_list.c, librdf/rdf_iterator.c, librdf/rdf_init.c,
	librdf/rdf_heuristics.c, librdf/rdf_hash_memory.c,
	librdf/rdf_hash_gdbm.c, librdf/rdf_hash_cursor.c,
	librdf/rdf_hash_bdb.c, librdf/rdf_hash.c,
	librdf/rdf_digest_openssl.c, librdf/rdf_digest_md5.c,
	librdf/rdf_digest.c:
	Tidying header files.
	stdarg.h required for all sources now.
	Remove rdf_*.h headers that are included by librdf.h

	* librdf/rdf_storage_hashes.c:
	revert default number hashes to 3 for now

	* librdf/Makefile.am:
	Always have compiled java class files in distribution.

	* raptor/raptor_parse.c (raptor_xml_cdata_handler):
	Allow to be ignored when there is no
	element (XML very damaged)

	* raptor/rdfdump.c: Tidy output formatting

	* raptor/raptor_libxml.c:
	Delete extra '\n' at end of XML parsing messages; that's up to the
	app to add.

	* raptor/raptor_parse.c: Removed some \n-s from warning/error messages

	* raptor/raptor_locator.c (raptor_format_locator):
	Don't count \0 in buffer size.

	* raptor/Makefile.am: Added raptor_locator.c

	* raptor/raptor.h: Added raptor_foramt_locator

	* raptor/raptor_locator.c: Raptor parsing locator functions

	* raptor/raptor_parse.c: Moved raptor_print_locator to raptor_locator.c

	* raptor/rdfdump.c:
	Updated for raptor error handlers passed on as strings, not va_list

	* raptor/ntriples_parse.c:
	raptor errors passed on as strings, not va_list
	(raptor_ntriples_parser_error,
	raptor_ntriples_parser_fatal_error): Turn va_list into a string.

	* raptor/raptor_parse.c:
	raptor errors passed on as strings, not va_list
	(raptor_parser_fatal_error_varargs,
	raptor_parser_error_varargs,
	raptor_parser_warning_varargs): Turn va_list into a string.

	* raptor/raptor.h: raptor errors passed on as strings, not va_list

2002-08-18  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/Makefile.am: Add LTLIBOBJS to raptor library, not rdfdump

	* raptor/configure.in: Set LIBOBJS and LTLIBOBJS

	* raptor/configure.in:
	Check for strcasecmp, stricmp or use compatibility version

	* raptor/raptor_internal.h:
	Define raptor_strcasecmp to library routine, or leave alone for
	compatibility function.

	* raptor/Makefile.am: Added @LIBOBJS@
	and strcasecmp.c

	* raptor/strcasecmp.c: strcasecmp compatibility

	* raptor/raptor_parse.c:
	strcasecmp now raptor_strcasecmp, will be defined to right function

	* raptor/win32_config.h:
	Don't use macros for strcasecmp; now handled generally

	* raptor/Makefile.am:
	Added raptor_internal.h, win32_config.h to noinst headers
	Added raptor_win32.c

	* raptor/raptor_win32.c: Raptor WIN32 support functions

	* raptor/win32_config.h: Raptor WIN32 hard-coded config

	* raptor/rdfdump.c: Tidying up stdlib.h, dmalloc.h includes.
	Include win32_config.h #ifdef WIN32

	* raptor/raptor_parse.c, raptor/raptor_uri.c:
	Tidying up stdlib.h, dmalloc.h includes.
	Removed stuff duplicated in raptor.h/raptor_internal.h
	Include win32_config.h #ifdef WIN32

	* raptor/raptor_libxml.c: Tidying up stdlib.h, dmalloc.h includes.
	Include win32_config.h #ifdef WIN32

	* raptor/ntriples_parse.c: Tidying up stdlib.h, dmalloc.h includes.
	Removed stuff duplicated in raptor.h/raptor_internal.h
	Include win32_config.h #ifdef WIN32

	* raptor/raptor_internal.h:
	Moved libxml includes, defines and structs here.
	Declared extern function prototypes for libxml interface.

	* raptor/raptor_parse.c: Use errno.h, not extern int errno
	Moved most libxml code to new raptor_libxml.c
	Moved necessary includes, defines and structs to raptor_internal.h
	Some renaming of functions; raptor_libxml* for those related to libxml
	Some functions now not static.
	Added some necessary methods for accessing raptor_parser structure
	for libxml.
	(raptor_get_locator): Added; new public method.

	* raptor/raptor.h: Added raptor_get_locator

	* raptor/ntriples_parse.c: Use errno.h, not extern int errno

	* raptor/Makefile.am: Added raptor_libxml.c

	* raptor/raptor_uri.c: Use errno.h if present

	* raptor/raptor_libxml.c: Raptor libxml functions

	* raptor/raptor_parse.c:
	Added 12 wrapper functions for libxml handlers, passing on the right
	context to them, to enable handling of entities and resolving them.
	(raptor_xml_update_document_locator): Handle if in document subset
	Changed internal raptor fatal_error, error, warning functions
	to have varargs versions that libxml can use.
	(raptor_new): Initialise new libxml handler wrappers

2002-08-17  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Redland.i (librdf_call_perl_message):
	Free malloced buffer, not argument

	* librdf/rdf_init.c, librdf/rdf_init.h:
	Make error/warning functions pass in a message (aka format string)

	* Redland.i (librdf_call_perl_message):
	Added to invoke PERL message handler subroutine
	RDF::Redland::World::message for error/warning message handling.
	(librdf_perl_error_handler): Added
	(librdf_perl_warning_handler): Added
	(librdf_perl_world_init): Added - to initialise above two routines
	(librdf_internal_test_error,librdf_internal_test_warning): Added
	for testing

	* librdf/Makefile.am: Added LIBRDF_XML_OBJS again

	* configure.in: More fixes trying to get expat linked in and working

	* examples/example4.c, examples/example3.c, examples/example2.c,
	examples/example1.c, librdf/rdf_utf8.c, librdf/rdf_uri.c,
	librdf/rdf_storage.c, librdf/rdf_statement.c,
	librdf/rdf_serializer_raptor.c, librdf/rdf_serializer.c,
	librdf/rdf_query.c, librdf/rdf_parser_sirpac.c,
	librdf/rdf_parser_raptor.c, librdf/rdf_parser.c,
	librdf/rdf_node.c, librdf/rdf_model.c, librdf/rdf_heuristics.c,
	librdf/rdf_hash.c, librdf/rdf_files.c, librdf/rdf_digest.c,
	librdf/rdf_concepts.c:
	Add stdarg.h to required headers.

	* librdf/rdf_init.c:
	API change: internal error/warning functions now pass va_list
	Add stdarg.h to headers.
	(librdf_world_set_error): API change.  Passed in function takes va_list.
	(librdf_world_set_warning): API change.  Passed in function takes va_list.

	* librdf/rdf_init.h: internal error/warning functions now pass va_list

	* librdf/Makefile.am: Added compiling java classes

	* Redland.i: delete I/O stuff not used

	* raptor/rdfdump.c: Set ntriples error handler

	* raptor/ntriples_parse.c:
	Added fatal/non-fatal error handlers/functions.
	(raptor_ntriples_set_error_handler): Added.
	(raptor_ntriples_string): Documented args; now returns failure status.
	(raptor_ntriples_parser_error): Added for non-fatal errors (bad lines).
	(raptor_ntriples_parser_fatal_error): Fix passing on va_list arguments.

	* raptor/ntriples.h: Added raptor_ntriples_set_error_handler

2002-08-16  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/Redland/Model.pm (sources,arcs,targets):
	Use new Iterator methods.

2002-08-13  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/Redland/Node.pm (blank_identifier):
	Added to get/set blank node ids

	* perl/serialize.pl: More stuff

	* expat/xmlparse/Makefile.am: Don't include CFLAGS twice

	* configure.in: Don't give error when no libdb name can be guessed
	Only link dmalloc if dmalloc.h is present (maintainer mode)

	* Redland.i: Added librdf_node set/get blank_identifier methods

	* raptor/configure.in: Add check for errno.h
	Only link dmalloc if dmalloc.h is present (maintainer mode)

	* raptor/ntriples_parse.c: Add use of errno.h if present

	* raptor/raptor_parse.c: Add use of errno.h if present
	Minor comments fix
	When rdf:Description seen, go straight to state DESCRIPTION rather
	than via OBJ

2002-08-11  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* INSTALL.html: Added --with-xml-parser docs

	* perl/test.pl: Replace iterator get_next method with get and next

	* perl/lib/RDF/Redland/Iterator.pm (next):
	Replaced with get, next methods

	* python/RDF.py: Change iterator methods from get to get/next

2002-08-07  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_parse.c:
	Added rdf:List, rdf:first, rdf:rest (not used yet)
	Added rdf:nodeID for bnodes as subject/objects like
	rdf:about/rdf:resource

	* raptor/raptor.h: Added RAPTOR_URI_SOURCE_BLANK_ID (for rdf:nodeID)

2002-08-04  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_hash.c (librdf_free_hash):
	Call librdf_hash_close() to cleanup, not factory
	close

	* configure.in: do test compare right; test a = b, not test a=b

	* Redland.i: Updated interface for changed iterator methods.
	librdf_iterator_get_next: deleted
	librdf_iterator_get_object, librdf_iterator_next: added

	* examples/example4.c, examples/example1.c:
	Updated for changed iterator methods.
	Replaced librdf_iterator_get_next call with
	librdf_iterator_get_object and librdf_iterator_next calls.

	* librdf/rdf_hash.c: (librdf_hash_get_all,
	librdf_hash_get_all_iterator_is_end,
	librdf_hash_get_all_iterator_next_method,
	librdf_hash_get_all_iterator_get_method,
	librdf_hash_keys,
	librdf_hash_keys_iterator_next_method,
	librdf_hash_keys_iterator_get_method,
	librdf_hash_print,
	librdf_hash_print_keys,
	librdf_hash_print_values,
	main):
	Updated for changed iterator methods.
	Replaced librdf_iterator_get_next call with
	librdf_iterator_get_object and librdf_iterator_next calls.

	* librdf/rdf_storage_hashes.c:
	(librdf_storage_hashes_serialise_next_statement,
	librdf_storage_hashes_node_iterator_next_method,
	librdf_storage_hashes_node_iterator_get_method,
	librdf_storage_hashes_node_iterator_create,
	librdf_storage_hashes_group_serialise_next_statement):
	Updated for changed iterator methods.
	Replaced librdf_iterator_get_next call with
	librdf_iterator_get_object and librdf_iterator_next calls.

	* librdf/rdf_storage.c:
	(librdf_storage_stream_to_node_iterator_next_method,
	librdf_storage_stream_to_node_iterator_get_method,
	librdf_storage_stream_to_node_iterator_finished):
	Updated for changed iterator methods.
	Replaced librdf_iterator_get_next call with
	librdf_iterator_get_object and librdf_iterator_next calls.

	* librdf/rdf_hash_memory.c:
	(librdf_hash_memory_clone,librdf_hash_memory_cursor_get,
	librdf_hash_memory_cursor_finish):
	Updated for changed iterator methods.
	Replaced librdf_iterator_get_next call with
	librdf_iterator_get_object and librdf_iterator_next calls.

	* librdf/rdf_model.c:
	(librdf_free_model,librdf_model_get_source,librdf_model_get_arc,
	librdf_model_get_target):
	Updated for changed iterator methods.
	Replaced librdf_iterator_get_next call with
	librdf_iterator_get_object and librdf_iterator_next calls.

	* librdf/rdf_hash_bdb.c: (librdf_hash_bdb_clone):
	Updated for changed iterator methods.
	Replaced librdf_iterator_get_next call with
	librdf_iterator_get_object and librdf_iterator_next calls.

	* librdf/rdf_hash_gdbm.c: (librdf_hash_gdbm_clone):
	Updated for changed iterator methods.
	Replaced librdf_iterator_get_next call with
	librdf_iterator_get_object and librdf_iterator_next calls.

	* librdf/rdf_stream.c:
	(librdf_stream_from_node_iterator_next_statement):
	Updated for changed iterator methods.
	Replaced librdf_iterator_get_next call with
	librdf_iterator_get_object and librdf_iterator_next calls.

	* librdf/rdf_storage_list.c: (librdf_storage_list_close,
	librdf_storage_list_serialise_next_statement,
	librdf_storage_list_group_serialise_next_statement)
	Updated for changed iterator methods.
	Replaced librdf_iterator_get_next call with
	librdf_iterator_get_object and librdf_iterator_next calls.

	* librdf/rdf_node.c: Deleted bogus comment.

	* librdf/rdf_list.c:
	Updated for iterator class change: get_next split into
	next_method, get_method

	* librdf/rdf_iterator.c:
	Updated iterator class for get_next split into get_object, next
	(librdf_iterator_get_next): Deleted - API CHANGE
	(librdf_iterator_get_object, librdf_iterator_get_context,
	librdf_iterator_get_key, librdf_iterator_get_value): Added,
	wrappers around function pointer iterator->get_method, with
	appropriate flags.

	* librdf/rdf_iterator.h:
	Iterator methods get_next split into get_object, next
	Added next_method, get_method function pointers to iterator
	structure.
	Defined flags for get_method - object, context, (hash)key, (hash)value
	librdf_iterator_get_next - DELETED - API CHANGE
	librdf_iterator_get_object, librdf_iterator_get_context,
	librdf_iterator_get_key, librdf_iterator_get_value: Added - API CHANGE

	* configure.in: Fix parser_modules with 'no' now working

	* configure.in:
	pick xml parser for raptor using $xml_parser from --with-xml-parser

2002-08-01  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_model.c: docucomment fix

	* docs/Makefile.am: added kernel-doc to the dist

	* docs/kernel-doc: Process C docucomments

2002-07-29  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/configure.in: default xml parser now libxml

	* raptor/INSTALL.html: Update --with-xml-parser docs

	* INSTALL.html: Added docs for extra BDB options to configure

	* ruby/Makefile.am: s/repat/raptor/

	* ruby/example.rb: s/repat/raptor/ in instructions

	* ruby/Makefile.am: use mkdir -p for installdir

2002-07-28  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/README.html: Update papers

	* raptor/autogen.sh: Fix use of srcdir/find

	* raptor/Makefile.am: Add -I's for compiling test programs

	* docs/Makefile.am: Fix #comment in rule (portability)

	* autogen.sh: Fix use of srcdir/find

	* redland-src-config.in:
	Quote libs, static-libs since they may have $s in them for make

	* configure.in:
	For perl path tests, use perl itself to print, rather than sourcing
	BDB config - added --with-bdb-li,include,dbname to specify more
	detailed BDB values.

2002-07-26  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.in: Check for libxml function xmlCreatePushParserCtxt using
	the library from XML_CONFIG, not always -lxml

	* configure.in:
	Added AC_ARG_WITH for xml-parser, so is documented for passing
	it on to raptor

	* perl/serialize.pl: test pretty xml serializing code

2002-07-23  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* NEWS.html: Added XML Space change warning and pointer to script

	* librdf/rdf_model.c, librdf/rdf_statement.c, librdf/rdf_node.c:
	Update librdf_new_node_from_literal calls

	* configure.in, Makefile.am: Added aux dir

	* aux/Makefile.am: aux dir automakefile

	* aux/update-api-0912.pl: update api to 0.9.12 script

	* perl/test.pl, perl/example.pl: Update perl literal calls

	* perl/lib/RDF/Redland/Node.pm: Fix docs

	* ruby/Makefile.am: Fix cflags

	* java/Makefile.am:
	Append to (Linux? only) dynamic lib search path var LD_LIBRARY_PATH

	* tcl/Makefile.am: Fix cflags

	* tcl/test.tcl, python/RDF.py, perl/test.pl, examples/example2.c,
	examples/example4.c, examples/example3.c, librdf/rdf_model.c,
	librdf/rdf_parser_repat.c, librdf/rdf_parser_libwww.c,
	librdf/rdf_query_triples.c, librdf/rdf_parser_raptor.c,
	librdf/rdf_node.c:
	Update librdf_node_set_literal_value calls

	* java/org/librdf/redland/Model.java,
	java/org/librdf/redland/Node.java, python/RDF.py,
	perl/lib/RDF/Redland/Model.pm, perl/lib/RDF/Redland/Node.pm,
	Redland.i, librdf/rdf_model.h, librdf/rdf_model.c,
	librdf/rdf_node.c, librdf/rdf_node.h:
	zap former xml_space args entirely

	* python/RDF.py: Zap xml_space

	* Redland.i: zap xml_space

2002-07-22  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_storage_hashes.c:
	Remove more fixed things - first 4 hashes are used.
	Removed all LIBRDF_STORAGE_HASH_GROUPS and stub code - compiled in now
	Added indexes field to hash context for declaring indexes wanted
	Added all_statements_hash_index to hash context for hash to use to
	serialise the entire model, replacing ANY_OLD_HASH_INDEX
	(librdf_storage_get_hash_description_by_name): Added, not yet used
	(librdf_storage_hashes_init_common): Added indexes parameter
	Updated to handle all_statements_hash_index
	(librdf_storage_hashes_init): Create indexes parameter
	(librdf_storage_hashes_terminate): Delete indexes if seen.
	(librdf_storage_hashes_clone): Copy indexes field.

	* librdf/rdf_parser_repat.c: errno only on non-WIN32

	* librdf/rdf_model.c (librdf_model_add_string_literal_statement):
	Remove all references to
	XML Space.  Keep the arg around but ignore it.

	* librdf/rdf_model.h:
	Remove all references to XML Space.  Keep the arg around but ignore it.

	* librdf/rdf_node.h:
	Remove all references to XML Space.  Keep the arg around but ignore it.
	(Private) enum librdf_node_literal_xml_space removed
	Removed prototype for librdf_node_get_literal_value_xml_space

	* librdf/rdf_node.c:
	Remove all references to XML Space.  Keep the arg around but ignore it.
	(librdf_new_node_from_literal,librdf_node_set_literal_value):
	xml_space arg now unused1
	(librdf_node_get_literal_value_xml_space): Removed - API change
	(librdf_node_encode,librdf_node_decode): Removed xml space en/decoding.

	* librdf/rdf_storage_hashes.c:
	Removed static hash/hash_descriptor/names - now allocated from
	NUMBER_OF_HASHES in librdf_storage_hashes_init_common

	* librdf/librdf.h:
	Include stdlib.h before dmalloc.h when dmalloc is used

	* autogen.sh: zap ltconfig too - generated if needed.

2002-07-20  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* INSTALL.html: typo: sleepcat

	* INSTALL.html: Sleepycat DB 4.0.14 works

	* raptor/tests/Makefile.am: Added ex-34

	* raptor/tests/ex-34.out, raptor/tests/ex-34.rdf:
	Test daml:collection lists with blank nodes

	* configure.in: Removed AC_PROG_RANLIB - obsoleted by AM_PROG_LIBTOOL
	Catch some LIBRDF_CFLAGS that should have been LIBRDF_CPPFLAGS

	* raptor/configure.in: Modify cflags to use redland srcdir not builddir

	* python/setup.py: Ignore -lraptor like -lrdf

	* python/Makefile.am: clean-python isn't good enough

	* perl/Makefile.PL: Use redland-src-config --static-libs

	* redland-src-config.in: added --static-libs

	* tcl/Makefile.am, ruby/Makefile.am, python/setup.py,
	perl/Makefile.PL, java/Makefile.am:
	Update for using ../redland-src-config

	* raptor/Makefile.am, Makefile.am: zap 'finish' stuff

	* redland-src-config.in: Link to .libs dirs for redland, raptor

2002-07-17  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_parse.c (raptor_end_element_grammar):
	Get rdf:ID working on empty propertyElt
	with rdf:parseType="Resource"

	* raptor/raptor_parse.c:
	Added reified raptor_identifier, changed code to use it for rdf:ID value
	Store rdf:bagID in bag raptor_identifier

	* raptor/raptor_parse.c (raptor_element_has_property_attributes):
	Created, returns true iff a
	property element has property attributes
	(raptor_start_element_grammar): For property elements, move
	handing property attributes to close of element, only then can
	the resource URI be known.
	(raptor_end_element_grammar): Update after above change.
	For property elements that are empty (empty literal), create
	a new blank node and hang the property attributes off that.

	* raptor/raptor_parse.c:
	Warn and continue when element content is seen inside a
	<propElt rdf:resource="..."/>

2002-07-16  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Makefile.am, configure.in: Moved redland-config to top dir

	* redland-config.in, librdf/redland-config.in: Moved to top dir

	* librdf/Makefile.am: Moved redland-config to top dir

2002-07-15  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* INSTALL.html: Update example4 example again, with line breaks

	* INSTALL.html: Update example4 example

	* raptor/tests/Makefile.am: make check sh stuff not echo

	* raptor/tests/Makefile.am: Add ex-33

	* raptor/tests/ex-33.out, raptor/tests/ex-33.rdf:
	Check properties work off node generated by empty propertyElt

2002-07-14  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* INSTALL.html: Updated CVS instructions for source reorganisation

	* configure.in: Generate redland-src-config in top dir

	* Makefile.am: Added redland-src-config.in
	More rules to build various things in subdirs, not really working
	yet.

	* configure.in: Create abs_top_srcdir, abs_top_builddir subst vars
	Create redland-src-config

	* redland-src-config.in:
	Script to get flags for compiling against the source tree

	* raptor/Makefile.am: Add REDLAND_LIBS to rdfdump dependencies
	Add rule to build librdf.la if needed

	* python/RDF.py: Updates from Edd Dumbill:
	(class RedlandError): Added, an Exception class
	(class NodeTypeError): Added, an RedlandError exception class
	(node_type): Added package function to turn a node name to a Redland
	(node_type_name): Added package function to get the node name for a
	Redland node type
	(_get_uri): Now throw an NodeTypeError exception if node has no URI
	(is_resource): Added, returns true if node is a resource
	(is_literal): Added, returns true if node is a literal
	(class Storage, __init__): Raise exception if a null URI given to
	constructor.

2002-07-13  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/Makefile.am:
	Zap -static arg for rdfdump, seems to annoy libtool
	Pass on redland libs, cflags as necessary

	* raptor/ntriples.h: Change all LIBRDF_INTERNAL to RAPTOR_IN_REDLAND

	* raptor/rdfdump.c: Change all LIBRDF_INTERNAL to RAPTOR_IN_REDLAND
	Update to newest librdf world open/close calls

	* raptor/raptor_parse.c: Tidy - 2 includes of stdlib.h
	Change all LIBRDF_INTERNAL to RAPTOR_IN_REDLAND

	* raptor/raptor_internal.h: Lose all redland includes - for app code

	* raptor/raptor.h: Include librdf and uri headers when in Redland
	Change all LIBRDF_INTERNAL to RAPTOR_IN_REDLAND

	* raptor/configure.in:
	Define REDLAND_LIBS, REDLAND_CPPFLAGS for use when building in redland

	* librdf/Makefile.am: Add finish rules, not yet complete

	* librdf/rdf_uri.c, librdf/rdf_serializer_raptor.c,
	librdf/rdf_parser_raptor.c:
	Define RAPTOR_IN_REDLAND before including raptor headers

	* raptor/raptor_parse.c: Moved debugging stuff to raptor_internal.h
	Use updated raptor includes

	* raptor/rdfdump.c: Use updated raptor includes

	* raptor/raptor_uri.c: Don't include Redland rdf_config.h
	Use updated raptor includes

	* raptor/ntriples_parse.c: Use updated raptor includes

	* raptor/raptor.h: Removed all standard includes
	Moved URI stuff to raptor_internal.h except for typedef (needed
	for prototypes)

	* raptor/raptor_internal.h: Internal raptor definitions

	* raptor/Makefile.am: Added raptor_internal.h

	* raptor/configure.in: Fix raptor in redland check.

	* raptor/ntriples_parse.c, raptor/raptor_parse.c:
	don't include redland rdf_config.h - use ours

	* raptor/configure.in, raptor/acconfig.h: added RAPTOR_IN_REDLAND

2002-07-12  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor.h: include stdarg.h here

	* raptor/tests/Makefile.am: Added ex-32

	* raptor/tests/ex-32.out, raptor/tests/ex-32.rdf:
	Test property attributes with rdf:resource

	* raptor/raptor_parse.c (raptor_process_property_attributes):
	Pass in an optional
	identifier to use for the resource node.

	Use that to process property attributes along with rdf:resource,
	at the close of the (empty) propertyElt.

	* Redland.i: revert (im)mutable back to readonly/write

2002-07-11  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/raptor_uri.c (raptor_uri_resolve_uri_reference):
	Handle base URI without a path
	such as "http://example.org"

	* raptor/Makefile.am:
	Tidy test program args +$(DEFS) to add crucial -DHAVE_CONFIG_H

	* raptor/rdfdump.c (rdfdump_error_handler): Use va_list form
	(rdfdump_warning_handler): Use va_list form

	* raptor/raptor_parse.c (raptor_xml_start_element_handler):
	Warn about unqualified rdf:
	attributes

	* raptor/ntriples_parse.c (raptor_ntriples_parser_fatal_error):
	now passes on va_list

	* raptor/raptor.h:
	API change: raptor_message_handler callback now takes a va_list as
	final argument

	* raptor/rdfdump.c: Make warning/error messages neater

	* raptor/rdfdump.c: Added -w - ignore warnings
	(rdfdump_warning_handler): Added
	(rdfdump_error_handler): Added
	Count warnings, errors and exit with #errors, or 128+#warnings

	* raptor/raptor_parse.c:
	When a property has multiple objects, give an error and skip the rest
	of that element

	* raptor/tests/Makefile.am: Added bad-01.rdf

	* raptor/tests/bad-01.rdf: A property must have only one node value

	* raptor/rdfdump.c:
	(rdfdump_error_handler) Added.  Exit 1 on an error, don't keep going

	* raptor/tests/Makefile.am: Fix bad test checking again

2002-07-10  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/Makefile.am: Added LOCAL_LIB_DIR for finish

	* raptor/Makefile.am: Fix args for compiling tests

2002-07-07  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/Makefile.am: Added finish target to install to lib
	Tidy up test program building

	* raptor/raptor_parse.c:
	Allow non-namespaced elements to be recognised and skipped

2002-07-05  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* debian/redland1.files: redland1 files

	* examples/Makefile.am: Make tidier and work when srcdir isn't builddir

	* librdf/Makefile.am: Use $(CPPFLAGS) for tests

	* configure.in: repat, raptor stuff should be internal flags

	* librdf/rdf_parser_repat.c: Return repat dir in include

	* librdf/redland-config.in: Use LIBRDF_ versions of macros now

	* librdf/rdf_parser_repat.c: No need for repat dir in include

	* repat/Makefile.am, librdf/Makefile.am, examples/Makefile.am,
	configure.in, Makefile.am:
	Update CPPFLAGS, LDFLAGS, LIBS to have external, internal versions
	and ones just for xml parsers (expat, libxml) used by internal
	RDF/XML parsers

	* repat/Makefile.am: Replace XML_OBJS with LIBRDF_XML_LIBS

	* librdf/Makefile.am: Replace XML_OBJS with LIBRDF_EXTRA_LIBS

	* Makefile.am: Add more subdirs, tidy

	* configure.in:
	Replace XML_OBJS with LIBRDF_EXTRA_LIBS and LIBRDF_XML_LIBS

2002-06-30  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/Makefile.am: typo

	* raptor/Makefile.am: Added 'make deb' target

	* raptor/tests/rdf-schema.out, raptor/tests/rdfs-namespace.out:
	RDFS schema answers

	* raptor/tests/Makefile.am: Fix rdfs checks

	* raptor/tests/Makefile.am: Add two RDFS schema namespaces

	* raptor/tests/rdf-schema.rdf, raptor/tests/rdfs-namespace.rdf:
	RDFS schemas

	* raptor/raptor_parse.c:
	(raptor_parser_error) Make this default to exit(1)
	(raptor_start_element_grammar): Die when a second object is tried
	to be set for a statement

	* raptor/tests/Makefile.am: Check negative tests correctly

	* raptor/autogen.sh: Add libtoolize cleanup, check and run

	* raptor/configure.in: fix AC_OUTPUT

	* raptor/Makefile.am, raptor/configure.in: Added debian dir

2002-06-26  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/win32/README: win32 README

	* librdf/Makefile.am: zap more stuff not in this part of dist

	* librdf/Makefile.am: Changelog not here now

	* configure.in, Makefile.am: Updated for moved sources

	* librdf/Makefile.am: Updated for moved sources

	* examples/Makefile.am: Automakefile for examples

	* docs/Makefile.am: Updated for moved sources

	* autogen.sh: Remove raptor source hunting

	* Redland.i: Update for newer swigs
	Added commented-out typemaps for FILE*

	* raptor/autogen.sh: Added GNU config.* copy test

	* perl/MANIFEST: Added RDF::Redland::Serializer

	* perl/example.pl: Added (comment out) serializer test

	* perl/lib/RDF/Redland/Makefile.am: Added Serializer i/f

	* perl/lib/RDF/Redland/Serializer.pm: RDF::Redland::Serializer class

	* perl/lib/RDF/Redland.pm: Added RDF::Redland::Serializer

	* Redland.i: added serializer class, methods

2002-06-21  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/update-perl-api.pl:
	Fix typo in use RDF:RSS; actually didn't matter, class thing later on
	fixed it.

2002-06-19  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* debian/scanpackages.override: Added libraptor overrides

	* autogen.sh: Import nearby fresh autoconf config.* files

	* docs/stylesheet.css: make catfonts 75%

	* docs/stylesheet.css: More CSS, like latest ILRT style

2002-06-14  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* raptor/tests/Makefile.am: Added bad test checking
	Added bad-00.rdf

	* raptor/tests/bad-00.rdf: Added bad test 00

	* raptor/configure.in: Added raptor-config

	* raptor/libraptor.3, raptor/rdfdump.1: Raptor manual pages

	* raptor/Makefile.am: Added raptor-config
	Added manual pages
	Make rdfdump static only for maintainer

	* raptor/raptor-config.in: Raptor configuration script

2002-06-11  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf/rdf_storage_hashes.c: typo

	* librdf/rdf_storage_hashes.c:
	Hack in indexing of predicate->(subject,object) - p2so
	Still using the table of indexes; needs fixing.
	(librdf_storage_hashes_serialise_common): Created from
	librdf_storage_hashes_serialise but with extra parameters to
	allow selecting just a particular key (node) and wanted values
	fields.
	(librdf_storage_hashes_serialise_next_statement): If there is a
	single node being searched for, just return the pre-allocated
	statement from the has iterator.
	(librdf_storage_hashes_find_statements): For p2so ONLY,
	use the p2so_index hash to get the s,o parts of the statement
	using librdf_storage_hashes_serialise_common
	(librdf_storage_hashes_node_iterator_get_next): For p2so,
	grab subject and object from the iterator statement and
	predicate from the user supplied one.  Return a new statement
	from these.
	(librdf_storage_hashes_node_iterator_finished): Tidy up when
	there is a search node.
	(librdf_storage_hashes_node_iterator_create): For p2so, save
	the first search node for iterating the predicate hash.

2002-06-10  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/Redland/Node.pm, perl/lib/RDF/Redland/Model.pm,
	perl/lib/RDF/Redland/Iterator.pm:
	Remove deprecated methods

	* docs/Makefile.am:
	For maintainer, don't clean generated sgml, do that on distclean

2002-06-08  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/python.html: Fix class names for 0.6 API

	* README.html: Update overview.
	model=>graph
	link inquery, serializer

	* README.html: Added ruby

----------------------------------------------------------------------

WARNING: Above here the source code was reorganised and the
directories include both redland and raptor 

----------------------------------------------------------------------

	* configure.in: Bump version to 0.9.12

	* Snapshotted redland_0_9_11 for 0.9.11 release

	* debian/changelog, NEWS.html: Updated for 0.9.11 release

	* rdf_hash_bdb.c (librdf_hash_bdb_delete_key_value): Handle BDB V2
	that don't have DB_GET_BOTH

	* configure.in: Make expat parser check use NULL arg.  Make libxml
	parser check look for xmlCreatePushParserCtxt (1.8.3 or later)

	* rdf_serializer.c: don't test for something not yet written.

	* debian/rules.in, debian/control: more dpkg work, still
	incomplete

	* perl/lib/RDF/Redland/Node.pm: Updated node types; restrict
	public ones to resource, literal, blank

	* perl/lib/RDF/Node.pm: Define some node type vars for legacy

2002-06-06  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_parser_repat.c (librdf_parser_repat_statement_handler):
	Added hack to make repat object resources that are blank node
	identifiers, appear as such rather than genid URIs.

	* perl/README.txt: Tidied. link to update script

	* perl/lib/RDF/Redland/Model.pm:
	(serialize) Added, synonym for serialise method

	* perl/MANIFEST: Added README.txt Removed duplicate

	* perl/Makefile.am: Added README.txt notes and update-perl-api.pl
	to dist

	* perl/README.txt: Perl API notes

2002-06-04  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_serializer.c: docucomment

	* Makefile.am: remove rdf_serializer_raptor.h

	* configure.in: Added raptor_uri.c to raptor sources.

	* autogen.sh: Add raptor_uri.c to symlink mess

	* rdf_uri.c (librdf_new_uri_relative_to_base): Use
	raptor_uri_resolve_uri_reference from raptor to do full relative
	URI resolving

2002-06-03  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* python/RDF.py:
	(Node) __hash__ - return hash based on string representation
	(Uri) __hash__ - return hash based on redland object (which is
	same for same URI)

	* rdf_node.c (librdf_node_equals): Fix type check to look at both
	nodes - was a NOP.

2002-06-01  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/java.html: Added Sesame

	* docs/java.html: Updated references

	* rdf_list.h: Remove current iterator node field from internal
	list structure; list iterator context holds that now.

	* rdf_list.c: Make list have multiple iterators by using a
	librdf_list_iterator_context
	(librdf_list_get_iterator, librdf_list_iterator_is_end,
	librdf_list_iterator_get_next): Updated
	(librdf_list_iterator_finished): Added

	* rdf_node.c (librdf_new_node_from_node): Didn't work for blank
	nodes
	(librdf_node_equals): Implemented for blank nodes Test code: added
	tests for above

	* docs/python.html: Note API requires 2.2 (maybe 2.1) now

	* python/test/test.py, python/example.py: Changes for updated
	python 2.2+ API

	* python/RDF.py: Improved python API by Edd Dumbill.  Requires
	python 2.2 Classes renamed e.g. RDF.node to RDF.Node
	(some) set/get methods use python __getattr__ and __setattr__
	Remove all user reference to world object
	(RDF.Parser): parse_into_model method now has model as first
	argument

2002-05-29  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* java/test1.java, java/test2.java: Add node constructor test

	* java/org/librdf/redland/Node.java: Added some javadoc Amend
	constructor taking a string to also build blank nodes; added extra
	parameter.

	* perl/lib/RDF/Redland/Node.pm: Added constructor
	new_from_blank_identifier

	* Redland.i: Added librdf_new_node_from_blank_identifier

	* rdf_node.c (librdf_node_encode,librdf_node_decode):
	Encode/decode xml:lang values

	* docs/Makefile.am: Added serializer to api docs

	* docs/api.sgml.in: Added serializer sections

	* rdf_serializer.h: Added set_namespace factory method

	* rdf_serializer.c (librdf_serializer_set_namespace): Added to set
	namespace/prefix (hints)

	* rdf_parser_raptor.c: Pass xml language detail from raptor

	* example4.c: Only free serializer uri if allocated

	* rdf_parser_raptor.c (librdf_parser_raptor_make_node_from_anon):
	Deleted - use librdf_new_node_from_blank_identifier to make blank
	nodes

	* rdf_node.c (librdf_node_get_uri): Return a URI only for a
	resource
	(librdf_node_set_uri): Only work on resource nodes.
	(librdf_node_encode,librdf_node_decode): Store blank nodes too;
	encoded as type 'B'

	* rdf_parser_repat.c: Added blank node support

	* rdf_node.c (librdf_new_node_from_blank_identifier): Added to
	make blank node
	(librdf_node_set_blank_identifier): Take const identifier, only
	free old identifier if there was one Test code: added test for
	librdf_node_set_blank_identifier Die if any of the constructors
	fail.

	* rdf_node.h: Added prototype for
	librdf_new_node_from_blank_identifier

	* rdf_parser_raptor.c, rdf_parser_repat.c: Include stdlib.h for
	some prototypes.

	* rdf_query_triples.c: Comment out some unused vars

2002-05-28  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* example4.c: Added serialize command

	* rdf_serializer.c:
	(librdf_get_serializer_factory,librdf_get_serializer_factory):
	Default is MIME Type "application/rdf+xml" when all fields NULL
	(librdf_init_serializer): Invoke
	librdf_serializer_raptor_constructor always

	* rdf_serializer_raptor.c
	(librdf_serializer_raptor_serialize_model): Free statement from
	stream

	* rdf_init.c: Initialise/finish serializer class

	* rdf_node.h, rdf_node.c (librdf_node_set_blank_identifier): Zap
	old value, don't return it

	* Makefile.am: Added rdf_serializer_test to TESTS

	* Makefile.am: Added rdf_serializer_test

	* rdf_serializer_raptor.c
	(librdf_serializer_raptor_serialize_model): Remove unused var

	* rdf_stream.c, rdf_init.c: Added prototype to remove gcc warning
	about abort()

	* Makefile.am: Added serializer modules

	* librdf.h: Added serializer typedefs, headers

	* rdf_init.h: Added serializer list to world

	* rdf_serializer_raptor.c, rdf_serializer.c, rdf_serializer.h: RDF
	Serializer classes, factory

	* perl/lib/RDF/Redland/Parser.pm (new): Note that name is also
	optional and if all fields blank, gives an application/rdf+xml
	parser

	* rdf_parser.c (librdf_get_parser_factory,librdf_new_parser):
	Default to a parser for MIME Type application/rdf+xml if all
	fields are NULL

	* rdf_hash_memory.c: Added prototype to remove gcc warning about
	abort()

	* rdf_node.c:
	(librdf_new_node_from_node,librdf_free_node,librdf_node_to_string):
	Added blank node support
	(librdf_node_get_blank_identifier): Added to get blank node
	identifier
	(librdf_node_set_blank_identifier): Added to set blank node
	identifier to new value, returning old

	* rdf_node.h: Added blank node type; added to union, added
	prototype of methods to set/get

2002-05-23  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_query.c (main): Test code: Use a legal 'triples' query.
	Init/close uri module

	* rdf_query_triples.c (librdf_query_triples_terminate): Free nodes
	if created

	* rdf_query_triples.c (librdf_query_triples_find_next_term):
	Tidying code

	* docs/api.sgml.in, docs/Makefile.am: Add query, query_triples
	modules to the api docs

	* Makefile.am: Added query module - sources, headers and test

	* example4.c: Added "query" command - CMD_QUERY using the
	librdf_query object and methods.  A whole lot of indenting too

	* librdf.h: Add query support - define librdf_query,
	librdf_query_factory; include rdf_query.h

	* rdf_init.c (librdf_free_world): Finish query module
	(librdf_world_open) Initialise query module

	* rdf_storage_hashes.c: Include string.h, stdlib.h for some system
	prototypes Exclude some hash groups prototypes when not used

	* rdf_storage.h: Added prototypes for
	librdf_storage_supports_query and librdf_storage_query

	* rdf_storage.c
	(librdf_storage_supports_query,librdf_storage_query): Added
	skeleton code

	* rdf_model.h: Added prototypes for librdf_model_query and
	librdf_model_query_string

	* rdf_model.c (librdf_model_query,librdf_model_query_string):
	Added

	* rdf_query.c, rdf_query.h, rdf_query_triples.c,
	rdf_query_triples.h: RDF Query modules

2002-05-15  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_hash_bdb.c (librdf_hash_bdb_delete_key_value): use
	DB_GET_BOTH rather than DB_SET when moving the cursor to ensure it
	deletes exact matches rather than just the first one that matches
	the (subject,predicate).  Thanks to Chad House for finding and
	fixing this.

2002-05-07  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.in: Check less libxml headers.  Move libxml disable
	library into 'if libxml' section

2002-04-29  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.in: test syntax

	* configure.in: Disable libxml if the library can be found but not
	the header files

	* docs/api.sgml.in: Fix SGML for DocBook 3.1

2002-04-27  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* python/test/test.py, perl/example.pl: Use any available rdf/xml
	parser

	* rdf_parser.c (librdf_get_parser_factory): Make name optional so
	can choose any rdf/xml parser.  Handle NULL or empty string name.

	* python/RDF.py: Update API to get add more python standard bits
	such as __eq__ and __ne__ and generating python sequences
	(node): Remove equals method, added __eq__, __ne__
	(model) Added sources, targets, arcs methods returning python
	sequences
	(iterator) Various changes to get it working
	(uri) Remove equals method, added __eq__, __ne__ Made method
	feature handle string uris

	* python/test/test.py: Expanded to print out model, parse into it,
	query model by statements and nodes and generally exercise most of
	the API techniques

	* python/setup.py: Make it a python script

	* README.html: Add ruby pointer Update date

	* redland.spec.in: Add manual pages Renamed perl modules.

	* docs/tcl.html: typo

	* configure.in: For XML_CONFIG use xml2-config, xml-config in
	order Updated header files to find for Raptor Make Raptor
	prioritise to use libxml Pick RAPTOR_XML_EXPAT/LIBXML for Raptor

	* acconfig.h: Added RAPTOR_XML_EXPAT/LIBXML to pick which XML
	parser for raptor

	* rdf_parser_raptor.c: Disable scanning for rdf:RDF feature - it
	doesn't work with raptor at present

	* INSTALL.html: Update words about autogen.sh Added ruby install
	link

	* docs/ruby.html: html

2002-04-26  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/ruby.html: Link to Liber, RubyRDF

	* docs/Makefile.am: Added ruby.html

	* docs/ruby.html: Ruby Interface

	* ruby/example.rb: Use ARGV

	* ruby/Makefile.am: Call test/example program with args

	* ruby/example.rb: Added header.  Fixed typo

	* ruby/example.rb: Filled in the example and it now works (had to
	hard code some arguments)

	* ruby/Makefile.am: install-ruby copies the Redland.so into
	probably the right place

2002-04-25  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_storage_hashes.c: Make the hash groups stuff optional unless
	LIBRDF_STORAGE_HASH_GROUPS defined

	* rdf_hash_bdb.c (librdf_hash_bdb_open): On bdb V3 open failure,
	emit an error even when not debugging.

	* perl/update-perl-api.pl: Update perl modules to 0.9.11 names

	* perl/lib/RDF/URI.pm, perl/lib/RDF/Stream.pm,
	perl/lib/RDF/Storage.pm, perl/lib/RDF/Statement.pm,
	perl/lib/RDF/RSS.pm, perl/lib/RDF/Parser.pm, perl/lib/RDF/Node.pm,
	perl/lib/RDF/Model.pm, perl/lib/RDF/Iterator.pm: End modules with
	1;

	* debian/README.Debian: Updated a little

	* rdf_node.c
	(librdf_new_node_from_literal,librdf_node_set_literal_value): For
	xml_language string, allow empty string to be the same as NULL
	(for ruby)

	* rdf_parser.c (librdf_get_parser_factory): Allow mime_type string
	to matching on empty string as well as null string (for ruby)

	* configure.in: Set CPPFLAGS when looking for bdb, in order to
	find db.h

	* redland-config.in: Add @LDFLAGS@ to --libs line

	* configure.in: Get ruby_prefix from Ruby configuration variable
	archdir

2002-04-24  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* INSTALL.html: typo

	* INSTALL.html: Added CVS instructions; now working

	* autogen.sh: sh syntax

	* autogen.sh: Find and link in raptor sources when nearby

	* docs/Makefile.am: Try to fix missing redland.3 problem for
	non-maintainer

2002-04-23  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_utf8.c, rdf_uri.c, rdf_storage.c, rdf_statement.c,
	rdf_parser.c, rdf_node.c, rdf_model.c, rdf_digest.c,
	rdf_concepts.c: Include some more headers to get missing library
	prototypes

	* repat/rdfparse.c, repat/rdfdump.c: Tidy to fix compiler
	warnings; renamed some shadowed local variables and remove unused
	code.

	* librdf.h: rdf_heuristics.h is not meant to be public

	* ruby/test.rb: Redland Ruby API test program

	* ruby/Makefile.am: No README yet

2002-04-22  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_parser_sirpac.c, rdf_parser_repat.c, rdf_parser_raptor.c,
	rdf_parser_libwww.c: Added RDF/XML mime type to parser
	registrations

	* rdf_parser_raptor.c: Updated ntriples URI

	* python/README: Point to skeleton docs

	* python/RDF.py: Fixes for Python 2.2 due to change in __ meaning
	(not tested much)

2002-04-14  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/redland.pod: Redland (librdf) library manual page

2002-04-03  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* ruby/Makefile.am, ruby/example.rb: Initial ruby stuff from
	danbri (not complete)

	* Makefile.am, configure.in: Updates for ruby (not working)

2002-03-07  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/java.html, docs/tcl.html: Update footer

	* docs/python.html: Now tested with python 2.1 also Update footer

	* docs/fix-pod-xhtml: Updates for pod2html changing Handle perl
	module names changing, new POD dirs

	* docs/Makefile.am: Added redland.3 (made from redland.pod via
	pod2man) manual page Added redland.pod; mostly generated from
	source files.  Add manual pages to distribution.

2002-02-12  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/perl.html: Updates for new perl module names

	* perl/MANIFEST.SKIP, perl/MANIFEST: Updated for new files (old
	api and new)

	* perl/Makefile.PL: Updates for new perl module names Ghastly
	hacks to get ExtUtils::MakeMaker to use RDF::Redland::CORE

	* perl/Makefile.am: Updates for new perl module names Change to
	build SWIG outputs here and move the generated perl to the right
	place lower down the tree.

	* perl/test.pl, perl/rss-dump.pl, perl/example.pl: Updates for new
	perl module names

	* perl/lib/RDF/Redland/Makefile.am: Added CORE.pm (from SWIG) to
	distribution; clean it too.

	* perl/lib/RDF/Redland/URI.pm, perl/lib/RDF/Redland/Stream.pm,
	perl/lib/RDF/Redland/Storage.pm,
	perl/lib/RDF/Redland/Statement.pm, perl/lib/RDF/Redland/RSS.pm,
	perl/lib/RDF/Redland/Parser.pm, perl/lib/RDF/Redland/Node.pm,
	perl/lib/RDF/Redland/Model.pm, perl/lib/RDF/Redland/Iterator.pm,
	perl/lib/RDF/Redland.pm: Updates for new perl module names

	* perl/lib/RDF/URI.pm, perl/lib/RDF/Stream.pm,
	perl/lib/RDF/Storage.pm, perl/lib/RDF/Statement.pm,
	perl/lib/RDF/RSS.pm, perl/lib/RDF/Parser.pm, perl/lib/RDF/Node.pm,
	perl/lib/RDF/Model.pm, perl/lib/RDF/Makefile.am,
	perl/lib/RDF/Iterator.pm, perl/lib/RDF.pm: Trampoline modules for
	old->new perl APIs Contains warning with a promise that these
	files go away next version

	* configure.in: Pick up to 5 versions of python2, 4 of perl5 - groan.
	Added perl/lib/RDF/Redland dir

2002-01-02  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/Makefile.PL:
	Pass -I and -L,-l flags to right config

	* Makefile.am:
	Added Makefile.PL to distribution

	* Makefile.PL:
	Fake MakeMaker Makefile.PL - top level Makefile.PL for Redland

	* perl/dc.rdf, ex2.rdf, ex1.rdf:
	Update to revised syntax

2001-12-09  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/Makefile.am, redland.spec.in, configure.in:
	Fix failure to build the Perl RPMs by passing Perl's installsitearch
	and man3dir configuration paths down to the SPEC file

2001-12-09  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/Makefile.am, redland.spec.in, configure.in:
	Fix failure to build the Perl RPMs by passing Perl's
	installsitearch and man3dir configuration paths down to the SPEC
	file

2001-11-30  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.in:
	Fixed bug: link -lexpat before other libs (inc libwww)

2001-11-26  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/python.html:
	Added notes on running python example.py
	Updated other python links

	* python/Makefile.am:
	Added example.py to release

	* python/test/test.py:
	Update to new python interface style.

	* python/example.py:
	Update to new python interface style.
	Added parsing test
	Carefully delete objects in right order before world is destroyed

	* python/RDF.py:
	Changed to more Python-ic interface using **kw args - thanks to
	Mark Nottingham
	(class uri, constructor): Use new args properly.
	(class parser): Mime type takes an optional string not object.
	(class parser, method feature): update comment, still needs fixing to
	allow python URI objects

2001-10-29  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_storage.c (librdf_delete_storage_factories):
	Zero storages after freeing all.

2001-10-13  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* java/redland-fragment.java:
	Correct comment

	* expat/xmltok/Makefile.am, expat/xmlparse/Makefile.am:
	Updated to use libtool properly

	* NEWS.html: Added statement grouping

2001-09-25  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Makefile.am:
	More updates for libtool
	Just use librdf.la (no librdf.a)
	Change all librdf_a to librdf_la
	Move example programs to automake style
	Fix test programs to work with libtool $(LINK) and -static librdf.la

	* configure.in:
	More updates for libtool:
	- remove SOBJS parts (not needed)
	- change from .o to .lo throughout

	* rdf_storage_hashes.c:
	Add statment grouping in 4th hash "groups".
	Bumped fixed number of hashes up one.
	(librdf_storage_hashes_group_add_statement,
	librdf_storage_hashes_group_remove_statement,
	librdf_storage_hashes_group_serialise,
	librdf_storage_hashes_group_serialise_end_of_stream,
	librdf_storage_hashes_group_serialise_next_statement,
	librdf_storage_hashes_group_serialise_finished): Added to implement
	groups in same style as for librdf_storage_list

2001-09-17  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Makefile.am:
	Added ex1.rdf, ex2.rdf to dist - for tests

	* ex1.rdf, ex2.rdf:
	Example RDF/XML for tests

	* rdf_storage_list.c:
	Added statement groups support:
	(librdf_storage_list_open): Create memory hash for groups
	(librdf_storage_list_close): Remove memory hash for groups
	(librdf_storage_list_group_add_statement): Added
	(librdf_storage_list_group_remove_statement): Added
	(librdf_storage_list_group_serialise_end_of_stream): Added
	(librdf_storage_list_group_serialise_next_statement): Added
	(librdf_storage_list_group_serialise_finished): Added
	Added factory method registrations.

	* rdf_model.h: Added prototypes for
	librdf_model_add_statements_group and
	librdf_model_remove_statements_group

	* rdf_model.c (librdf_model_print):
	Moved most code to librdf_stream_print
	(librdf_model_add_statements_group): Added
	(librdf_model_remove_statements_group): Added
	Added tests for add/remove statements group

	* rdf_storage.h:
	Added factory methods and prototypes for
	librdf_storage_group_add_statement,
	librdf_storage_group_remove_statement,
	librdf_storage_group_serialise

	* rdf_storage.c (librdf_storage_has_arc_out):
	Use of wrong storage method.
	(librdf_storage_group_add_statement,librdf_storage_group_remove_statement,librdf_storage_group_serialise): Added, calling storage method

	* rdf_list.h:
	librdf_list_remove prototype amended to return data pointer

	* rdf_hash_memory.c (librdf_free_hash_memory_node):
	Always free node
	(librdf_hash_memory_delete_key_value): Free value as well as vnode

	* rdf_list.c (librdf_list_remove):
	Return data pointer of stored item.

	* rdf_parser_sirpac.c, rdf_parser_repat.c, rdf_parser_raptor.c, rdf_parser_libwww.c:
	Handle NULL base_uri as written in API spec.

	* rdf_stream.c (librdf_stream_print):
	Added more docu-comment
	Send result to fh, not always stdout

2001-09-16  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_stream.h:
	Added prototype for librdf_stream_print

	* rdf_stream.c (librdf_stream_print):
	Added

	* configure.in, Makefile.am:
	Added libtool versioning directed from configure.in

2001-09-14  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* repat/Makefile.am, expat/xmltok/Makefile.am,
	expat/xmlparse/Makefile.am, redland.spec.in, configure.in,
	Makefile.am:
	Build librdf as shared library as well as static one

2001-09-07  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_hash.h:
	Prototype for librdf_hash_values_count added
	Hash factory method values_count added

	* rdf_hash.c (librdf_hash_values_count):
	Added
	Use it in test code

	* rdf_hash_bdb.c (librdf_hash_bdb_values_count):
	Added, does not seem possible to implement with BDB btrees/hashes
	without a large performance penalty.

	* rdf_hash_gdbm.c (librdf_hash_gdbm_values_count):
	Added, does not seem possible to do
	in GBDM.

	* rdf_hash_memory.c (librdf_hash_memory_values_count):
	Added and implemented.

	* rdf_storage_hashes.c (librdf_storage_hashes_size):
	Call librdf_hash_values_count on
	one hash to count size.

	* rdf_storage.c (librdf_storage_size):
	Amended return value

2001-09-05  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* INSTALL.html:
	Added more details of where Redland builds.
	Updated BDB versions.
	Moved linking warning

	* configure.in:
	Added new java directory

	* FAQS.html:
	Updated - now have Java API.

	* docs/java.html:
	Updated to new class names.

2001-09-03  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* java/org/librdf/redland/World.java,
	java/org/librdf/redland/URI.java,
	java/org/librdf/redland/Stream.java,
	java/org/librdf/redland/Storage.java,
	java/org/librdf/redland/Statement.java,
	java/org/librdf/redland/Parser.java,
	java/org/librdf/redland/Node.java,
	java/org/librdf/redland/Model.java,
	java/org/librdf/redland/Iterator.java:
	Use finalize() with correct signature.

	* java/test2.java:
	Redland Java test code using classes

	* java/org/librdf/redland/Storage.java (Storage):
	Store new Redland object, don't loose it

	* java/org/librdf/redland/World.java,
	java/org/librdf/redland/URI.java,
	java/org/librdf/redland/Stream.java,
	java/org/librdf/redland/Storage.java,
	java/org/librdf/redland/Statement.java,
	java/org/librdf/redland/Parser.java,
	java/org/librdf/redland/Node.java,
	java/org/librdf/redland/Model.java,
	java/org/librdf/redland/Iterator.java,
	java/org/librdf/redland/Hash.java:
	Styled API with Java BiCapitalisation for classes, lowerThenUpper
	for methods
	Made Iterator and Stream implement java.lang.Iterator API.

	* java/test1.java, java/example.java:
	Updated for new java package, classes

	* java/Makefile.am:
	Added java files, class files
	Added classpath, use env to run java, javac
	Added test2.java and run it with test-java target.

	* java/test1.java, java/skeleton.java:
	Updates for Java package and class name changes

	* java/Makefile.am:
	Changed class path to org.librdf.redland and C interface class to core

	* java/org/librdf/redland/Makefile.am:
	Changed class names to Java style

	* java/org/librdf/Makefile.am:
	Makefile.am

	* java/org/librdf/redland/Model.java:
	Remove model_ from some method names

2001-08-28  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* NEWS.html: No space after <h2>!

	* configure.in:
	Bump version to 0.9.11

	* Snapshotted redland_0_9_10 for 0.9.10 release

	* configure.in: Tidy PROGS macros
	Added SWIG test and version test, in order to check if can build java.

	* perl/Makefile.am: Tidy perl macros

	* perl/lib/RDF/Model.pm (serialise):
	Use RDF::Stream constructor correctly

2001-08-22  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* README.html:
	Added java API pointers.

	* INSTALL.html:
	Added java API pointer.

	* docs/java.html:
	Updated for new Java Interface

	* java/test.java, java/Makefile.am:
	Updated for first version of SWIG Java interface

	* java/org/librdf/world.java, java/org/librdf/uri.java,
	java/org/librdf/stream.java, java/org/librdf/storage.java,
	java/org/librdf/statement.java, java/org/librdf/parser.java,
	java/org/librdf/node.java, java/org/librdf/model.java,
	java/org/librdf/iterator.java, java/org/librdf/hash.java,
	java/org/librdf/Makefile.am, java/org/Makefile.am,
	java/skeleton.java, java/redland-fragment.java, java/example.java:
	First version of SWIG Java interface

	* java/redland-java.c, java/NativeName.java:
	Not used

	* java/README:
	Notes not needed anymore

	* configure.in:
	Updated Berkeley/Sleepcat DB testing for V3, V2, V1 in order.
	Added java dirs

	* Makefile.am: Added java dir

2001-08-15  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_parser_raptor.c:
	Remove checks for obsolete XML_NAME types.
	Update to use identifier_type enum names
	Add some more error checking if types do not match.

	* rdf_concepts.h:
	Added prototype for librdf_get_concept_by_name

	* rdf_concepts.c (librdf_get_concept_by_name):
	Added

2001-08-14  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* python/test/test.py:
	Use memory storage not bdb - BDB may not be available or required.

	* perl/lib/RDF/RSS.pm:
	Use raptor as parser.
	(format_literal): Fix quoting.
	Allow description content through raw, including any HTML formattign.

2001-07-23  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* python/RDF.py:
	(RDF.parser constructor) Allow pass through of null mime_type (None in python)

	* perl/lib/RDF/Parser.pm:
	(RDF::Parser::new) Allow pass through of null mime_type (undef in
	perl)

	* docs/Makefile.am:
	Moved SGML docs to MAINTAINERCLEAN again

	* rdf_parser_raptor.c:
	Fixes after changes for daml:collection and ntriples support, with
	anonymous nodes that have non-URIs.
	(librdf_parser_raptor_make_node_from_anon): Added to support above.

	* INSTALL.html:
	Updated BDB notes - tested with 3.2.9 also

2001-07-17  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_parser.c:
	Add raptor to list of parser to test.
	Init URI module and dependent modules that are needed by parsers
	that use URIs for identification (raptor ntriples is only one so far)

	* configure.in:
	Updated for raptor ntriples parser

	* docs/api.sgml.in:
	Added world class - from rdf_init.c

2001-07-16  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_parser_raptor.c:
	Updated ntriples URI

	* rdf_parser_raptor.c:
	Added raptor ntriples parser called "ntriples"

	* debian/README.Debian:
	Added apt config that might work someday.

	* debian/scanpackages.override:
	guess again

2001-07-12  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/Makefile.am: Raptor now rapier

	* debian/control:
	Updated Standards-Version to 3.5.5

	* debian/README.Debian:
	Updated after more experience.

	* debian/Makefile.am:
	Debian package stuff

	* debian/doc-base.package:
	Install documents in /usr/share/doc/redland/html

2001-07-11  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* debian/scanpackages.override:
	override file for dpkg-scanpackages

2001-07-10  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Makefile.am:
	tinkered with HTML to text rule

	* configure.in:
	Removed u16, u64, unsigned short, unsigned long long - not used

	* rdf_types.h:
	Removed u16, u64 - not used

2001-07-09  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/Statement.pm (new_from_nodes):
	Added documentation about copying nodes.

	* rdf_parser_raptor.c:
	Now called raptor

2001-07-04  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* java/UK/ac/bristol/ilrt/redland/Hash.java,
	java/UK/ac/bristol/ilrt/redland/Iterator.java,
	java/UK/ac/bristol/ilrt/redland/Model.java,
	java/UK/ac/bristol/ilrt/redland/Node.java,
	java/UK/ac/bristol/ilrt/redland/Parser.java,
	java/UK/ac/bristol/ilrt/redland/redland.java,
	java/UK/ac/bristol/ilrt/redland/Statement.java,
	java/UK/ac/bristol/ilrt/redland/Storage.java,
	java/UK/ac/bristol/ilrt/redland/Stream.java,
	java/UK/ac/bristol/ilrt/redland/URI.java,
	java/Makefile.am, java/NativeName.java, java/README,
	java/redland-java.c, java/test.java:
	Imported java test code

2001-07-03  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_statement.c, rdf_node.c:
	Make object comparisons fail if any pointer is NULL

	* NEWS.html: Local parser now Raptor

2001-07-02  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_parser.h, rdf_parser.c, configure.in, acconfig.h,
	Makefile.am: Rapier now raptor

2001-06-07  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* NEWS.html:
	Post release, added link to rapier changes

	* configure.in:
	Bump version to 0.9.10

	* Snapshotted redland_0_9_9 for 0.9.9 release

	* NEWS.html:
	Updated for 0.9.9 release

	* debian/README.Debian:
	Updated after success!

	* debian/rules.in:
	Nasty horrible perl inline Makefile-editing finally makes debian
	package building work.

2001-06-06  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* debian/README.Debian:
	Updated with what might work someday...

	* configure.in, Makefile.am:
	Pick a local tar and set TAR variable

	* configure.in, Makefile.am:
	Changed rapier macro names to work better with automake/autoconf.

2001-06-04  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.in:
	Yet more xml parser checking fixes.

	* acconfig.h:
	Added HAVE_XML_SetNamespaceDeclHandler

2001-06-01  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.in, Makefile.am:
	More fixes to make rapier sources optional.

	* Makefile.am, configure.in:
	Add rapier sources to dist only when present

	* configure.in:
	Set have_rapier=0 by default

	* configure.in:
	Text compile and run of programs linked with -lexpat.
	Emit summary of things that are configured - xml, rdf parsers,
	digests, BDB

2001-05-30  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* README.html:
	Updated sources to include snapshots and web-cvs

	* redland.spec.in:
	Use make install-perl to install the perl modules

	* perl/example.pl:
	Close down storage explicitly to ensure data is flushed ok.

2001-05-16  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Makefile.am:
	Added rpm/redland.spec to dist

2001-05-11  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_parser_sirpac.c:
	Quote URI field with quotes '%s' in format string for invoking
	SiRPAC java

2001-05-10  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/Storage.pm:
	Document more storage options.

2001-05-09  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* redland.spec.in:
	For perl rpm, use auto/Redland not auto/redland

	* redland.spec.in:
	Added missing RDF.pm to perl RPM

	* README.html: HTML

2001-05-08  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/Node.pm (type):
	Added an example.

	* perl/lib/RDF/Storage.pm:
	Docs: added more details and examples

2001-04-27  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/java.html: Java interface

2001-04-26  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* README.html:
	Moved java stuff to java placeholder page.

	* docs/Makefile.am:
	Added java.html placeholder

2001-04-19  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* debian/rules.in:
	More fixes from attempts to get this working on a pure debian system

	* perl/test.pl:
	Added testing of iterators and individual warnings, more coverage of
	usual code calls.

	* perl/lib/RDF/Model.pm (sources,arcs):
	Fix prototypes.

	* perl/lib/RDF/Iterator.pm (end):
	Call Redland::librdf_iterator_end not old function

2001-04-12  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/test.pl:
	Use in memory hashes for testing, not everyone has a working BDB

	* perl/Makefile.PL:
	Get version numbers from ../configure.in using changed style.

2001-04-03  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_parser_sirpac.c (librdf_parser_sirpac_get_next_statement):
	Don't reuse 'p' and change
	value inside inner loop.

2001-03-29  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_uri.h, rdf_uri.c, rdf_stream.c, rdf_storage.c,
	rdf_statement.c, rdf_parser_sirpac.c, rdf_parser_repat.c,
	rdf_parser_rapier.c, rdf_parser_libwww.c, rdf_parser.c,
	rdf_node.h, rdf_node.c, rdf_model.c, rdf_list.c, rdf_iterator.c,
	rdf_init.c, rdf_hash_memory.c, rdf_hash_gdbm.c, rdf_hash_bdb.c,
	rdf_hash.c, rdf_digest_openssl.c, rdf_digest_md5.c, rdf_digest.c,
	rdf_concepts.c:
	Comment documentation updated with librdf_world arguments

	* debian/rules.in, debian/shlibs.local.ex, debian/control,
	debian/copyright, debian/dirs, debian/doc-base.package,
	debian/docs, debian/manpage.1.ex, debian/changelog,
	debian/README.Debian:
	Debian package support

	* Makefile.am: Added debian dir

	* configure.in:
	More XML parser config games - note which system library name found
	Substitute $expat_libs
	Added debian makefile, rules

	* perl/lib/RDF/RSS.pm:
	(as_xhtml) format_literal - Changed encoding to UTF-8 and don't quote
	>255 char entities.

2001-03-27  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* python/RDF.py, perl/lib/RDF/Model.pm, perl/lib/RDF/Iterator.pm:
	Updated Perl/Python interfaces for changed iterator interface, added
	deprecated warnings.

	* rdf_stream.c, rdf_storage_list.c, rdf_storage_hashes.c,
	rdf_storage.c, example4.c, example1.c, Redland.i, rdf_model.c,
	rdf_list.c, rdf_hash_memory.c, rdf_hash_gdbm.c, rdf_hash_bdb.c,
	rdf_hash.c:
	Changed iterator test-end from have_elements to is_end and
	inverted logic.
	Replaced iterator_have_elements with !iterator_end

	* rdf_iterator.h:
	Changed iterator test-end from have_elements to is_end and
	inverted logic.
	Renamed librdf_iterator_set_map to librdf_iterator_add_map
	Added librdf_iterator_map_remove_duplicate_nodes

	* rdf_iterator.c:
	Changed iterator test-end from have_elements to is_end and
	inverted logic.
	Added list of mapping functions for each iterator, not just one.
	(librdf_iterator_free_iterator_map): Added, helper function for
	mapping.
	(librdf_iterator_add_map): Renamed from librdf_iterator_set_map and
	now uses the list.
	(librdf_iterator_map_remove_duplicate_nodes): Dummy mapping function,
	not used yet.

	* configure.in:
	Set LIBS and LDFLAGS more carefully to set lib search path in LDFLAGS
	and -lLIb in LIBS
	Include stdio.h in tests where NULL is referenced.

2001-03-22  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_storage.c
	(librdf_storage_get_arcs_in,librdf_storage_get_arcs_out):
	Added - pass to factory or implement here using
	librdf_storage_node_stream_to_node_create.  However this isn't good
	enough since it needs to filter out duplicates but this requires
	changes to iterator so new FIXME.
	(librdf_storage_has_arc_in,librdf_storage_has_arc_out): Added -
	pass to factory or implement here by getting an iterator of answers
	and checking it isn't empty.

	* rdf_storage.h:
	Added prototypes for arc in/out tests, get arc in/out methods

	* rdf_model.c (librdf_model_get_arcs_in,librdf_model_get_arcs_out):
	Added - pass to storage
	(librdf_model_has_arc_in,librdf_model_has_arc_out): Added - pass
	to storage

	* rdf_model.h:
	Added prototypes for arc in/out tests, get arc in/out methods

	* example4.c:
	Added check for librdf_model_has_arc_in and librdf_model_has_arc_out

	* example4.c:
	Added arcs-in, arcs-out commands

2001-03-21  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_utf8.c, rdf_uri.c, rdf_statement.c, rdf_node.c,
	rdf_heuristics.c, rdf_hash.h, rdf_hash.c, example4.c, example1.c:
	Added some missing casts found by compiling as C++

	* librdf.h:
	Removed RDF_World reference - local to rdf_init.c

	* rdf_hash.c (librdf_hash_from_string):
	Fixed ancient bug in \-escaping.  Added
	test code for it.

2001-03-20  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/RSS.pm (description):
	Take DC description first if there is one

	* perl/lib/RDF/RSS.pm:
	(as_xhtml) Handle undef arg in sub format_literal

2001-02-23  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_parser_rapier.c (librdf_parser_rapier_new_statement_handler):
	Ignore statements with bare XML non-namespaced elements
	(librdf_parser_rapier_parse_common): Turn on scanning (hunt for
	rdf:RDF) by default.

2001-02-21  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_parser_rapier.c:
	Handle receiving XML literal content

	* rdf_parser_sirpac.c:
	Fixed negative use of librdf_uri_equals

	* python/RDF.py:
	Provide Python interfaces to librdf_node_equals and librdf_uri_equals.

	* rdf_uri.c (librdf_uri_equals):
	Fix documentation

	* rdf_statement.c (librdf_statement_equals):
	Fix documentation

	* perl/lib/RDF/URI.pm, perl/lib/RDF/Node.pm:
	Provide Perl interfaces to librdf_node_equals and librdf_uri_equals.

	* Redland.i:
	Export librdf_node_equals and librdf_uri_equals.

	* rdf_storage_hashes.c, rdf_statement.h, rdf_statement.c,
	rdf_node.h, rdf_node.c:
	(librdf_node_init, librdf_statement_init) Added methods for
	initialisation of statically allocated nodes, statements.

	* perl/lib/RDF/Statement.pm (new):
	Add missing reference to world in constructor.

2001-02-20  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_storage.h, rdf_digest.h, librdf.h:
	Move some opaque struct defines back to librdf.h

	* tcl/test.tcl, tcl/example.tcl:
	Update tcl interface for librdf_world changes

	* tcl/Makefile.am:
	Clean generated pkgIndex.tcl

	* python/RDF.py:
	Update python interface for librdf_world changes

	* perl/lib/RDF/URI.pm, perl/lib/RDF/Storage.pm,
	perl/lib/RDF/Statement.pm, perl/lib/RDF/Parser.pm,
	perl/lib/RDF/Node.pm, perl/lib/RDF/Model.pm, perl/lib/RDF.pm,
	perl/test.pl:
	Update perl interface for librdf_world changes

	* Redland.i:
	Update scripting interface for librdf_world changes

	* example4.c, example3.c, example2.c, example1.c:
	Update examples for librdf_world changes

	* Many files:
	Use librdf_world class for all main constructors (not copy
	constructors).

2001-02-19  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/README.html:
	Added link to WWW10 paper pre-print.

2001-02-18  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Many files:
	New class librdf_world handling Redland environment

	* rdf_parser_sirpac.c (librdf_parser_sirpac_get_next_statement):
	Handle multi-line literals.

2001-02-13  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/rss-dump.pl:
	Updated out-of-date RSS 1.0 URIs

	* perl/Makefile.am:
	Add rss-dump.pl RSS 1.0 example to distribution

2001-02-11  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/RSS.pm (as_xhtml):
	Quote time keyword in associate array arg.

	* perl/Makefile.PL:
	Strip -L.. -lrdf when line has no end space

2001-02-09  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/tcl.html:
	Other tools section updated with more corrections and details for
	XOTcl and related.

	* docs/tcl.html:
	Other tools section rewritten to attribute work correctly.

2001-02-07  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* tcl/example.tcl:
	Remove old meaningless comment

	* tcl/Makefile.am:
	clean-local: remove junk

	* rdf_node.h:
	Declare librdf_node_get_type_as_string only when debugging.

	* rdf_node.c (librdf_node_get_type_as_string):
	Compile only when debugging - meant
	to be internal.  Remove docs from public view.

	* librdf.h:
	Use NEED_EXPAT_SOURCE to pick correct header when local expat source
	is compiled.

	* configure.in:
	Use NEED_EXPAT_SOURCE when local expat source is compiled in.

	* acconfig.h: Added NEED_EXPAT_SOURCE

	* INSTALL.html:
	Fix wrong -- options for SiRPACs

	* docs/README.html:
	Update Title, Copyright year

	* FAQS.html:
	Updated GPL license combinations - even more complex now.

	* FAQS.html: Added: Redland name #2
	Added: Java interface note

	* docs/tcl.html:
	Added warning about file: uris

	* docs/tcl.html: Tidy words.

	* docs/tcl.html:
	Added other Tcl APIs and apps section.

2001-02-05  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* README.html: Moved mailing list egroups->yahoo groups

	* configure.in: Bump version to 0.9.9

	* Snapshotted redland_0_9_8 for 0.9.8 release

2001-02-04  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Many files:
	Make new boilerplate point to LICENSE not INSTALL - Doh!

	* LICENSE.html:
	Specify particular versions of licenses.

	* Many files:
	Pruned license boilerplate

	* python/example.py:
	Python 2.0 example

	* redland.spec.in:
	Set release to SNAP by default
	Use --enable-release to turn on optimisations only when building RPMs

	* configure.in:
	Added --enable-release to NOT remove -O2 from cflags.

	* docs/README.html, INSTALL.html, README.html:
	Updates for Tcl interface

	* docs/tcl.html: Tcl Interface

	* docs/Makefile.am: Added tcl.html

	* tcl/test.tcl: Tidied code

	* tcl/example.tcl:
	Tcl interface example code

	* tcl/Makefile.am: Added example.tcl

	* configure.in: Added Tcl interface

	* Redland.i:
	Updates for Tcl interface

	* tcl/test.tcl, tcl/README, tcl/Makefile.am:
	Tcl API

	* python/test/test.py:
	Updated for changed model add_statment api

2001-01-29  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF.pm (DESTROY):
	Add () to librdf_destroy_world call to make perl 5.6
	happy.

2001-01-26  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.in:
	Another xml parser check attempt.

	* configure.in:
	Need more Xtrick for tests

	* Makefile.am:
	Added dist-hook rule to allow symlinks to rapier sources and make
	dist building continue to work.

2001-01-25  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_parser_rapier.c:
	Remove some unused vars.
	Updated for changed Rapier API and real Redland URI objects.

	* perl/lib/RDF/RSS.pm (as_xhtml):
	Don't output : after item link/title if there is no description

2001-01-24  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Makefile.am:
	s/rapier_parser.c/rapier_parse.c/

	* docs/Makefile.am: Add rapier

	* rdf_parser_rapier.c:
	Make list of stored statements static and clean up properly.
	Handle ordinal predicates simply.

	* rdf_parser_rapier.c:
	Final tweaks to get it basically working.

	* rdf_parser_libwww.c (librdf_parser_libwww_parse_uri_into_model):
	Fix return code logic.

	* rdf_utf8.c, rdf_uri.c, rdf_stream.c, rdf_storage_list.c,
	rdf_storage_hashes.c, rdf_storage.c, rdf_statement.c,
	rdf_parser_sirpac.c, rdf_parser_repat.c, rdf_parser_libwww.c,
	rdf_node.c, rdf_model.c, rdf_memory.c, rdf_list.c, rdf_iterator.c,
	rdf_init.c, rdf_heuristics.c, rdf_hash_memory.c, rdf_hash_gdbm.c,
	rdf_hash_bdb.c, rdf_hash.c, rdf_files.c, rdf_digest_openssl.c,
	rdf_digest_md5.c, rdf_digest.c, rdf_concepts.c:
	Define LIBRDF_INTERNAL outside

	* rdf_parser.h, rdf_parser.c:
	Added Rapier

	* rdf_parser_rapier.c:
	Rapier RDF parser for Redland

	* Makefile.am: Add rapier

	* configure.in:
	Improve version calculations
	Find old and new expat headers
	Add rapier parser
	Defined LIBRDF_INTERNAL here

	* acconfig.h: Added Rapier define

	* rdf_parser_redland.c:
	Renamde rdf_parser_redland.c to rdf_parser_rapier.c

2001-01-23  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_concepts.h, rdf_concepts.c:
	Added rdf:li concept

	* perl/lib/RDF/RSS.pm:
	(as_xhtml) Handle dc:subject being a URI

2001-01-22  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Makefile.am:
	Add redland.spec.in to dist

2001-01-19  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/Storage.pm:
	Removed use Redland
	Futile attempt to get proper destruction before perl global
	destruction phase.

	* perl/lib/RDF/Model.pm:
	Removed use Redland
	Improved code comments.
	Futile attempt to get proper destruction before perl global
	destruction phase.
	Removed several node copies no longer needed.

	* perl/lib/RDF.pm: Moved use Redland

	* perl/rss-dump.pl:
	Added configuration to show properties in proposed modules.

	* rdf_uri.h:
	Added librdf_new_uri_relative_to_base

	* rdf_uri.c (librdf_new_uri_relative_to_base):
	Added - start at attempt to create
	absolute URI from abs URI+relative URI.
	Added tests for above.

2001-01-18  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/Stream.pm:
	Removed use Redland
	(new): No need for free statements arg, they are never freed now.
	(DESTROY): Empty references asap.
	(next): Update to return a new statement always or undef

	* perl/lib/RDF/Parser.pm:
	Removed use Redland
	(parse_as_stream): Fix new RDF::Stream args

	* perl/lib/RDF/Statement.pm:
	Removed use Redland
	Tweak debugging message.

	* perl/lib/RDF/URI.pm:
	Removed use Redland

	* perl/lib/RDF/RSS.pm (as_xhtml):
	Fix search form output.
	Updated various methods to use get_targets/get_target etc. as needed.
	Remove most RDF::Node copying, no longer needed since above methods
	return new nodes each time.
	(RDF::RSS::Node new): Remove RDF::Node copy.

	* rdf_stream.c (librdf_stream_next):
	Changed - returns a new statement object each
	time.
	(librdf_stream_end): Return not empty when stream contains a stored
	item.

	* rdf_storage_hashes.c (librdf_storage_hashes_add_statements):
	Free statement delivered by
	stream after using it.

	* rdf_storage.c:
	(librdf_storage_find_statements) Improve doc comments

	* rdf_parser_libwww.c (librdf_parser_libwww_new_triple_handler):
	Updated to free statement
	if added to a model.
	(librdf_parser_libwww_serialise_finished): Free any statements stored
	on list before finishing.

	* rdf_model.c:
	(librdf_model_get_source,librdf_model_get_arc,librdf_model_get_target):
	Don't free node that is returned, let the application do that now.
	Amend test code to free statement added to the model.

	* rdf_concepts.c: Added test code

	* example4.c:
	Update code to free statement after add_statement call.

	* example3.c:
	Update code to free statement, previously became owned by model after
	add_statement.

2001-01-17  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/Node.pm:
	Zap 'use Redland'
	Tidy debug message.

	* perl/lib/RDF/Iterator.pm:
	Zap 'use Redland'
	Tidy comments.
	(DESTROY) Remove creator reference after tidy

2001-01-16  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/rss-dump.pl:
	Emit literals as latin1, not UTF8

	* perl/example.pl:
	Change wording; add_statement does not take ownership of adding
	statement

	* Makefile.am:
	Added rdf_concepts_test to TESTS

	* example4.c:
	Remove extra node declaration.

	* example4.c:
	Added test code for source, arc, target model methods

2001-01-08  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/RSS.pm:
	Fixed imageAlign doc

	* perl/lib/RDF/RSS.pm:
	Tidied as_xhtml documentation.

	* perl/lib/RDF/RSS.pm (as_xhtml):
	Moved to METHODS section.

	* perl/lib/RDF/RSS.pm (as_xhtml):
	Added.

2001-01-05  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.in: Bump version to 0.9.8

	* Snapshotted redland_0_9_7 for 0.9.7 release

	* redland.spec.in: Mising % typo
	Make sure default python is used even if other versions are present.

	* redland.spec.in:
	Added perl manual pages to docs in perl rpm

	* Makefile.am:
	Add rdf_utf8.h to installed includes

	* NEWS.html:
	Updated for 0.9.7 release

2001-01-04  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Redland.i:
	Added librdf_node_get_literal_value_as_latin1

	* rdf_node.h:
	Added prototype for librdf_node_get_literal_value_as_latin1

	* rdf_node.c (librdf_node_get_literal_value_as_latin1):
	Added to return literal value converted from UTF-8 to ISO Latin-1
	(may discard chars) using utf8 utility functions.
	Added test for above.

	* rdf_utf8.c (librdf_utf8_to_latin1):
	Fixed off-by-one in allocating memory, copying.

	* rdf_utf8.h:
	Include rdf_types here to define u32 if needed

	* perl/lib/RDF/URI.pm, perl/lib/RDF/Stream.pm,
	perl/lib/RDF/Storage.pm, perl/lib/RDF/Statement.pm,
	perl/lib/RDF/RSS.pm, perl/lib/RDF/Parser.pm, perl/lib/RDF/Node.pm,
	perl/lib/RDF/Iterator.pm:
	Added SYNOPSIS pod section.
	Made module be 'strict' - fix some things for that.

	* perl/lib/RDF/Model.pm:
	Added SYNOPSIS pod section.
	Made module be 'strict' - fix some things for that.
	Added warning about deprecated get_sources,get_arcs,get_targets

	* rdf_model.c:
	Added casts for librdf_node pointers retrived from iterators (for c++)

	* rdf_files.c:
	template => file_template (for c++)

	* configure.in:
	Make Repat compile with (old) expat in sources as well as old/new
	expat in system.
	Remove Repat portability hacks, having updated sources.

	* repat/rdftest.c, repat/rdfparse.h, repat/rdfdump.c:
	Portability fixes - includes, _MAX_PATH => PATH_MAX

	* Makefile.am:
	Added DIST_SUBDIRS so distribution contains even
	conditionally-included sub directories
	Fixed wrong -D defines in MEM debugging macros

2001-01-03  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/perl.html:
	Added links to perl pod docs

	* docs/api.sgml.in: Added utf8 class

	* rdf_stream.h:
	Protect private method

	* rdf_iterator.c: Comment improvement

	* rdf_list.h (librdf_list_clear,librdf_list_foreach):
	Added prototypes

	* rdf_list.c (librdf_list_clear):
	Added to empty the list
	(librdf_list_foreach): Added to walk the list and apply function to
	each data node

	* rdf_storage_list.c (librdf_storage_list_add_statement):
	Don't dispose of passed in statement.

	* rdf_storage_hashes.c:
	Renamed some incredibly long identifiers to be just very long
	instead.

	* rdf_model.c (librdf_model_add_statement):
	No longer owns incoming statement -
	just too annoying to use in practice.
	(librdf_model_get_source,librdf_model_get_arc,librdf_model_get_target):
	Added, returning one arbitrary matching node for given pair of nodes

	* rdf_model.h:
	(librdf_model_get_source,librdf_model_get_arc,librdf_model_get_target):
	Added, returning one arbitrary matching node for given pair of nodes

	* Redland.i, python/RDF.py:
	Updated for changes to Model API

	* perl/lib/RDF/Stream.pm, perl/lib/RDF/Storage.pm,
	perl/lib/RDF/Statement.pm, perl/lib/RDF/Node.pm:
	Tidy debugging messages.

	* perl/lib/RDF/Model.pm:
	Tidy debugging messages.
	Remove reference to storage from iterator constructors

	* perl/lib/RDF.pm:
	Added RDF::World class (hidden) to do global destruction -
	librdf_destroy_world

	* perl/Makefile.am: Pass in MEM_LIBS

	* perl/Makefile.PL:
	Simplified use of linking libs; maybe.
	Pull in memory debugging libs

	* perl/lib/RDF.pm, perl/lib/RDF/URI.pm, perl/lib/RDF/Stream.pm,
	perl/lib/RDF/Storage.pm, perl/lib/RDF/Statement.pm,
	perl/lib/RDF/RSS.pm, perl/lib/RDF/Parser.pm, perl/lib/RDF/Node.pm,
	perl/lib/RDF/Model.pm, perl/lib/RDF/Iterator.pm:
	Added plain old documentation (POD)

2000-12-30  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* expat/Makefile.am, expat/xmltok/Makefile.am:
	Moved rule using gennmtab to xmltok dir

	* configure.in: expat,h -> expat.h

2000-12-29  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* repat/Makefile.am: Added rdftests.i

	* docs/perl.html: Added CARA perl API

	* docs/Makefile.am:
	Extra 'a' in api-big.html rule

	* acconfig.h:
	Added RDFPARSE_INCLUDE_XMLPARSE for expat headers

	* configure.in:
	Updated to handle Repat 2000-12-24 with rdftest and old/new expat
	headers

	* repat/Makefile.am:
	Updated to handle Repat 2000-12-24 with rdftest

	* repat/rdftest.c, repat/rdftests.i, repat/rdfparse.h,
	repat/rdfparse.c, repat/rdfdump.c, repat/CHANGES:
	Updated to Repat 2000-12-24

	* repat/expat.h:
	Deleted, fixed via configure

2000-12-06  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* redland.spec.in:
	Updated description
	Tidied SMP code (never tested)
	Made clean code be careful
	Changed installed user/groups
	Updated list of includes

2000-12-01  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/README.html:
	Updated words - HTML API docs always included now

	* docs/README.html, README.html:
	Tidied for style change.

	* NEWS.html:
	Style changed - added 'h2's

	* perl/dc.rdf:
	Small test file for example.pl

	* perl/Makefile.am:
	Added dc.rdf test file to dist

2000-11-30  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/Makefile.am:
	Added example.pl to the release

	* example4.c:
	Updated for new concept names

	* TODO.html, README.html, NEWS.html, LICENSE.html, INSTALL.html,
	FAQS.html: Changed XML encoding to Latin-1

2000-11-27  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_utf8.h, rdf_utf8.c:
	UTF-8 support

	* Makefile.am:
	Added rdf_utf8.c, rdf_utf8.h

	* rdf_parser_sirpac.c:
	Updated for new concept names

	* rdf_concepts.h, rdf_concepts.c: Amended concepts to include
	rdf:RDF and rdf:Description - useful for Redland's RDF parser.

2000-11-22  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_uri.c (librdf_new_uri_normalised_to_base):
	Handle fragment URIs relative to
	base.

	* rdf_uri.c (librdf_new_uri_normalised_to_base):
	When URI is NULL or "" and
	relative to a base URI, just make a new URI from the base URI.

	* rdf_parser_repat.c:
	XML literals - note problem with namespaces in results.

	* docs/python.html, docs/perl.html, docs/README.html, TODO.html,
	README.html, NEWS.html, LICENSE.html, INSTALL.html, FAQS.html:
	XHTML header fixes

2000-11-21  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* repat/Makefile.am:
	Added expat.h - shim since Repat moved to new expat sources, header
	files

	* rdf_parser_repat.c:
	Final changes to interface with repat to handle parseType=literal and
	rdf:_'ordinal'
	Pass on some more fatal errors and tidy up better when things go
	wrong at RDF or XML layer.

	* perl/rss-dump.pl:
	Show namespaced-properties off channel.

	* perl/lib/RDF/RSS.pm (items):
	Return channel items in correct order (from rdf:_n properties)

	* repat/repat.html, repat/rdfparse.h, repat/expat.h, repat/README,
	repat/CHANGES: Synchronised with repat 2000-11-10 (no code changes)

2000-11-19  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_statement.h:
	Replaced #define-s for statement parts with enum; makes for
	potentially better compiler checking

2000-11-17  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/rss-dump.pl:
	Updated to dump all & particular namespaced properties off nodes.

	* perl/lib/RDF/Node.pm:
	Defined node type constants for use with type method.

	* perl/lib/RDF/RSS.pm (property):
	Added, returns value of a property off a node.
	(properties): Added, returns all properties off a node.
	(properties_with_ns_prefix): Added, returns NS-prefixed properties
	off a node.

2000-11-15  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/RSS.pm:
	Removed accessors since RDF::RSS is a RDF::Model and can use methods
	from there.
	Renamed method RDF::RSS::Node method url to image_url to lessen
	confusion with uri method on RDF::Node

2000-11-14  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_stream.c (librdf_stream_from_node_iterator_next_statement):
	Added cast to librdf_node* from iterator get_next

	* rdf_storage_hashes.c:
	(librdf_storage_hashes_add_remove_statement,
	librdf_storage_hashes_contains_statement,
	librdf_storage_hashes_node_iterator_create)
	Added some missing casts from return value of LIBRDF_MALLOC
	Replaced some char* with unsigned char* when used as
	encoding/decoding buffers
	(librdf_storage_hashes_serialise_next_statement,
	librdf_storage_storage_hashes_node_iterator_get_next): Added casts for
	statement encode/decode parameters (from void*)

	* rdf_parser_repat.c (librdf_parser_repat_serialise_finished):
	Added cast to librdf_statement* from list pop

	* rdf_parser_libwww.c (librdf_parser_libwww_parse_common):
	Store pcontext (correct type)
	rather than context (void*)
	(librdf_parser_libwww_get_next_statement): Added cast to
	librdf_statement* from list pop

	* rdf_hash.c:
	Added some missing casts from return value of LIBRDF_MALLOC
	and some arguments to strlen

	* perl/lib/RDF/RSS.pm:
	RDF::RSS ISA RDF::Model now - makes code tidier too.

2000-11-13  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* TODO.html, README.html, NEWS.html, LICENSE.html, INSTALL.html,
	FAQS.html: Tidy some HTML formatting, rewordings.

2000-11-12  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/Makefile.am:
	How did python references get in here?

2000-11-08  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Redland.i:
	Declare librdf_iterator_get_next returns librdf_node* which is true,
	at the user level.

	* configure.in:
	Make 'make clean' work when python isn't available

	* rdf_parser.c:
	Tidy of warning / error message format

	* docs/python.html, docs/perl.html:
	Mention RDF 'world' class things

	* perl/MANIFEST:
	Added RDF::RSS and rss-dump.pl

	* perl/rss-dump.pl:
	RSS 1.0 test program for RDF::RSS

	* perl/lib/RDF/URI.pm (_new_from_object):
	Created.

	* perl/lib/RDF/Node.pm (new_from_uri_string):
	Die if no URI is given.
	(uri): Return an RDF::URI object

	* perl/lib/RDF/Model.pm (find_statements,get_arcs,get_sources,get_targets):
	Retrieve all results if evaluated in a Perl list context.  Makes
	this common thing easy to do.  In scalar context return a
	Rdf::Stream of RDF::Statement-s or RDF::Iterator of RDF::Node-s as
	before.

	* perl/lib/RDF/Makefile.am: Added RSS.pm

	* perl/lib/RDF/Iterator.pm (new):
	Take a list of creators for the nodes that were used to create
	the iteration.

	* perl/lib/RDF/RSS.pm:
	Redland Perl RSS 1.0 module

2000-11-07  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* INSTALL.html:
	Fix broken link to SiRPAC (Stanford) jar file

2000-11-06  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.in: Bump version to 0.9.7

	* Snapshotted redland_0_9_6 for 0.9.6 release

	* redland.spec.in: Tidy for 0.9.6 release

	* NEWS.html: Updated for 0.9.6 release

	* docs/python.html:
	Added Python 2.0 / 1.5 notes

	* python/setup.py:
	Use string.strip for python 1.5/2.0 compatibility

	* docs/perl.html: Added link to RDFStore

2000-11-05  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/python.html: Added 4RDF links

	* docs/python.html: Minor edits.
	Added links to other Python APIs and apps.

	* docs/perl.html: Minor edits.
	Added links to other Perl APIs and apps.

	* docs/api.sgml.in:
	Minor updates to link to new modules.

	* docs/Makefile.am:
	Worked out a way to make 1 big HTML API document

2000-11-04  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/packages.html:
	Obsolete, never published

	* INSTALL.html:
	Updated to link to Perl and Python docs
	Added more detail for BDB arguments.
	Explained expanded SiRPAC and SAX options, sigh.
	Moved perl text into docs/perl.html
	Minor style tweaks

	* LICENSE.html, FAQS.html:
	Minor style tweaks

	* redland.spec.in: Added Perl and Python docs

	* README.html:
	Updated to link to Perl and Python docs

	* docs/Makefile.am: Reordered doc sections
	Added documentation for perl, python interfaces.

	* Makefile.am:
	Added SWIG 1.3a5 common perl/python interface file

	* rdf_storage_hashes.c (librdf_storage_hashes_init_common):
	On any hash creation failure,
	end construction.
	Correct the clean up during creation failures

	* rdf_storage.c (librdf_new_storage_from_factory):
	Don't free options on failure -
	will be done by storage factory

	* rdf_parser_repat.c, rdf_parser_redland.c:
	Updated comment documentation for parser API changes

	* example4.c:
	Tidy up properly when parsing fails

	* docs/README.html:
	Added links to perl, python interface docs

	* docs/python.html: Python Interface

	* docs/perl.html: Perl Interface

	* python/RDF.py: Updates for SWIG 1.3a5

	* python/Makefile.am, python/MANIFEST.in, perl/MANIFEST,
	perl/Makefile.PL, perl/Makefile.am:
	Updates for SWIG 1.3a5 and common perl/python interface file

	* Redland.i: Merged of perl/python versions

	* perl/Redland.i, python/Redland.i:
	Moved to root src dir

	* perl/lib/RDF/Statement.pm
	(new,new_from_statement,_new_from_object,new_from_nodes):
	Return undef on failure to create an librdf_statement

	* perl/lib/RDF/Node.pm
	(new,new_from_uri_string,new_from_uri,new_from_literal,new_from_node,_new_from_object):
	Return undef on failure to create an librdf_node

	* perl/lib/RDF/URI.pm (new,new_from_uri):
	Return undef on failure to create an librdf_uri

	* perl/lib/RDF/Parser.pm (feature):
	Use $uri consistently.

	* perl/example.pl:
	Use repat as test parser since it's always included.

2000-11-03  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Makefile.am:
	Don't compile java classes here for the moment

	* rdf_parser_libwww.c:
	Updates for new parser API

2000-11-02  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_parser_sirpac.c:
	Updated for changed parser API
	Split for 2 SiRPAC implementations - W3C and Stanford
	Support for streaming/static support via Java --streaming/--static
	depending on whether the parser features aboutEach/prefix are set.

	* rdf_parser_repat.c:
	Updated for changed parser API
	Start to gather parseType literal content - unfinished.

	* rdf_parser_redland.c:
	Updated for changed parser API
	Other minor changes

	* rdf_parser_libwww.c:
	Updated for changed parser API

	* rdf_parser.c:
	Updated for changed parser API:
	Constructor takes optional MIME type, URI of syntax
	Added error/warning handling methods and callbacks
	Added set/get parser features
	Modifications for 2 SiRPACs

	* rdf_parser.h: Changed parser API:
	Constructor takes optional MIME type, URI of syntax
	Added error/warning handling methods and callbacks
	Added set/get parser features

	* configure.in:
	Added python support and configuration
	Updated for 2 sirpac parsers, SAX and added lots more configuration

	* rdf_concepts.h, rdf_concepts.c:
	Fixed bad ordering of rdf:/rdfs: concepts.  They may be all
	correct  now but since this hasn't been machine generated or
	validated, no guarantee.

	* example1.c:
	Update for new parser constructor

	* acconfig.h:
	Updated Java parser defines for SiRPAC, SAX

	* PrintParser.java:
	Updated to have --streaming/--static flags to pick parser modes.
	Tidied messages and error reporting.

	* example4.c:
	Update for new parser constructor
	Set rdf:aboutEach/prefix parser features depending on the type of
	parse: parse (model) - yes or parse-stream - no

	* python/Makefile.am:
	Remove obsolete fake lib stuff - not compiling separate C module

	* python/setup.py:
	Another attempt to get the linking libraries line right

	* python/MANIFEST.in:
	Tweaked to pick up test dir

	* python/Makefile.am:
	Need to use includes in top srcdir

	* python/test/Makefile.am:
	Added to make autoconf-able

	* perl/example.pl:
	Updated for new parser constructor api

	* perl/Redland.i:
	Updated for new parser APIs - constructor, features

	* perl/Makefile.am:
	Pass installation prefix on to perl commands

	* perl/lib/RDF/Parser.pm (new):
	Updated for parser constructor args
	(feature): Added to get/set parser features

	* python/test/test.py, python/setup.py, python/Makefile.am,
	python/MANIFEST.in, python/RDF.py, python/README,
	python/Redland.i, python/setup.cfg:
	Python interface

2000-10-26  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_parser_repat.c, rdf_parser_libwww.c:
	Updated for amended parser API with base URIs
	Use the base URI to fix IDs relative to source URIs (file names)

	* rdf_parser_redland.c, rdf_parser_sirpac.c:
	Updated for amended parser API with base URIs

	* rdf_parser.h:
	Updated prototypes for librdf_parser_parse_as_stream and
	librdf_parser_parse_into_model) to pass base URIs in.
	Updated factory API to have general URI/file: URI versions of methods

	* rdf_parser.c:
	(librdf_parser_parse_as_stream,librdf_parser_parse_into_model):
	Updated to pass base URIs to parsers and deal with parsers that only
	do file: URIs (have no built in HTTP etc. networking code).

	* example4.c:
	Updated for amended parser API with base URIs
	Split parse into parse into model / parse as stream into model

	* example1.c:
	Updated for amended parser API with base URIs

	* repat/repat.html, repat/rdfparse.h, repat/rdfparse.c,
	repat/rdfdump.c, repat/CHANGES:
	Updated to Repat 2000-10-22

	* perl/example.pl:
	Updated to have parsing too.
	Tidied message output

	* perl/Makefile.PL, perl/Makefile.am:
	Zap redland_perl.c - can do in perl land.

	* perl/redland_perl.c:
	Deleted, can do in perl land

	* perl/Redland.i: Zap get_empty_* functions

	* perl/Redland.i:
	Update parse APIs now taking base uri parameters.

	* perl/test.pl:
	Update for strictness - use "" for undef-s in places.

	* perl/lib/RDF/Iterator.pm (next):
	Document why the returned librdf_node-s are wrapped this way.

	* perl/lib/RDF/Model.pm (serialise):
	Return stream of librdf_statement-s that should freed
	(find_statements): Return stream of librdf_statement-s that should
	NOT be freed

	* perl/lib/RDF/Parser.pm (parse_as_stream,parse_into_model):
	Update for base uris

	* perl/lib/RDF/Statement.pm (new_from_nodes):
	Use undef for C-land NULLs.
	(_new_from_object): Allow control over freedom of wrapped
	librdf_statement object.
	(subject,predicate,object): Fixed using these to set a statment part
	which didn't work at all.

	* perl/lib/RDF/Stream.pm (new,next):
	Track if streamed librdf_statement objects should be freed as
	you go or left (shared, handled by librdf_stream destruction)

	* perl/lib/RDF/Node.pm (new_from_node):
	Use internal object reference not RDF:::Node one to
	get copy of node
	(_new_from_object): Don't free librdf_nodes attached this way, at
	present they are shared.
	(DESTROY): Support for freeing protection

2000-10-24  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_node.h:
	Added prototype for librdf_new_node_from_normalised_uri_string

	* rdf_node.c (librdf_new_node_from_normalised_uri_string):
	Added to create nodes
	with URIs relative to new bases

	* rdf_uri.h:
	Added prototypes for librdf_new_uri_normalised_to_base,
	librdf_uri_is_file_uri, librdf_uri_as_filename

	* rdf_uri.c (librdf_new_uri_normalised_to_base):
	Added to create URIs for objects
	relative to new bases
	(librdf_uri_is_file_uri): Return true if URI is a file
	(librdf_uri_as_filename): Get the filename from URI (shared)
	Updated test code to check the normalising works

	* configure.in, acconfig.h:
	Added JAVA_CLASS_DIR

	* perl/lib/RDF.pm:
	Call librdf_init_world with "" for empty char* field, swig is happier
	that way.

	* perl/lib/RDF/Parser.pm (new):
	Return undef when object creation fails
	(parse_into_model): Use correct internal reference

	* perl/lib/RDF/Stream.pm (end, next):
	Return empty stream when stream object undef

2000-10-20  Dave Beckett  <Dave.Beckett@bristol.ac.uk>
 
	* redland.spec.in: Added perl RPM

	* configure.in: Bump version to 0.9.6

	* redland.spec.in:
	zap rdf_context.h from devel RPM

	* Snapshotted redland_0_9_5 for 0.9.5 release

	* rdf_parser.c (librdf_init_parser):
	Make Repat the default RDF parser since it is
	always available.

	* README.html:
	Updated since Redland now has a built in parser - Repat

	* INSTALL.html:
	Updated perl test to show how to run in-situ and expected results

	* NEWS.html: Updated for 0.9.5 release

	* configure.in:
	Another round of XML parser configuration work, tests.
	Now assumes expat and libxml may live in dirs called those names

	* Makefile.am:
	Added rdf_parser_repat.c to distribution

	* repat/Makefile.am:
	No need for CFLAGS changes

2000-10-19  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_list.h, rdf_list.c:
	Made list implementation be double-linked so can remove at both ends

	* rdf_parser.h, rdf_parser.c:
	Added repat

	* rdf_parser_repat.c:
	Repat RDF Parser implementation

	* configure.in:
	Added tests for repat RDF parser and configuring repat sub directory

	* acconfig.h: Added HAVE_REPAT_RDF_PARSER

	* repat/rdfdump.c, repat/rdfparse.c, repat/rdfparse.h,
	repat/repat.html, repat/CHANGES, repat/Makefile.am, repat/README:
	Imported Repat dated 2000-10-14

2000-10-13  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.in:
	Check for XML_Parser_Create in xmlparse, don't need expat namespace
	support any more

	* Makefile.am:
	Added concepts, removed contexts

	* rdf_parser_redland.c:
	Track namespace declarations in/out of XML parsing scope
	(librdf_parser_redland_free): Created

	* rdf_concepts.c:
	Initialise namespace uri static pointers to NULLs

2000-10-12  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf.h: Removed contexts

	* rdf_statement.h:
	Lots of changes throughout to make librdf_statement be librdf_node.
	No user visible changes to the interface.
	Removed all context interface references

	* rdf_node.h:
	Lots of changes throughout to make nodes be Statements (done) and
	other RDF concepts (not done yet).

	* rdf_statement.c:
	Lots of changes throughout to make librdf_statement be librdf_node.
	No user visible changes from this interface.
	Removed all references to contexts - these will be done another way

	* rdf_node.c:
	Lots of changes throughout to make nodes be Statements (done) and
	other RDF concepts (not done yet).
	(librdf_finish_node): Added
	Use const char* instead of char* where appropriate
	(librdf_new_node_from_uri_qname): Added, to create a new from a
	URI+qname

	* rdf_uri.h:
	Try using const char* instead of char*
	Added librdf_new_uri_from_uri_qname

	* rdf_uri.c:
	(librdf_new_uri, ..) Try using const char* instead of char*
	(librdf_new_uri_from_uri_qname): Create a URI from an existing URI
	plus a qname

	* rdf_init.c (librdf_destroy_world):
	Reorder destruction order to be reverse of
	creation
	Added concepts init/finish stuff

	* rdf_concepts.c, rdf_concepts.h:
	RDF Model, Syntax and Schema concepts

	* rdf_context.h: Not needed

2000-10-10  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/example.pl:
	Exercise the methods for retrieving statement parts and the as_string methods

	* perl/lib/RDF/Statement.pm (object):
	Extra return removed, oops.

2000-10-06  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/lib/RDF/Statement.pm (subject,predicate,object):
	Return new RDF::Node objects

2000-10-02  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/Makefile.am:
	make clean now tidies everything generated except for swig-derived
	output

	* perl/redland_perl.c, perl/Redland.i:
	Added redland_perl_get_empty_hash

2000-10-02  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/Makefile.am:
	make clean now tidies everything generated except for swig-derived
	output

	* perl/redland_perl.c, perl/Redland.i:
	Added redland_perl_get_empty_hash

2000-10-01  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* perl/Makefile.PL:
	Add all remaining libs to linkin from output of redland --libs

	* perl/Redland.i:
	Remove support for librdf_uri_as_string since librdf_uri_to_string is
	better for Perl, it owns the new memory.

	* perl/test.pl:
	Added Redland:: and RDF:: versions of all tests.

	* perl/lib/RDF/Statement.pm:
	Add flag to avoid freeing a 'wrapped' object created and owned by
	librdf

	* perl/lib/RDF/Model.pm:
	When creating streams or iterators, return a reference to this model
	so that the objects can keep a reference to this object preventing
	premature destruction before this object.

	* perl/lib/RDF/URI.pm (as_string):
	Use librdf_uri_to_string to prevent sharing a char*
	pointer.

	* perl/lib/RDF/Stream.pm:
	Track the object that created the RDF::Stream object so we don't
	get freed before it does.

	* perl/lib/RDF/Iterator.pm:
	Track the object that created the RDF::Iterator object so we don't
	get freed before it does.

2000-09-29  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* configure.in: Bump version to 0.9.4

	* README.html:
	Tweaked words to add missing conjections ;-)

	* NEWS.html: Post 0.9.4 tweak

	* Snapshotted redland_0_9_4 for 0.9.4 release

	* README.html: Reworded overview.
	Pruned provides section.
	Added link to lxr source cross reference
	Merged install/docs section.
	Updated see also links.

	* NEWS.html: Updated for 0.9.4 release

	* INSTALL.html:
	Added short note on perl interface

	* perl/example.pl:
	Redland eaxmple Perl program

	* perl/Makefile.PL:
	Convert output of redland-config --libs into absolute dirs - hack.

	* perl/Makefile.am: Added redland_perl.c

	* perl/redland_perl.c:
	Extra SWIG-perl / redland interfaces for Redland

	* perl/Redland.i:
	Added redland_perl_get_empty_node to get (librdf_node*)NULL pointers
	- there must be an easier way to do this.

	* perl/test.pl:
	More warnings, error checking.
	Turn on debugging if TEST_VERBOSE envariable defined
	Check statement querying, serialising and printing

	* perl/lib/RDF/URI.pm: Use $RDF::Debug

	* perl/lib/RDF/Stream.pm: Use $RDF::Debug
	(next) Fixed to return RDF::Statement objects

	* perl/lib/RDF/Storage.pm: Use $RDF::Debug
	Make constructors return undef on failure

	* perl/lib/RDF/Statement.pm: Use $RDF::Debug
	(new_from_nodes) Replace undef node references with NULL
	librdf_node pointers and tidy up more carefully.
	(_new_from_object): Created to make perl objects from
	librdf_statement objects created by librdf

	* perl/lib/RDF/Parser.pm: Use $RDF::Debug

	* perl/lib/RDF/Node.pm: Use $RDF::Debug
	(_new_from_object): Created to make perl objects from librdf_node
	objects created by librdf

	* perl/lib/RDF/Model.pm: Use $RDF::Debug
	Make constructors return undef on failure
	(add_statement): Don't zap things that don't exist.

	* perl/lib/RDF/Iterator.pm: Use $RDF::Debug
	(next) Renamed from get_next, fixed to return RDF::Node objects

	* perl/lib/RDF.pm:
	Added $RDF::Debug variable.

2000-09-28  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_parser_redland.c:
	Redland RDF Parser implementation

	* configure.in:
	Check for libxml using xml-config program and insert xml-config
	invocations into LIBS and CFLAGS when needed.
	Don't build libwww rdf parser if RDF support isn't in it.

	* Makefile.am: Added rdf_parser_redland.c

	* configure.in:
	Fix XML library checking tests
	Add XML objects to librdf when using local copies from source
	Added perl directory to subdirs list and use automakefiles there

	* Makefile.am:
	Added XML_OBJS to allow XML parser objects to be in librdf.a when
	necessary

	* perl/Makefile.PL:
	Receive configuration values (package, version, top src dir) from
	environment

	* perl/Makefile.am:
	Added perl build, check, install, clean etc support

	* perl/lib/RDF/Makefile.am, perl/Makefile.am, perl/lib/Makefile.am:
	Added automake for perl

	* perl/Makefile.PL: Output to Makefile.perl
	Ensure only .pm files are installed

	* perl/MANIFEST, perl/MANIFEST.SKIP,
	perl/lib/RDF/Storage.pm, perl/lib/RDF/Stream.pm,
	perl/lib/RDF/URI.pm, perl/lib/RDF/Iterator.pm,
	perl/lib/RDF/Model.pm, perl/lib/RDF/Node.pm,
	perl/lib/RDF/Parser.pm, perl/lib/RDF/Statement.pm,
	perl/Makefile.PL, perl/Redland.i, perl/lib/RDF.pm, perl/test.pl:
	Added perl interface

	* rdf_init.c:
	export copyright and version constants

2000-09-27  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* rdf_parser.c (librdf_init_parser):
	Don't use redland RDF parser by default - not
	working yet.

	* expat/xmltok/Makefile.am:
	Add -DXML_NS for expat - enabling namespace support.

	* rdf_parser.h:
	Prototype for redland librdf_parser_redland_constructor

	* rdf_parser.c:
	Initialise redland (internal) parser if present

	* configure.in:
	Added expat / libxml configuration - searching in system or source tree
	Added configurable rdf parser option --enables-parsers

	* acconfig.h:
	Added NEED_EXPAT and NEED_LIBXML

	* Makefile.am: Reorganised header macros
	Added LICENSE.txt to dist

2000-09-25  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* acconfig.h: Added HAVE_REDLAND_RDF_PARSER

2000-08-31  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* librdf.h, rdf_storage_hashes.c, rdf_hash.c, rdf_heuristics.c:
	Use rdf_heuristics.h header

	* rdf_init.c: Use rdf_init.h header

	* rdf_init.h:
	Overall library initialisation / termination prototypes

	* rdf_heuristics.h:
	Heuristic routines to guess things about RDF prototypes

	* redland.spec.in: RPM spec file

	* NEWS.html:
	Reworded 0.9.3 release notes, post release (for website).

	* configure.in: Bump version to 0.9.4

2000-08-30  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Snapshotted redland_0_9_3 for 0.9.3 release

	* NEWS.html: Updated for 0.9.3 release

	* INSTALL.html: Give test run for example4

	* example4.c: oops - s/new/free/

	* docs/Makefile.am: Tidy order of junk

	* example4.c: Added parse command.

	* example4.c: initialise cmd

	* Makefile.am:
	Added autogen.sh to distribution.

	* autogen.sh:
	Generates the initial makefiles from a pristine CVS tree

	* INSTALL.html:
	Added reference to autogen.sh script

	* configure.in: Configure Java sources

	* Makefile.am:
	Maintainer - compile the java classes
	Add the sources and classes to the release

2000-08-28  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* PrintParser.java:
	Use streaming SiRPAC to parse RDF/XML content to triples

	* PrintConsumer.java:
	SiRPAC RDF consumer that prints out triple as they are added

	* rdf_parser_sirpac.c:
	Use SiRPAC in streaming mode via local PrintParser class

	* configure.in:
	Don't check for HTRDFParseFile yet

	* rdf_stream.h:
	Added prototype for librdf_new_stream_from_node_iterator

	* rdf_stream.c (librdf_new_stream_from_node_iterator):
	Added, creating a stream from
	a node iterator and a partial statement.
	(librdf_stream_from_node_iterator_end_of_stream,
	librdf_stream_from_node_iterator_next_statement,
	librdf_stream_from_node_iterator_finished): Added, implementing the
	stream for the above function.

	* rdf_storage_hashes.c:
	Updated comments in storage hashes context structure.
	(librdf_storage_hashes_find_sources,librdf_storage_hashes_find_arcs,librdf_storage_hashes_find_targest):
	Added and implemented returning an interator over sources, arcs,
	targets nodes for storage hashes.
	(librdf_storage_storage_hashes_node_iterator_have_elements,
	librdf_storage_storage_hashes_node_iterator_get_next,
	librdf_storage_storage_hashes_node_iterator_finished): Added,
	implementing the iterator API for the above node iterators
	(librdf_storage_hashes_node_iterator_create): Added helper function
	to create the iterator for the above node iterators.

	* rdf_storage.c (librdf_storage_node_stream_to_node_create):
	Added, implementing
	duplicated code that was in get sources, targets and arcs methods.

	* rdf_statement.h:
	Update documentation about use of statement parts macros

	* rdf_statement.c (librdf_new_statement_from_statement):
	Copy partial statements
	correctly and return an error only when a node copy fails.

	* rdf_node.c (librdf_new_node_from_node):
	Return NULL (fail) when given NULL node

	* rdf_init.c (librdf_init_world):
	 More documentation added.

	* rdf_hash_memory.c:
	Corrected librdf_hash_memory_exists return code documentation.

	* rdf_hash_bdb.c (librdf_hash_bdb_exists):
	Corrected return code documentation.
	When want key/value, for earlier BDB V2, with no DB_GET_BOTH flag,
	implement using cursor and for BDB V1, using sequence (V1 not tested)

	* rdf_hash.c:
	Corrected librdf_hash_exists return code documentation.

	* Makefile.am: clean test databases

	* INSTALL.html:
	Add description of examples 1-4

	* example4.c:
	Tidied code, removed some duplicate long expressions.
	Added more detailed usage.

	* README.html:
	Tidy start of document, link to project home.

	* configure.in:
	Check for HTRDFParseFile in libwww

	* docs/Makefile.am:
	Added hash cursor, storage hashes, heuristics sections
	Amended rules to build HTML api automatically when SGML changes

	* docs/api.sgml.in:
	Added hash cursor, storage hashes, heuristics sections

2000-08-27  Dave Beckett <Dave.Beckett@bristol.ac.uk>

	* rdf_storage_hashes.c:
	Updated for new hash API
	(librdf_storage_hashes_init_common): Created from init method to
	provide core code for init and clone.
	(librdf_storage_hashes_clone): Created and works.
	(librdf_storage_hashes_add_remove_statement): Create from
	add_statement method to provide core code for add/remove statement
	(librdf_storage_hashes_remove_statement): Implemented.

	* example4.c:
	Can now check for statements with contains, add and remove statements.

	* example1.c:
	Set new=yes to create new storage

	* Makefile.am: Added examples target

	* rdf_hash_memory.c, rdf_hash_bdb.c, rdf_hash.h, rdf_hash.c:
	Updated for new hash API

	* rdf_heuristics.c (librdf_heuristic_gen_name):
	Fix an off-by-one error.

	* rdf_model.h:
	Removed librdf_new_model_from_stream prototype - not needed

	* rdf_model.c (librdf_new_model_from_stream):
	Deleted, not needed. A model can be
	created using librdf_new_model and statements added from a stream
	using librdf_model_add_statements

	* rdf_uri.c: Updated for new hash API

2000-08-26  Dave Beckett <Dave.Beckett@bristol.ac.uk>

	* example3.c: option hash_type -> hash-type

	* Makefile.am: Added example4

	* example4.c:
	Redland example code querying stored triples

	* rdf_hash_gdbm.c:
	Updated for cloning support but not tested - it compiles and that's all.

	* example1.c: option hash_type -> hash-type

	* rdf_hash_memory.c:
	Update context for clone support
	(librdf_hash_memory_create): Added object creation call
	(librdf_hash_memory_destroy): Added object destruction call - memory
	freeing is now done here.
	(librdf_hash_memory_open): Now a nop
	(librdf_hash_memory_close): Now a nop
	(librdf_hash_memory_clone): Added clone method

	* rdf_hash_bdb.c:
	Update context for clone support
	(librdf_hash_bdb_create): Added object creation call
	(librdf_hash_bdb_destroy): Added object destruction call (nop)
	(librdf_hash_bdb_open): Initialise more state for use by clone
	(librdf_hash_bdb_clone): Added clone method, calling librdf_hash_bdb_open

	* rdf_storage.c (librdf_new_storage_from_storage):
	Correct order of storage initialisation

	* rdf_storage.h: Added clone method

	* example2.c: option hash_type -> hash-type

	* rdf_hash.c (librdf_new_hash_from_factory):
	Call factory create method
	(librdf_new_hash_from_hash): Generate a new identifier for copy, pass
	on to hash factory clone method to do work.
	(librdf_free_hash): Call factory destroy method too.
	(librdf_hash_open): Copy and store identifier for later use.
	(librdf_hash_close): Free store identifier
	Test code: test hash cloning and get as long and boolean methods

	* rdf_hash.h:
	Rename prototype arg to prevent clash with type defined in gdbm.h
	hash object now stores identifier, for later use when cloning
	In hash factory:
	Amended clone method to take necessary parameters.
	Added create and destroy methods for work at hash object creation / destruction

	* librdf.h:
	Made librdf_heuristic_object_is_literal public again - useful in user code.

2000-08-25  Dave Beckett <Dave.Beckett@bristol.ac.uk>

	* rdf_storage_hashes.c:
	Keep a copy of the hash_type and db_dir options, for use in cloneing
	renamed "hash_type" option to "hash-type"

	* rdf_storage.h:
	Added storage factory clone function
	Added librdf_new_storage_from_storage prototype.

	* rdf_storage.c (librdf_new_storage_from_storage):
	Added, uses clone method of
	factory if defined (else dies at present)

	* rdf_heuristics.c:
	Added include to get strncpy prototype

	* rdf_model.c (librdf_new_model_from_model):
	Implemented by making
	librdf_new_storage_from_storage to do all the work.

	* Makefile.am: rdf_heuristics_test test added

	* rdf_heuristics.c (librdf_heuristic_gen_name):
	Added.
	Test code - added for librdf_heuristic_gen_name

	* configure.in:
	Check for mkstemp mktemp tmpnam, used in librdf_heuristic_gen_name

	* rdf_hash.h:
	Added hash factory clone function
	Added librdf_new_hash_from_hash prototype.

	* rdf_hash.c (librdf_new_hash_from_hash):
	Copy constructor added - requires hash
	factory clone function to be implemented

2000-08-22  Dave Beckett <Dave.Beckett@bristol.ac.uk>

	* librdf.h:
	Attempt to split public / private header files

	* rdf_parser_sirpac.c:
	Don't throw away SiRPAC stderr output (error messages), and display
	warning if pipe closes or sirpac execution seems to fail.

	* rdf_files.h, rdf_files.c:
	RDF File and directory handling utilities

	* configure.in: Bump version to 0.9.3

	* example3.c:
	Redland example code creating model, statement and storing it in 10 lines

	* Makefile.am:
	Added example3, renamed example to example1

	* example.c, example1.c:
	example.c renamed to example1.c

	* rdf_statement.h:
	Added librdf_new_statement_from_nodes prototype

	* rdf_statement.c (librdf_new_statement_from_nodes):
	Added, creates a new statement
	from node objects - useful for chaining calls to create statements.

	* rdf_digest.c:
	Test code: check digest answers against known correct values

2000-08-21  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* Snapshotted redland_0_9_2 for 0.9.2 release

	* NEWS.html: Updated for 0.9.2

	* README.html:
	Rewrite docs links as relative URLs since API docs now in release

	* acconfig.h, configure.in, rdf_init.c:
	configure now splits and generates sub-version numbers

	* Makefile.am:
	Add api directory to distribution, remove it when really cleaning

	* README.html:
	Added details of what library provides, linking into API docs

	* docs/Makefile.am:
	Tidy up before building SGML file

	* docs/README.html:
	Link to PDF overview file now.

	* docs/build-docs:
	Fix kernel-doc problem ignoring &librdf_foo stuff

	* docs/api.sgml.in:
	Added new section "Introduction to Objects in C" outlining
	conventions for methods, constructors etc.

	* docs/Makefile.am:
	Added overview.pdf, some make targets for overview.*

	* docs/overview.xfig: Added title, copyright.
	Made a little smaller

2000-08-18  Dave Beckett  <Dave.Beckett@bristol.ac.uk>

	* docs/Makefile.am: Added API overview files

	* docs/overview.xfig: API overview XFig

	* docs/README.html:
	Link to overview PNG, PS files

	* docs/README.html:
	Link to documents at root of tree

	* Snapshotted redland_0_9_1 for 0.9.1 release

	* Updated for 0.9.1

	* configure.in:
	Emit warnings if no persistant storage or RDF parsers configured

	* INSTALL.html:
	Added more configure examples and descriptions, how to clean up when
	reconfiguring.  Explain more about what the examples do.  Added java
	command line test.

	* configure.in, rdf_init.c:
	Bump version to 0.9.1

	* configure.in:
	BDB V1 does not work - make configure warn and disable BDB support if
	only that version is found.

	* rdf_hash_bdb.c (librdf_hash_bdb_cursor_init):
	cursor creation failures were not
	passed on.
	(librdf_hash_bdb_cursor_get): Make it compile with BDB V1 - may not
	work.

	* Snapshotted redland_0_9_0 for 0.9.1 release

