/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

/*
  +----------------------------------------------------------------------+
  | PHP version 4.0                                                      |
  +----------------------------------------------------------------------+
  | Copyright (c) 1997, 1998, 1999, 2000, 2001 The PHP Group             |
  +----------------------------------------------------------------------+
  | This source file is subject to version 2.02 of the PHP license,      |
  | that is bundled with this package in the file LICENSE, and is        |
  | available at through the world-wide-web at                           |
  | http://www.php.net/license/2_02.txt.                                 |
  | If you did not receive a copy of the PHP license and are unable to   |
  | obtain it through the world-wide-web, please send a note to          |
  | license@php.net so we can mail you a copy immediately.               |
  +----------------------------------------------------------------------+
  | Authors:                                                             |
  |                                                                      |
  +----------------------------------------------------------------------+
 */


#ifndef PHP_REDLAND_H
#define PHP_REDLAND_H

extern zend_module_entry redland_module_entry;
#define phpext_redland_ptr &redland_module_entry

#ifdef PHP_WIN32
# define PHP_REDLAND_API __declspec(dllexport)
#else
# define PHP_REDLAND_API
#endif

PHP_MINIT_FUNCTION(redland);
PHP_MSHUTDOWN_FUNCTION(redland);
PHP_RINIT_FUNCTION(redland);
PHP_RSHUTDOWN_FUNCTION(redland);
PHP_MINFO_FUNCTION(redland);

ZEND_NAMED_FUNCTION(_wrap_librdf_new_world);
ZEND_NAMED_FUNCTION(_wrap_librdf_free_world);
ZEND_NAMED_FUNCTION(_wrap_librdf_world_open);
ZEND_NAMED_FUNCTION(_wrap_librdf_init_world);
ZEND_NAMED_FUNCTION(_wrap_librdf_destroy_world);
ZEND_NAMED_FUNCTION(_wrap_librdf_free_iterator);
ZEND_NAMED_FUNCTION(_wrap_librdf_iterator_have_elements);
ZEND_NAMED_FUNCTION(_wrap_librdf_iterator_end);
ZEND_NAMED_FUNCTION(_wrap_librdf_iterator_get_object);
ZEND_NAMED_FUNCTION(_wrap_librdf_iterator_get_context);
ZEND_NAMED_FUNCTION(_wrap_librdf_iterator_next);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_uri);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_uri_from_uri);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_uri_from_filename);
ZEND_NAMED_FUNCTION(_wrap_librdf_free_uri);
ZEND_NAMED_FUNCTION(_wrap_librdf_uri_to_string);
ZEND_NAMED_FUNCTION(_wrap_librdf_uri_equals);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_node);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_node_from_uri_string);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_node_from_uri);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_node_from_literal);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_node_from_typed_literal);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_node_from_node);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_node_from_blank_identifier);
ZEND_NAMED_FUNCTION(_wrap_librdf_free_node);
ZEND_NAMED_FUNCTION(_wrap_librdf_node_get_uri);
ZEND_NAMED_FUNCTION(_wrap_librdf_node_get_type);
ZEND_NAMED_FUNCTION(_wrap_librdf_node_get_literal_value);
ZEND_NAMED_FUNCTION(_wrap_librdf_node_get_literal_value_as_latin1);
ZEND_NAMED_FUNCTION(_wrap_librdf_node_get_literal_value_language);
ZEND_NAMED_FUNCTION(_wrap_librdf_node_get_literal_value_datatype_uri);
ZEND_NAMED_FUNCTION(_wrap_librdf_node_get_literal_value_is_wf_xml);
ZEND_NAMED_FUNCTION(_wrap_librdf_node_to_string);
ZEND_NAMED_FUNCTION(_wrap_librdf_node_get_blank_identifier);
ZEND_NAMED_FUNCTION(_wrap_librdf_node_is_resource);
ZEND_NAMED_FUNCTION(_wrap_librdf_node_is_literal);
ZEND_NAMED_FUNCTION(_wrap_librdf_node_is_blank);
ZEND_NAMED_FUNCTION(_wrap_librdf_node_equals);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_statement);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_statement_from_statement);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_statement_from_nodes);
ZEND_NAMED_FUNCTION(_wrap_librdf_free_statement);
ZEND_NAMED_FUNCTION(_wrap_librdf_statement_get_subject);
ZEND_NAMED_FUNCTION(_wrap_librdf_statement_set_subject);
ZEND_NAMED_FUNCTION(_wrap_librdf_statement_get_predicate);
ZEND_NAMED_FUNCTION(_wrap_librdf_statement_set_predicate);
ZEND_NAMED_FUNCTION(_wrap_librdf_statement_get_object);
ZEND_NAMED_FUNCTION(_wrap_librdf_statement_set_object);
ZEND_NAMED_FUNCTION(_wrap_librdf_statement_to_string);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_model);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_model_with_options);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_model_from_model);
ZEND_NAMED_FUNCTION(_wrap_librdf_free_model);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_size);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_add);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_add_typed_literal_statement);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_add_statement);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_add_statements);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_remove_statement);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_contains_statement);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_as_stream);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_serialise);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_find_statements);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_get_sources);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_get_arcs);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_get_targets);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_get_source);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_get_arc);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_get_target);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_context_add_statement);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_context_add_statements);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_context_remove_statement);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_context_remove_statements);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_context_as_stream);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_context_serialize);
ZEND_NAMED_FUNCTION(_wrap_librdf_model_sync);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_storage);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_storage_from_storage);
ZEND_NAMED_FUNCTION(_wrap_librdf_free_storage);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_parser);
ZEND_NAMED_FUNCTION(_wrap_librdf_free_parser);
ZEND_NAMED_FUNCTION(_wrap_librdf_parser_parse_as_stream);
ZEND_NAMED_FUNCTION(_wrap_librdf_parser_parse_into_model);
ZEND_NAMED_FUNCTION(_wrap_librdf_parser_parse_string_as_stream);
ZEND_NAMED_FUNCTION(_wrap_librdf_parser_parse_string_into_model);
ZEND_NAMED_FUNCTION(_wrap_librdf_parser_get_feature);
ZEND_NAMED_FUNCTION(_wrap_librdf_parser_set_feature);
ZEND_NAMED_FUNCTION(_wrap_librdf_new_serializer);
ZEND_NAMED_FUNCTION(_wrap_librdf_free_serializer);
ZEND_NAMED_FUNCTION(_wrap_librdf_serializer_serialize_model_to_file);
ZEND_NAMED_FUNCTION(_wrap_librdf_serializer_get_feature);
ZEND_NAMED_FUNCTION(_wrap_librdf_serializer_set_feature);
ZEND_NAMED_FUNCTION(_wrap_librdf_free_stream);
ZEND_NAMED_FUNCTION(_wrap_librdf_stream_end);
ZEND_NAMED_FUNCTION(_wrap_librdf_stream_next);
ZEND_NAMED_FUNCTION(_wrap_librdf_stream_get_object);
ZEND_NAMED_FUNCTION(_wrap_librdf_stream_get_context);
ZEND_NAMED_FUNCTION(_wrap_librdf_internal_test_error);
ZEND_NAMED_FUNCTION(_wrap_librdf_internal_test_warning);
ZEND_NAMED_FUNCTION(_wrap_redland_copyright_string_get);
ZEND_NAMED_FUNCTION(_wrap_redland_version_string_get);
ZEND_NAMED_FUNCTION(_wrap_redland_version_major_get);
ZEND_NAMED_FUNCTION(_wrap_redland_version_minor_get);
ZEND_NAMED_FUNCTION(_wrap_redland_version_release_get);
/*If you declare any globals in php_redland.h uncomment this:
ZEND_BEGIN_MODULE_GLOBALS(redland)
ZEND_END_MODULE_GLOBALS(redland)
*/
#ifdef ZTS
#define REDLAND_D  zend_redland_globals *redland_globals
#define REDLAND_DC  , REDLAND_D
#define REDLAND_C  redland_globals
#define REDLAND_CC  , REDLAND_C
#define REDLAND_SG(v)  (redland_globals->v)
#define REDLAND_FETCH()  zend_redland_globals *redland_globals = ts_resource(redland_globals_id)
#else
#define REDLAND_D
#define REDLAND_DC
#define REDLAND_C
#define REDLAND_CC
#define REDLAND_SG(v)  (redland_globals.v)
#define REDLAND_FETCH()
#endif

#endif /* PHP_REDLAND_H */
